/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
export interface paths {
  '/api/Account': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Endpoint for registering new user in the system.Receives as input new user's details. */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['UserInfoBindingModel'];
          'application/json': components['schemas']['UserInfoBindingModel'];
          'text/json': components['schemas']['UserInfoBindingModel'];
          'application/*+json': components['schemas']['UserInfoBindingModel'];
          'application/xml': components['schemas']['UserInfoBindingModel'];
          'text/xml': components['schemas']['UserInfoBindingModel'];
          'application/*+xml': components['schemas']['UserInfoBindingModel'];
        };
      };
      responses: {
        /** @description Returns view model of newly created user. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['UserViewModelFull'];
            'application/json': components['schemas']['UserViewModelFull'];
            'text/json': components['schemas']['UserViewModelFull'];
            'application/xml': components['schemas']['UserViewModelFull'];
            'text/xml': components['schemas']['UserViewModelFull'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Account/validate-password': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Endpoint to check user's password and regenerate application cookies.
     * @description Only "password" field required.
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['LoginBindingModel'];
          'application/json': components['schemas']['LoginBindingModel'];
          'text/json': components['schemas']['LoginBindingModel'];
          'application/*+json': components['schemas']['LoginBindingModel'];
          'application/xml': components['schemas']['LoginBindingModel'];
          'text/xml': components['schemas']['LoginBindingModel'];
          'application/*+xml': components['schemas']['LoginBindingModel'];
        };
      };
      responses: {
        /** @description It regenerates cookies, returns nothing. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Account/Login': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Endpoint used to login in app, admin panel. */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['LoginBindingModel'];
          'application/json': components['schemas']['LoginBindingModel'];
          'text/json': components['schemas']['LoginBindingModel'];
          'application/*+json': components['schemas']['LoginBindingModel'];
          'application/xml': components['schemas']['LoginBindingModel'];
          'text/xml': components['schemas']['LoginBindingModel'];
          'application/*+xml': components['schemas']['LoginBindingModel'];
        };
      };
      responses: {
        /** @description It returns logged in user's view model. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['UserInfoViewModel'];
            'application/json': components['schemas']['UserInfoViewModel'];
            'text/json': components['schemas']['UserInfoViewModel'];
            'application/xml': components['schemas']['UserInfoViewModel'];
            'text/xml': components['schemas']['UserInfoViewModel'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Account/LoginAdmin': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Endpoint used to login in app, admin panel. */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['LoginBindingModel'];
          'application/json': components['schemas']['LoginBindingModel'];
          'text/json': components['schemas']['LoginBindingModel'];
          'application/*+json': components['schemas']['LoginBindingModel'];
          'application/xml': components['schemas']['LoginBindingModel'];
          'text/xml': components['schemas']['LoginBindingModel'];
          'application/*+xml': components['schemas']['LoginBindingModel'];
        };
      };
      responses: {
        /** @description It returns logged in user's view model. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['UserInfoViewModel'];
            'application/json': components['schemas']['UserInfoViewModel'];
            'text/json': components['schemas']['UserInfoViewModel'];
            'application/xml': components['schemas']['UserInfoViewModel'];
            'text/xml': components['schemas']['UserInfoViewModel'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Account/LoginDashboard': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Endpoint used to login in app, admin panel. */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['LoginBindingModel'];
          'application/json': components['schemas']['LoginBindingModel'];
          'text/json': components['schemas']['LoginBindingModel'];
          'application/*+json': components['schemas']['LoginBindingModel'];
          'application/xml': components['schemas']['LoginBindingModel'];
          'text/xml': components['schemas']['LoginBindingModel'];
          'application/*+xml': components['schemas']['LoginBindingModel'];
        };
      };
      responses: {
        /** @description It returns logged in user's view model. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['UserInfoViewModel'];
            'application/json': components['schemas']['UserInfoViewModel'];
            'text/json': components['schemas']['UserInfoViewModel'];
            'application/xml': components['schemas']['UserInfoViewModel'];
            'text/xml': components['schemas']['UserInfoViewModel'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Account/Password/Token': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Endpoint used to send password reset token to email. This endpoint does not require authentication. */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['SendPasswordTokenBindingModel'];
          'application/json': components['schemas']['SendPasswordTokenBindingModel'];
          'text/json': components['schemas']['SendPasswordTokenBindingModel'];
          'application/*+json': components['schemas']['SendPasswordTokenBindingModel'];
          'application/xml': components['schemas']['SendPasswordTokenBindingModel'];
          'text/xml': components['schemas']['SendPasswordTokenBindingModel'];
          'application/*+xml': components['schemas']['SendPasswordTokenBindingModel'];
        };
      };
      responses: {
        /** @description It returns nothing. Just indicates just password reset token generated and user should receive it via email. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Account/Password/Reset': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Endpoint to reset password using token. This endpoint does not require authentication. */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['ResetPasswordBindingModel'];
          'application/json': components['schemas']['ResetPasswordBindingModel'];
          'text/json': components['schemas']['ResetPasswordBindingModel'];
          'application/*+json': components['schemas']['ResetPasswordBindingModel'];
          'application/xml': components['schemas']['ResetPasswordBindingModel'];
          'text/xml': components['schemas']['ResetPasswordBindingModel'];
          'application/*+xml': components['schemas']['ResetPasswordBindingModel'];
        };
      };
      responses: {
        /** @description It returns nothing, just indicates that password reset with token should return no errors. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Account/Password/ValidateToken': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Endpoint to validate token. Token might be for resetting password, confirming email, user registration token. This endpoint does not require authentication. */
    get: {
      parameters: {
        query?: {
          userId?: number;
          token?: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description It returns nothing. Just indicates that token validated successfully. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Account/AuthStatus': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** This endpoint used to update user session and update last access. No parameters needed at all. */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['AuthenticationStatusViewModel'];
            'application/json': components['schemas']['AuthenticationStatusViewModel'];
            'text/json': components['schemas']['AuthenticationStatusViewModel'];
            'application/xml': components['schemas']['AuthenticationStatusViewModel'];
            'text/xml': components['schemas']['AuthenticationStatusViewModel'];
          };
        };
        /** @description It returns nothing. Just indicates that request worked successfully. */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Account/Info': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** This endpoint returns info about the user making this request and updates its session. */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns user info view model. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['UserInfoViewModel'];
            'application/json': components['schemas']['UserInfoViewModel'];
            'text/json': components['schemas']['UserInfoViewModel'];
            'application/xml': components['schemas']['UserInfoViewModel'];
            'text/xml': components['schemas']['UserInfoViewModel'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Account/Info/app': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Endpoint to get user info for the app. Similar to GET api/account/info, but returns less info. */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns user info view model. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['UserInfoViewModelApp'];
            'application/json': components['schemas']['UserInfoViewModelApp'];
            'text/json': components['schemas']['UserInfoViewModelApp'];
            'application/xml': components['schemas']['UserInfoViewModelApp'];
            'text/xml': components['schemas']['UserInfoViewModelApp'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Account/Language': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** User can edit own preferred language using this endpoint. */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['SetPreferredLanguageBindingModel'];
          'application/json': components['schemas']['SetPreferredLanguageBindingModel'];
          'text/json': components['schemas']['SetPreferredLanguageBindingModel'];
          'application/*+json': components['schemas']['SetPreferredLanguageBindingModel'];
          'application/xml': components['schemas']['SetPreferredLanguageBindingModel'];
          'text/xml': components['schemas']['SetPreferredLanguageBindingModel'];
          'application/*+xml': components['schemas']['SetPreferredLanguageBindingModel'];
        };
      };
      responses: {
        /** @description It returns nothing. Just indicates request worked successfully. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Account/Logout': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Endpoint to remove cookies and log out. */
    post: {
      parameters: {
        query?: {
          /** @description Optional parameter. If specified - delete that device if it exists and belongs to the user that is logging out, otherwise - just log out without deleting anything. */
          deviceId?: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description It returns nothing. Just indicates request worked successfully. */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Account/ChangePassword': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Endpoint to change password. After password changed, user logs in with new password automatically on backend side. */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['ChangePasswordBindingModel'];
          'application/json': components['schemas']['ChangePasswordBindingModel'];
          'text/json': components['schemas']['ChangePasswordBindingModel'];
          'application/*+json': components['schemas']['ChangePasswordBindingModel'];
          'application/xml': components['schemas']['ChangePasswordBindingModel'];
          'text/xml': components['schemas']['ChangePasswordBindingModel'];
          'application/*+xml': components['schemas']['ChangePasswordBindingModel'];
        };
      };
      responses: {
        /** @description It returns nothing. Just indicates request worked successfully. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Account/AntiForgeryToken': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Endpoint used to get and store antiforgery token. */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns request verification token. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['RequestVerificationTokenViewModel'];
            'application/json': components['schemas']['RequestVerificationTokenViewModel'];
            'text/json': components['schemas']['RequestVerificationTokenViewModel'];
            'application/xml': components['schemas']['RequestVerificationTokenViewModel'];
            'text/xml': components['schemas']['RequestVerificationTokenViewModel'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Account/EmergencyTypes': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Endpoint to get list of emergency types accessible for the user. */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['EmergencyTypeViewModel'][];
            'application/json': components['schemas']['EmergencyTypeViewModel'][];
            'text/json': components['schemas']['EmergencyTypeViewModel'][];
            'application/xml': components['schemas']['EmergencyTypeViewModel'][];
            'text/xml': components['schemas']['EmergencyTypeViewModel'][];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Account/AuthorizationUrl': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Endpoint to get authorization url for SSO login. In case Skolon, "provider" parameter passed, "email" parameter not used. In other cases "email" parameter required. */
    get: {
      parameters: {
        query?: {
          email?: string;
          redirectUrl?: string;
          /** @description sso provider */
          provider?: components['schemas']['SsoProvider'];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['SsoRedirectViewModel'];
            'application/json': components['schemas']['SsoRedirectViewModel'];
            'text/json': components['schemas']['SsoRedirectViewModel'];
            'application/xml': components['schemas']['SsoRedirectViewModel'];
            'text/xml': components['schemas']['SsoRedirectViewModel'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Account/CodeLogin': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Endpoint used to login with referral code. */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['CodeLoginBindingModel'];
          'application/json': components['schemas']['CodeLoginBindingModel'];
          'text/json': components['schemas']['CodeLoginBindingModel'];
          'application/*+json': components['schemas']['CodeLoginBindingModel'];
          'application/xml': components['schemas']['CodeLoginBindingModel'];
          'text/xml': components['schemas']['CodeLoginBindingModel'];
          'application/*+xml': components['schemas']['CodeLoginBindingModel'];
        };
      };
      responses: {
        /** @description Returns logged in user data. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['UserInfoViewModel'];
            'application/json': components['schemas']['UserInfoViewModel'];
            'text/json': components['schemas']['UserInfoViewModel'];
            'application/xml': components['schemas']['UserInfoViewModel'];
            'text/xml': components['schemas']['UserInfoViewModel'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Account/CodeGroupJoin': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Endpoint to join group using referral code. */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['CodeLoginBindingModel'];
          'application/json': components['schemas']['CodeLoginBindingModel'];
          'text/json': components['schemas']['CodeLoginBindingModel'];
          'application/*+json': components['schemas']['CodeLoginBindingModel'];
          'application/xml': components['schemas']['CodeLoginBindingModel'];
          'text/xml': components['schemas']['CodeLoginBindingModel'];
          'application/*+xml': components['schemas']['CodeLoginBindingModel'];
        };
      };
      responses: {
        /** @description Returns nothing, just indicates that request worked successfully. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Account/LeaveGroup/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Endpoint used to leave coAlert group. */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description group id */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns nothing, just indicates that request worked successfully. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Account/AlarmTest/Initiate': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Endpoint to send self alarm message. */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['InitiateAlarmTestBindingModel'];
          'application/json': components['schemas']['InitiateAlarmTestBindingModel'];
          'text/json': components['schemas']['InitiateAlarmTestBindingModel'];
          'application/*+json': components['schemas']['InitiateAlarmTestBindingModel'];
          'application/xml': components['schemas']['InitiateAlarmTestBindingModel'];
          'text/xml': components['schemas']['InitiateAlarmTestBindingModel'];
          'application/*+xml': components['schemas']['InitiateAlarmTestBindingModel'];
        };
      };
      responses: {
        /** @description Returns initiated alarm test Id. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['InitiateAlarmTestViewModel'];
            'application/json': components['schemas']['InitiateAlarmTestViewModel'];
            'text/json': components['schemas']['InitiateAlarmTestViewModel'];
            'application/xml': components['schemas']['InitiateAlarmTestViewModel'];
            'text/xml': components['schemas']['InitiateAlarmTestViewModel'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Account/AlarmTest/ReportStatus': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Endpoint to changes status of self alarm test. */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['AlarmTestStatusBindingModel'];
          'application/json': components['schemas']['AlarmTestStatusBindingModel'];
          'text/json': components['schemas']['AlarmTestStatusBindingModel'];
          'application/*+json': components['schemas']['AlarmTestStatusBindingModel'];
          'application/xml': components['schemas']['AlarmTestStatusBindingModel'];
          'text/xml': components['schemas']['AlarmTestStatusBindingModel'];
          'application/*+xml': components['schemas']['AlarmTestStatusBindingModel'];
        };
      };
      responses: {
        /** @description Returns nothing, just indicates that request worked successfully. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Account/Support': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Endpoint to get support contacts of organizations where user is member. */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns organization view models which contain support contact information. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['OrganizationViewModelWithSupportContacts'][];
            'application/json': components['schemas']['OrganizationViewModelWithSupportContacts'][];
            'text/json': components['schemas']['OrganizationViewModelWithSupportContacts'][];
            'application/xml': components['schemas']['OrganizationViewModelWithSupportContacts'][];
            'text/xml': components['schemas']['OrganizationViewModelWithSupportContacts'][];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Account/TestAPI': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Endpoint to test whether the backend api is alive (tests database connection, rabbitmq queue connections) */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns api status view model (database connection status, rabbitmq queue status) */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['TestApiViewModel'];
            'application/json': components['schemas']['TestApiViewModel'];
            'text/json': components['schemas']['TestApiViewModel'];
            'application/xml': components['schemas']['TestApiViewModel'];
            'text/xml': components['schemas']['TestApiViewModel'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Account/SamlRedirect': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Endpoint to get redirect url for saml sso authorization. Saml configurations are retrieved from user organization. In case user not found, it is created and initialized.
     * @description user is redirected to this url $"{redirectUrl}&code={token}.
     */
    post: {
      parameters: {
        query?: {
          organizationId?: number;
          /** @description Optional parameter used if the organization has more than one domain */
          domain?: string;
          redirectUrl?: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Found */
        302: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Account/GetIntercomToken': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Endpoint to get token token to be used with Intercom */
    get: {
      parameters: {
        query?: {
          /** @description 0 - android, 1 - ios, 2 - web */
          clientType?: components['schemas']['IntercomClientType'];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns UserId and Token used for Intercom. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['IntercomTokenViewModel'];
            'application/json': components['schemas']['IntercomTokenViewModel'];
            'text/json': components['schemas']['IntercomTokenViewModel'];
            'application/xml': components['schemas']['IntercomTokenViewModel'];
            'text/xml': components['schemas']['IntercomTokenViewModel'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Account/roles': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Endpoint to get user roles. Updating users sessions according to parent organization session configuration settings */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['UserRolesViewModel'];
            'application/json': components['schemas']['UserRolesViewModel'];
            'text/json': components['schemas']['UserRolesViewModel'];
            'application/xml': components['schemas']['UserRolesViewModel'];
            'text/xml': components['schemas']['UserRolesViewModel'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Groups/All': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get accessible groups in admin panel.
     * @description "Skip" - skip the specified number of elements from the list; "Limit" - take the specified number of elements from the list, "Asc" - (ASC or DESC) sorting order;
     *                 "Sort" - (Name or 0, TotalPeople or 1, TotalMessages or 2, Organization or 3, Suborganization or 4, Hidden or 5, RegistrationDate or 6, Municipality or 7, Type or 8), Name - sort by name, TotalPeople - sort by member count, TotalMessages - sort by total messages sent within group,
     *                 Organization - in case group belongs to suborganization, order by parent organization name, otherwise order by by groups organization name, Suborganization - in case group belongs to suborganization order by suborganizations name,
     *                 Hidden - put hidden groups first in the list, RegistrationDate - order by group created date, Municipality - order by groups municipality name, Type - order by groups type (ASC order will be: Normal,Hidden,CrossOrgGroup,CoAlert, DESC is in reverse order);
     *                 "Search" - filter groups by name using this parameter in case insensitive manner; "OrgId" - return groups from only specified organization; "Deleted" - include groups deleted within last 24h;
     *                 "IncludeSuborgs" - this parameter is used in pair with OrgId parameter, in case true suborganization groups included from the specified Organization (via OrgId paramter);
     *                 "IncludeAlarmGroups" - not used; "Id" - not used; "GroupType" - in case specified return groups of the specified type(0 - Normal, 2 - Hidden, 3 - CrossOrg, 4 - CoAlert);
     *                 "MenuItem" - in case specified filter groups by specified menuitem enabled in groups organization(possible values: groups, messages, news, checklists, documents, muster, group_alarm, offline_documents, organization_website, support, settings, profile, alarm, oncall_alert, group_alarm_work_alone);
     *                 "IncludeMembers" - in case true memberIds(members of the group) returned in group view models
     */
    get: {
      parameters: {
        query?: {
          Id?: number;
          Skip?: number;
          Limit?: number;
          Asc?: components['schemas']['SortEnum'];
          Sort?: components['schemas']['SortByEnum'];
          Search?: string;
          OrgId?: number;
          Deleted?: boolean;
          IncludeSuborgs?: boolean;
          IncludeAlarmGroups?: boolean;
          GroupType?: components['schemas']['GroupType'][];
          MenuItem?: string;
          IncludeMembers?: boolean;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns total groups count and group view models. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['GroupsViewModel'];
            'application/json': components['schemas']['GroupsViewModel'];
            'text/json': components['schemas']['GroupsViewModel'];
            'application/xml': components['schemas']['GroupsViewModel'];
            'text/xml': components['schemas']['GroupsViewModel'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Groups/getallusers': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @deprecated */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Groups/{id}/members': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Returns members of the specified group excluding coAlert users */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description group id */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns view models of group members */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['GroupMemberViewModelFull'][];
            'application/json': components['schemas']['GroupMemberViewModelFull'][];
            'text/json': components['schemas']['GroupMemberViewModelFull'][];
            'application/xml': components['schemas']['GroupMemberViewModelFull'][];
            'text/xml': components['schemas']['GroupMemberViewModelFull'][];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Groups/Member': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** @deprecated */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['GroupMemberViewModel'];
          'application/json': components['schemas']['GroupMemberViewModel'];
          'text/json': components['schemas']['GroupMemberViewModel'];
          'application/*+json': components['schemas']['GroupMemberViewModel'];
          'application/xml': components['schemas']['GroupMemberViewModel'];
          'text/xml': components['schemas']['GroupMemberViewModel'];
          'application/*+xml': components['schemas']['GroupMemberViewModel'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Groups/{groupID}/members/{userID}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Endpoint to set/unset specified user as admin of the specified group */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          groupID: number;
          userID: number;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['SetGroupAdminBindingModel'];
          'application/json': components['schemas']['SetGroupAdminBindingModel'];
          'text/json': components['schemas']['SetGroupAdminBindingModel'];
          'application/*+json': components['schemas']['SetGroupAdminBindingModel'];
          'application/xml': components['schemas']['SetGroupAdminBindingModel'];
          'text/xml': components['schemas']['SetGroupAdminBindingModel'];
          'application/*+xml': components['schemas']['SetGroupAdminBindingModel'];
        };
      };
      responses: {
        /** @description Returns nothing */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    /** Endpoint to remove specified user from the specified group */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          groupID: number;
          userID: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns view model */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['UserAndGroupViewModel'];
            'application/json': components['schemas']['UserAndGroupViewModel'];
            'text/json': components['schemas']['UserAndGroupViewModel'];
            'application/xml': components['schemas']['UserAndGroupViewModel'];
            'text/xml': components['schemas']['UserAndGroupViewModel'];
          };
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Groups/Register': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Endpoint to create new group */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['GroupBindingModel'];
          'application/json': components['schemas']['GroupBindingModel'];
          'text/json': components['schemas']['GroupBindingModel'];
          'application/*+json': components['schemas']['GroupBindingModel'];
          'application/xml': components['schemas']['GroupBindingModel'];
          'text/xml': components['schemas']['GroupBindingModel'];
          'application/*+xml': components['schemas']['GroupBindingModel'];
        };
      };
      responses: {
        /** @description Returns view model of newly created group */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['GroupViewModel'];
            'application/json': components['schemas']['GroupViewModel'];
            'text/json': components['schemas']['GroupViewModel'];
            'application/xml': components['schemas']['GroupViewModel'];
            'text/xml': components['schemas']['GroupViewModel'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Groups/{id}/editgroup': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Endpoint to edit the specified group */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description group id */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['GroupBindingModel'];
          'application/json': components['schemas']['GroupBindingModel'];
          'text/json': components['schemas']['GroupBindingModel'];
          'application/*+json': components['schemas']['GroupBindingModel'];
          'application/xml': components['schemas']['GroupBindingModel'];
          'text/xml': components['schemas']['GroupBindingModel'];
          'application/*+xml': components['schemas']['GroupBindingModel'];
        };
      };
      responses: {
        /** @description Returns view model of the edited group */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['GroupViewModelExtended'];
            'application/json': components['schemas']['GroupViewModelExtended'];
            'text/json': components['schemas']['GroupViewModelExtended'];
            'application/xml': components['schemas']['GroupViewModelExtended'];
            'text/xml': components['schemas']['GroupViewModelExtended'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Groups/{id}/editgroupname': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** @deprecated */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: number;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['GroupBindingChangeNameModel'];
          'application/json': components['schemas']['GroupBindingChangeNameModel'];
          'text/json': components['schemas']['GroupBindingChangeNameModel'];
          'application/*+json': components['schemas']['GroupBindingChangeNameModel'];
          'application/xml': components['schemas']['GroupBindingChangeNameModel'];
          'text/xml': components['schemas']['GroupBindingChangeNameModel'];
          'application/*+xml': components['schemas']['GroupBindingChangeNameModel'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Groups/{id}/delete': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** Endpoint to delete the specified group */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description group id */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns nothing */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Groups': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** Endpoint to delete the specified groups */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description group ids */
      requestBody?: {
        content: {
          'application/json-patch+json': number[];
          'application/json': number[];
          'text/json': number[];
          'application/*+json': number[];
          'application/xml': number[];
          'text/xml': number[];
          'application/*+xml': number[];
        };
      };
      responses: {
        /** @description Returns nothing */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Groups/{id}/restore': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Endpoint to restore the specified deleted group (the group must be deleted within last 24h, if since group delete operation more than 24h passed, its impossible to restore it) */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description group id */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns nothing */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Groups/{id}/details': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Endpoint to get the specified groups details */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description group id */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns view model containing the specified groups details */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['GroupViewModelExtended'];
            'application/json': components['schemas']['GroupViewModelExtended'];
            'text/json': components['schemas']['GroupViewModelExtended'];
            'application/xml': components['schemas']['GroupViewModelExtended'];
            'text/xml': components['schemas']['GroupViewModelExtended'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Groups/{id}/addMember': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Endpoint to add the specified user to the specified group. Either userId or userEmail required.
     * @description Parameters: "Id" - user id (optional), "Email" - user email (optional), "admin" - in case true, set user as admin member in the group
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description group id */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['GroupAddMemberModel'];
          'application/json': components['schemas']['GroupAddMemberModel'];
          'text/json': components['schemas']['GroupAddMemberModel'];
          'application/*+json': components['schemas']['GroupAddMemberModel'];
          'application/xml': components['schemas']['GroupAddMemberModel'];
          'text/xml': components['schemas']['GroupAddMemberModel'];
          'application/*+xml': components['schemas']['GroupAddMemberModel'];
        };
      };
      responses: {
        /** @description Returns view model containing the specified user and group details */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['UserAndGroupViewModel'];
            'application/json': components['schemas']['UserAndGroupViewModel'];
            'text/json': components['schemas']['UserAndGroupViewModel'];
            'application/xml': components['schemas']['UserAndGroupViewModel'];
            'text/xml': components['schemas']['UserAndGroupViewModel'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Groups/addMembers': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Endpoint to add the specified users to the specified groups. Either userId or userEmail required.
     * @description Parameters: "GroupId" - group id, "Id" - user id (optional), "Email" - user email (optional), "admin" - in case true, set user as admin member in the group
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['GroupAddMemberModel'][];
          'application/json': components['schemas']['GroupAddMemberModel'][];
          'text/json': components['schemas']['GroupAddMemberModel'][];
          'application/*+json': components['schemas']['GroupAddMemberModel'][];
          'application/xml': components['schemas']['GroupAddMemberModel'][];
          'text/xml': components['schemas']['GroupAddMemberModel'][];
          'application/*+xml': components['schemas']['GroupAddMemberModel'][];
        };
      };
      responses: {
        /** @description Returns view model containing the specified user and group details */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['UserAndGroupViewModel'];
            'application/json': components['schemas']['UserAndGroupViewModel'];
            'text/json': components['schemas']['UserAndGroupViewModel'];
            'application/xml': components['schemas']['UserAndGroupViewModel'];
            'text/xml': components['schemas']['UserAndGroupViewModel'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Groups/{id}/copy': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Endpoint to create copy of the specified group */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description group id */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns view model of new copied group */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['GroupViewModelExtended'];
            'application/json': components['schemas']['GroupViewModelExtended'];
            'text/json': components['schemas']['GroupViewModelExtended'];
            'application/xml': components['schemas']['GroupViewModelExtended'];
            'text/xml': components['schemas']['GroupViewModelExtended'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Groups/copy': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Endpoint to copy the specified groups */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['CopyGroupsBindingModel'];
          'application/json': components['schemas']['CopyGroupsBindingModel'];
          'text/json': components['schemas']['CopyGroupsBindingModel'];
          'application/*+json': components['schemas']['CopyGroupsBindingModel'];
          'application/xml': components['schemas']['CopyGroupsBindingModel'];
          'text/xml': components['schemas']['CopyGroupsBindingModel'];
          'application/*+xml': components['schemas']['CopyGroupsBindingModel'];
        };
      };
      responses: {
        /** @description Returns view model containing number of groups copied and not found */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['GroupCopyViewModel'];
            'application/json': components['schemas']['GroupCopyViewModel'];
            'text/json': components['schemas']['GroupCopyViewModel'];
            'application/xml': components['schemas']['GroupCopyViewModel'];
            'text/xml': components['schemas']['GroupCopyViewModel'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Groups/{id}/activate': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Endpoint to activate/deactivate the specified group */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description group id */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['ActivateGroupBindingModel'];
          'application/json': components['schemas']['ActivateGroupBindingModel'];
          'text/json': components['schemas']['ActivateGroupBindingModel'];
          'application/*+json': components['schemas']['ActivateGroupBindingModel'];
          'application/xml': components['schemas']['ActivateGroupBindingModel'];
          'text/xml': components['schemas']['ActivateGroupBindingModel'];
          'application/*+xml': components['schemas']['ActivateGroupBindingModel'];
        };
      };
      responses: {
        /** @description Returns view model of the group */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['GroupViewModelExtended'];
            'application/json': components['schemas']['GroupViewModelExtended'];
            'text/json': components['schemas']['GroupViewModelExtended'];
            'application/xml': components['schemas']['GroupViewModelExtended'];
            'text/xml': components['schemas']['GroupViewModelExtended'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Groups/{id}/codes': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Endpoint to export the referral codes data (code, total uses, remaining uses, active or not) of the specified group into excel file */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description group id */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns excel file */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': string;
            'application/json': string;
            'text/json': string;
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Groups/{id}/regeneratecodes': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Endpoint to deactivate existing referral codes of the specified group and regenerate new ones */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description group id */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns nothing */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Users/accounts': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Endpoint to get users list in admin panel, users only from managed organizations are returned (except SuperAdmin user which has full access to all users) */
    get: {
      parameters: {
        query?: {
          /** @description Possible values: ("name", "nameDesc" - order by display name, "roles", "rolesDesc" - order by number of roles users have, "email", "emailDesc" - order by users email address, "created", "createdDesc" - order by users created date, "lastVisit", "lastVisitDesc" - order by users last visit, "groups", "groupsDesc" - order by group membership count of user, "messages", "messagesDesc" - order by int User.MessagesSentCount field, "inviteStatus", "inviteStatusDesc" - sorting users by some weird logic, based on sending registration email and token expiration, "organizationName", "organizationNameDesc" - sorting users by organization name ,
           *                 "device" or "devices", "deviceDesc" or "devicesDesc" - order by number of devices users have, "administrators", "administratorsDesc" - order by the number of organizations where user is manager, "alarm", "alarmDesc" - sorts users by their last alarm test success status. Users without any alarm test should be in the end of the list, "organizations", "organizationsDesc" - order by number of organizations where user is member) */
          sort?: string;
          /** @description filter out user by email or display name in case insensitive manner */
          search?: string;
          /** @description skip the specified number of users */
          skip?: number;
          /** @description take the specified number of users */
          limit?: number;
          /** @description return users from the specified organization(s) */
          organization?: number[];
          /** @description in case true, return only users that have not received email yet */
          unsentOnly?: boolean;
          /** @description in case true, return users who never logged in, last access value is null */
          neverLoggedIn?: boolean;
          /** @description in case true, return also deleted users */
          showDeleted?: boolean;
          /** @description in case is not null, return users with the specified invite status */
          inviteStatus?: components['schemas']['UserInviteStatus'][];
          /** @description user in pair with "organization" parameter, in case true users from suborganizations are included in the list */
          includeSuborgs?: boolean;
          /** @description filter out users by menuItem of their organization */
          menuItem?: string;
          /** @description in case is not null, filter out users by organization manager status */
          isOrgManager?: boolean;
          /** @description in case is not null, filter out users by creation method */
          creationMethod?: components['schemas']['UserCreationMethod'][];
          /** @description in case is not null, filter out users by last active date */
          lastActive?: components['schemas']['UserLastActiveStatus'][];
          /** @description in case is not null, filter out users by alarm test status */
          alarmTest?: components['schemas']['UserAlarmTestStatus'][];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns view model containing all users and total count of users */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['UsersAccountViewModel'];
            'application/json': components['schemas']['UsersAccountViewModel'];
            'text/json': components['schemas']['UsersAccountViewModel'];
            'application/xml': components['schemas']['UsersAccountViewModel'];
            'text/xml': components['schemas']['UsersAccountViewModel'];
          };
        };
      };
    };
    put?: never;
    /** Endpoint to get users list in admin panel, users only from managed organizations are returned (except SuperAdmin user which has full access to all users) */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description filter out user, see parameter descriptions GET /api/admin/users/accounts */
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['GetAdminUsersAccountBindingModel'];
          'application/json': components['schemas']['GetAdminUsersAccountBindingModel'];
          'text/json': components['schemas']['GetAdminUsersAccountBindingModel'];
          'application/*+json': components['schemas']['GetAdminUsersAccountBindingModel'];
          'application/xml': components['schemas']['GetAdminUsersAccountBindingModel'];
          'text/xml': components['schemas']['GetAdminUsersAccountBindingModel'];
          'application/*+xml': components['schemas']['GetAdminUsersAccountBindingModel'];
        };
      };
      responses: {
        /** @description Returns view model containing all users and total count of users */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['UsersAccountViewModel'];
            'application/json': components['schemas']['UsersAccountViewModel'];
            'text/json': components['schemas']['UsersAccountViewModel'];
            'application/xml': components['schemas']['UsersAccountViewModel'];
            'text/xml': components['schemas']['UsersAccountViewModel'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Users/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get details of the specified users */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description user id */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns user view model */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['UserMemberViewModel'];
            'application/json': components['schemas']['UserMemberViewModel'];
            'text/json': components['schemas']['UserMemberViewModel'];
            'application/xml': components['schemas']['UserMemberViewModel'];
            'text/xml': components['schemas']['UserMemberViewModel'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/sendregistrationemails': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Endpoint to send registration emails to users
     * @description SuperAdmins must pass userId/s. In case userId/s not specified, users are from managed organizations
     *                Parameters: "Ids" - user Ids, "ResendExpired" - in case true, resend email to users with expired registration token??? (inside controller its vice versa indeed)
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['SendRegistrationEmailModel'];
          'application/json': components['schemas']['SendRegistrationEmailModel'];
          'text/json': components['schemas']['SendRegistrationEmailModel'];
          'application/*+json': components['schemas']['SendRegistrationEmailModel'];
          'application/xml': components['schemas']['SendRegistrationEmailModel'];
          'text/xml': components['schemas']['SendRegistrationEmailModel'];
          'application/*+xml': components['schemas']['SendRegistrationEmailModel'];
        };
      };
      responses: {
        /** @description Returns nothing */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/sendreminders': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** @deprecated */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['ReminderEmailBindingModel'];
          'application/json': components['schemas']['ReminderEmailBindingModel'];
          'text/json': components['schemas']['ReminderEmailBindingModel'];
          'application/*+json': components['schemas']['ReminderEmailBindingModel'];
          'application/xml': components['schemas']['ReminderEmailBindingModel'];
          'text/xml': components['schemas']['ReminderEmailBindingModel'];
          'application/*+xml': components['schemas']['ReminderEmailBindingModel'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/municipalitys': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @deprecated */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/roles': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @deprecated */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/allroles': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** User gets own roles using this endpoint */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns user role view models */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['UserRoleViewModel'];
            'application/json': components['schemas']['UserRoleViewModel'];
            'text/json': components['schemas']['UserRoleViewModel'];
            'application/xml': components['schemas']['UserRoleViewModel'];
            'text/xml': components['schemas']['UserRoleViewModel'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/{id}/userGroups': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Endpoint to return groups where the specified user is member */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description user id */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns group view models */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['GroupViewModel'];
            'application/json': components['schemas']['GroupViewModel'];
            'text/json': components['schemas']['GroupViewModel'];
            'application/xml': components['schemas']['GroupViewModel'];
            'text/xml': components['schemas']['GroupViewModel'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Users/Register': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Endpoint to register new user */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['UserBindingModel'];
          'application/json': components['schemas']['UserBindingModel'];
          'text/json': components['schemas']['UserBindingModel'];
          'application/*+json': components['schemas']['UserBindingModel'];
          'application/xml': components['schemas']['UserBindingModel'];
          'text/xml': components['schemas']['UserBindingModel'];
          'application/*+xml': components['schemas']['UserBindingModel'];
        };
      };
      responses: {
        /** @description Returns created users view model */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['UserViewModelExtended'];
            'application/json': components['schemas']['UserViewModelExtended'];
            'text/json': components['schemas']['UserViewModelExtended'];
            'application/xml': components['schemas']['UserViewModelExtended'];
            'text/xml': components['schemas']['UserViewModelExtended'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Users/Register-users': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Endpoint to register up to 100 new users */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['UserBindingModel'][];
          'application/json': components['schemas']['UserBindingModel'][];
          'text/json': components['schemas']['UserBindingModel'][];
          'application/*+json': components['schemas']['UserBindingModel'][];
          'application/xml': components['schemas']['UserBindingModel'][];
          'text/xml': components['schemas']['UserBindingModel'][];
          'application/*+xml': components['schemas']['UserBindingModel'][];
        };
      };
      responses: {
        /** @description Returns nothing */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Users/{id}/manageroles': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /** Allows to manage multiple roles for the single user */
    patch: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description User id */
          id: number;
        };
        cookie?: never;
      };
      /** @description List of roles */
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['RoleStatus'][];
          'application/json': components['schemas']['RoleStatus'][];
          'text/json': components['schemas']['RoleStatus'][];
          'application/*+json': components['schemas']['RoleStatus'][];
          'application/xml': components['schemas']['RoleStatus'][];
          'text/xml': components['schemas']['RoleStatus'][];
          'application/*+xml': components['schemas']['RoleStatus'][];
        };
      };
      responses: {
        /** @description Returns view model containing userId and roles */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['UserRolesStatuses'];
            'application/json': components['schemas']['UserRolesStatuses'];
            'text/json': components['schemas']['UserRolesStatuses'];
            'application/xml': components['schemas']['UserRolesStatuses'];
            'text/xml': components['schemas']['UserRolesStatuses'];
          };
        };
      };
    };
    trace?: never;
  };
  '/api/Admin/Users/manageroles': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /** Allows to manage multiple roles for the multiple users */
    patch: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description List of users roles data */
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['UserRolesStatuses'][];
          'application/json': components['schemas']['UserRolesStatuses'][];
          'text/json': components['schemas']['UserRolesStatuses'][];
          'application/*+json': components['schemas']['UserRolesStatuses'][];
          'application/xml': components['schemas']['UserRolesStatuses'][];
          'text/xml': components['schemas']['UserRolesStatuses'][];
          'application/*+xml': components['schemas']['UserRolesStatuses'][];
        };
      };
      responses: {
        /** @description Returns nothing */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    trace?: never;
  };
  '/api/Admin/Users/{id}/manageUserGroups': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /** Endpoint to add/remove specified user from group/s */
    patch: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description user id */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['GroupStatus'][];
          'application/json': components['schemas']['GroupStatus'][];
          'text/json': components['schemas']['GroupStatus'][];
          'application/*+json': components['schemas']['GroupStatus'][];
          'application/xml': components['schemas']['GroupStatus'][];
          'text/xml': components['schemas']['GroupStatus'][];
          'application/*+xml': components['schemas']['GroupStatus'][];
        };
      };
      responses: {
        /** @description Returns view model with summary of results */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ManageUserGroupsViewModel'];
            'application/json': components['schemas']['ManageUserGroupsViewModel'];
            'text/json': components['schemas']['ManageUserGroupsViewModel'];
            'application/xml': components['schemas']['ManageUserGroupsViewModel'];
            'text/xml': components['schemas']['ManageUserGroupsViewModel'];
          };
        };
      };
    };
    trace?: never;
  };
  '/api/Admin/Users/manageUserGroups': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /** Endpoint to add/remove specified user from group/s */
    patch: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['ManageUserGroupsBindingModel'][];
          'application/json': components['schemas']['ManageUserGroupsBindingModel'][];
          'text/json': components['schemas']['ManageUserGroupsBindingModel'][];
          'application/*+json': components['schemas']['ManageUserGroupsBindingModel'][];
          'application/xml': components['schemas']['ManageUserGroupsBindingModel'][];
          'text/xml': components['schemas']['ManageUserGroupsBindingModel'][];
          'application/*+xml': components['schemas']['ManageUserGroupsBindingModel'][];
        };
      };
      responses: {
        /** @description Returns view model with summary of results */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ManageUserGroupsViewModel'];
            'application/json': components['schemas']['ManageUserGroupsViewModel'];
            'text/json': components['schemas']['ManageUserGroupsViewModel'];
            'application/xml': components['schemas']['ManageUserGroupsViewModel'];
            'text/xml': components['schemas']['ManageUserGroupsViewModel'];
          };
        };
      };
    };
    trace?: never;
  };
  '/api/Admin/Users/{id}/OrganizationMemberships': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** This endpoint is used to retrieve the list of organization memberships that a user is a member of.
     *     It first verifies if the authenticated user has access to the target user's information.
     *     If the user is not found or is not accessible, it returns a Not Found error. */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The ID of the user whose organization memberships are being queried. */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['OrganizationMemberViewModel'][];
            'application/json': components['schemas']['OrganizationMemberViewModel'][];
            'text/json': components['schemas']['OrganizationMemberViewModel'][];
            'application/xml': components['schemas']['OrganizationMemberViewModel'][];
            'text/xml': components['schemas']['OrganizationMemberViewModel'][];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Users/{id}/edit': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Endpoint to edit the specified user */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description user id */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['UserBindingModel'];
          'application/json': components['schemas']['UserBindingModel'];
          'text/json': components['schemas']['UserBindingModel'];
          'application/*+json': components['schemas']['UserBindingModel'];
          'application/xml': components['schemas']['UserBindingModel'];
          'text/xml': components['schemas']['UserBindingModel'];
          'application/*+xml': components['schemas']['UserBindingModel'];
        };
      };
      responses: {
        /** @description Returns specified user view model */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['UserMemberViewModel'];
            'application/json': components['schemas']['UserMemberViewModel'];
            'text/json': components['schemas']['UserMemberViewModel'];
            'application/xml': components['schemas']['UserMemberViewModel'];
            'text/xml': components['schemas']['UserMemberViewModel'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Users/{id}/changePassword': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Endpoint to change password of the specified user */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description user id */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['UserPasswordBindingModel'];
          'application/json': components['schemas']['UserPasswordBindingModel'];
          'text/json': components['schemas']['UserPasswordBindingModel'];
          'application/*+json': components['schemas']['UserPasswordBindingModel'];
          'application/xml': components['schemas']['UserPasswordBindingModel'];
          'text/xml': components['schemas']['UserPasswordBindingModel'];
          'application/*+xml': components['schemas']['UserPasswordBindingModel'];
        };
      };
      responses: {
        /** @description Returns nothing */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Users/{id}/delete': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** Endpoint to delete the specified user */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description user id */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['AccountDeleteBindingModel'];
          'application/json': components['schemas']['AccountDeleteBindingModel'];
          'text/json': components['schemas']['AccountDeleteBindingModel'];
          'application/*+json': components['schemas']['AccountDeleteBindingModel'];
          'application/xml': components['schemas']['AccountDeleteBindingModel'];
          'text/xml': components['schemas']['AccountDeleteBindingModel'];
          'application/*+xml': components['schemas']['AccountDeleteBindingModel'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Users/{id}/deleteFully': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** Endpoint to delete the specified user */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description user id */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['AccountDeleteBindingModel'];
          'application/json': components['schemas']['AccountDeleteBindingModel'];
          'text/json': components['schemas']['AccountDeleteBindingModel'];
          'application/*+json': components['schemas']['AccountDeleteBindingModel'];
          'application/xml': components['schemas']['AccountDeleteBindingModel'];
          'text/xml': components['schemas']['AccountDeleteBindingModel'];
          'application/*+xml': components['schemas']['AccountDeleteBindingModel'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Users/{id}/deleteNotReally': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** Endpoint to delete the specified user */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description user id */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['AccountDeleteBindingModel'];
          'application/json': components['schemas']['AccountDeleteBindingModel'];
          'text/json': components['schemas']['AccountDeleteBindingModel'];
          'application/*+json': components['schemas']['AccountDeleteBindingModel'];
          'application/xml': components['schemas']['AccountDeleteBindingModel'];
          'text/xml': components['schemas']['AccountDeleteBindingModel'];
          'application/*+xml': components['schemas']['AccountDeleteBindingModel'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Users/delete': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** Endpoint to delete the specified users */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['AccountDeleteBindingModel'][];
          'application/json': components['schemas']['AccountDeleteBindingModel'][];
          'text/json': components['schemas']['AccountDeleteBindingModel'][];
          'application/*+json': components['schemas']['AccountDeleteBindingModel'][];
          'application/xml': components['schemas']['AccountDeleteBindingModel'][];
          'text/xml': components['schemas']['AccountDeleteBindingModel'][];
          'application/*+xml': components['schemas']['AccountDeleteBindingModel'][];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Users/deleteFully': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** Endpoint to delete the specified users */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['AccountDeleteBindingModel'][];
          'application/json': components['schemas']['AccountDeleteBindingModel'][];
          'text/json': components['schemas']['AccountDeleteBindingModel'][];
          'application/*+json': components['schemas']['AccountDeleteBindingModel'][];
          'application/xml': components['schemas']['AccountDeleteBindingModel'][];
          'text/xml': components['schemas']['AccountDeleteBindingModel'][];
          'application/*+xml': components['schemas']['AccountDeleteBindingModel'][];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Users/deleteNotReally': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** Endpoint to delete the specified users */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['AccountDeleteBindingModel'][];
          'application/json': components['schemas']['AccountDeleteBindingModel'][];
          'text/json': components['schemas']['AccountDeleteBindingModel'][];
          'application/*+json': components['schemas']['AccountDeleteBindingModel'][];
          'application/xml': components['schemas']['AccountDeleteBindingModel'][];
          'text/xml': components['schemas']['AccountDeleteBindingModel'][];
          'application/*+xml': components['schemas']['AccountDeleteBindingModel'][];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Users/{id}/UserTokens': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Endpoint to get the specified user's devices/tokens */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description user id */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns device view models */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['DeviceViewModel'][];
            'application/json': components['schemas']['DeviceViewModel'][];
            'text/json': components['schemas']['DeviceViewModel'][];
            'application/xml': components['schemas']['DeviceViewModel'][];
            'text/xml': components['schemas']['DeviceViewModel'][];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Users/Inform': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Endpoint to inform specified users via email */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['InformUsersBindingModel'];
          'application/json': components['schemas']['InformUsersBindingModel'];
          'text/json': components['schemas']['InformUsersBindingModel'];
          'application/*+json': components['schemas']['InformUsersBindingModel'];
          'application/xml': components['schemas']['InformUsersBindingModel'];
          'text/xml': components['schemas']['InformUsersBindingModel'];
          'application/*+xml': components['schemas']['InformUsersBindingModel'];
        };
      };
      responses: {
        /** @description Returns nothing */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Users/{id}/GetAlarmTests': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Endpoint to get alarm tests initiated by the specified user */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description user id */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns alarm test view models */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['AlarmTestViewModel'][];
            'application/json': components['schemas']['AlarmTestViewModel'][];
            'text/json': components['schemas']['AlarmTestViewModel'][];
            'application/xml': components['schemas']['AlarmTestViewModel'][];
            'text/xml': components['schemas']['AlarmTestViewModel'][];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Users/ForceLogOut': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Endpoint to delete specified authorization token */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['AuthTokenDisposeRequest'];
          'application/json': components['schemas']['AuthTokenDisposeRequest'];
          'text/json': components['schemas']['AuthTokenDisposeRequest'];
          'application/*+json': components['schemas']['AuthTokenDisposeRequest'];
          'application/xml': components['schemas']['AuthTokenDisposeRequest'];
          'text/xml': components['schemas']['AuthTokenDisposeRequest'];
          'application/*+xml': components['schemas']['AuthTokenDisposeRequest'];
        };
      };
      responses: {
        /** @description Returns nothing */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Users/ForceLogOutUsers': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Endpoint to delete authorization tokens of the specified users */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['DisposeAuthTokenForUsersBindingModel'];
          'application/json': components['schemas']['DisposeAuthTokenForUsersBindingModel'];
          'text/json': components['schemas']['DisposeAuthTokenForUsersBindingModel'];
          'application/*+json': components['schemas']['DisposeAuthTokenForUsersBindingModel'];
          'application/xml': components['schemas']['DisposeAuthTokenForUsersBindingModel'];
          'text/xml': components['schemas']['DisposeAuthTokenForUsersBindingModel'];
          'application/*+xml': components['schemas']['DisposeAuthTokenForUsersBindingModel'];
        };
      };
      responses: {
        /** @description Returns nothing */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Language': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** User can edit own preferred language for admin panel. */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['SetPreferredLanguageBindingModel'];
          'application/json': components['schemas']['SetPreferredLanguageBindingModel'];
          'text/json': components['schemas']['SetPreferredLanguageBindingModel'];
          'application/*+json': components['schemas']['SetPreferredLanguageBindingModel'];
          'application/xml': components['schemas']['SetPreferredLanguageBindingModel'];
          'text/xml': components['schemas']['SetPreferredLanguageBindingModel'];
          'application/*+xml': components['schemas']['SetPreferredLanguageBindingModel'];
        };
      };
      responses: {
        /** @description It returns nothing. Just indicates request worked successfully. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Organizations/All': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get organizations list in admin panel */
    get: {
      parameters: {
        query?: {
          /** @description The search keyword to filter organizations by name or accountId (optional). */
          search?: string;
          /** @description in case true return only parent organizations (optional) */
          onlyOrganizations?: boolean;
          /** @description in case true return only suborganizations (optional) */
          onlySuborganizations?: boolean;
          /** @description return suborganizations of the specified parent organization (optional) */
          parentId?: number;
          /** @description The minimum number of users an organization should have (optional). */
          minUsers?: number;
          /** @description The maximum number of users an organization should have (optional). */
          maxUsers?: number;
          /** @description in case true include suborganizations also in the list (optional) */
          includeNested?: boolean;
          /** @description this parameter works only if the user making request is manager in parent organization. In case true return only organizations where user is manager, in case false return only organizations where user is
           *                 typical member, not admin, in case not specified return organizations where user is any type of member, admin or typical user does not matter (optional) */
          isManager?: boolean;
          /** @description in case specified return only organizations where the specified menuitem is enabled (optional) */
          menuItem?: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns organization view models */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['OrganizationViewModel'][];
            'application/json': components['schemas']['OrganizationViewModel'][];
            'text/json': components['schemas']['OrganizationViewModel'][];
            'application/xml': components['schemas']['OrganizationViewModel'][];
            'text/xml': components['schemas']['OrganizationViewModel'][];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Organizations/List': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Endpoint to get organizations list in admin panel, exactly the same logic as in GET api/admin/organizations/all
     *     Difference only in returned view models, this endpoint returns organization view models with less info. */
    get: {
      parameters: {
        query?: {
          onlyOrganizations?: boolean;
          onlySuborganizations?: boolean;
          organizationId?: number;
          parentId?: number;
          includeNested?: boolean;
          isManager?: boolean;
          menuItem?: string;
          calculateNumberOfUsersRemaining?: boolean;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns organization view models */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['OrganizationViewModelShortest'][];
            'application/json': components['schemas']['OrganizationViewModelShortest'][];
            'text/json': components['schemas']['OrganizationViewModelShortest'][];
            'application/xml': components['schemas']['OrganizationViewModelShortest'][];
            'text/xml': components['schemas']['OrganizationViewModelShortest'][];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Organizations/{id}/AddUsers': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** This endpoint is used to add users to an organization.
     *     It first checks if the user making the request has the authority to manage the organization.
     *     Then, it verifies if the provided user IDs are valid and accessible.
     *     Otherwise, it adds the specified users to the organization and returns an Ok response. */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The ID of the organization. */
          id: number;
        };
        cookie?: never;
      };
      /** @description An array of user IDs to be added to the organization. */
      requestBody?: {
        content: {
          'application/json-patch+json': number[];
          'application/json': number[];
          'text/json': number[];
          'application/*+json': number[];
          'application/xml': number[];
          'text/xml': number[];
          'application/*+xml': number[];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Organizations/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Endpoint to get the specified organization */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description organization id */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns organization view model */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['OrganizationViewModel'];
            'application/json': components['schemas']['OrganizationViewModel'];
            'text/json': components['schemas']['OrganizationViewModel'];
            'application/xml': components['schemas']['OrganizationViewModel'];
            'text/xml': components['schemas']['OrganizationViewModel'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/organizations/{id}/sso': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** This endpoint is used to edit the single sign-on (SSO) settings for an organization.
     *     It checks if the user making the request has the authority to ManageIntegrations the organization.
     *     If the organization is not found or not accessible, it returns an appropriate error response.
     *     Otherwise, it updates the SSO settings for the organization and returns an Ok response. */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The ID of the organization */
          id: number;
        };
        cookie?: never;
      };
      /** @description The SSO settings to be edited */
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['OrganizationSsoSettingsBindingModel'];
          'application/json': components['schemas']['OrganizationSsoSettingsBindingModel'];
          'text/json': components['schemas']['OrganizationSsoSettingsBindingModel'];
          'application/*+json': components['schemas']['OrganizationSsoSettingsBindingModel'];
          'application/xml': components['schemas']['OrganizationSsoSettingsBindingModel'];
          'text/xml': components['schemas']['OrganizationSsoSettingsBindingModel'];
          'application/*+xml': components['schemas']['OrganizationSsoSettingsBindingModel'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Organizations/Create': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** The endpoint creates a new organization.
     *     The method checks if the received data is valid and if the SSO properties are allowed only for the main organization.
     *     It then stores the new organization in the database with the provided data
     *     and returns an OrganizationViewModel object as a response. */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['OrganizationBindingModel'];
          'application/json': components['schemas']['OrganizationBindingModel'];
          'text/json': components['schemas']['OrganizationBindingModel'];
          'application/*+json': components['schemas']['OrganizationBindingModel'];
          'application/xml': components['schemas']['OrganizationBindingModel'];
          'text/xml': components['schemas']['OrganizationBindingModel'];
          'application/*+xml': components['schemas']['OrganizationBindingModel'];
        };
      };
      responses: {
        /** @description Returns newly created organiaztion's view model */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['OrganizationViewModel'];
            'application/json': components['schemas']['OrganizationViewModel'];
            'text/json': components['schemas']['OrganizationViewModel'];
            'application/xml': components['schemas']['OrganizationViewModel'];
            'text/xml': components['schemas']['OrganizationViewModel'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Organizations/{id}/Edit': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** The endpoint in is used to update an existing organization's properties.
     *     It takes in the id of the organization to be edited and a data object containing the updated properties.
     *     If the model state is not valid, it returns a bad request.
     *     If the user does not have permission to manage the organization, it returns an unauthorized access status code.
     *     If the data object contains SSO properties, it checks if it is the main organization and if the required SSO properties are present.
     *     The endpoint returns a success status code if the organization is updated successfully. */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: number;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['OrganizationBindingModel'];
          'application/json': components['schemas']['OrganizationBindingModel'];
          'text/json': components['schemas']['OrganizationBindingModel'];
          'application/*+json': components['schemas']['OrganizationBindingModel'];
          'application/xml': components['schemas']['OrganizationBindingModel'];
          'text/xml': components['schemas']['OrganizationBindingModel'];
          'application/*+xml': components['schemas']['OrganizationBindingModel'];
        };
      };
      responses: {
        /** @description Returns edited organization's view model */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['OrganizationViewModel'];
            'application/json': components['schemas']['OrganizationViewModel'];
            'text/json': components['schemas']['OrganizationViewModel'];
            'application/xml': components['schemas']['OrganizationViewModel'];
            'text/xml': components['schemas']['OrganizationViewModel'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Organizations/{id}/Delete': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** Endpoint to delete the specified organization */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description organization id */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns nothing */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Organizations/{id}/AssignMenuItem': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Endpoint to assign specified menu items in the specified organization
     *     <remarks>menuitems must be enabled in the specified organization already</remarks> */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description organization id */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['AssignMenuItemBindingModel'][];
          'application/json': components['schemas']['AssignMenuItemBindingModel'][];
          'text/json': components['schemas']['AssignMenuItemBindingModel'][];
          'application/*+json': components['schemas']['AssignMenuItemBindingModel'][];
          'application/xml': components['schemas']['AssignMenuItemBindingModel'][];
          'text/xml': components['schemas']['AssignMenuItemBindingModel'][];
          'application/*+xml': components['schemas']['AssignMenuItemBindingModel'][];
        };
      };
      responses: {
        /** @description Returns nothing */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Organizations/{id}/EnableMenuItem': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Endpoint to enable/disable specified menuitem for the specified organization */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description organization id */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['EnableMenuItemBindingModel'];
          'application/json': components['schemas']['EnableMenuItemBindingModel'];
          'text/json': components['schemas']['EnableMenuItemBindingModel'];
          'application/*+json': components['schemas']['EnableMenuItemBindingModel'];
          'application/xml': components['schemas']['EnableMenuItemBindingModel'];
          'text/xml': components['schemas']['EnableMenuItemBindingModel'];
          'application/*+xml': components['schemas']['EnableMenuItemBindingModel'];
        };
      };
      responses: {
        /** @description Returns nothing */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Organizations/{id}/EnableMenuItems': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Endpoint to endable/disable specified menuitems in the specified organization */
    post: {
      parameters: {
        query?: {
          /** @description A flag indicating whether to update user menus after enabling or disabling the menu items. */
          updateUserMenus?: boolean;
        };
        header?: never;
        path: {
          /** @description organization id */
          id: number;
        };
        cookie?: never;
      };
      /** @description An array of EnableMenuItemBindingModel objects containing information about which menu items to enable or disable. */
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['EnableMenuItemBindingModel'][];
          'application/json': components['schemas']['EnableMenuItemBindingModel'][];
          'text/json': components['schemas']['EnableMenuItemBindingModel'][];
          'application/*+json': components['schemas']['EnableMenuItemBindingModel'][];
          'application/xml': components['schemas']['EnableMenuItemBindingModel'][];
          'text/xml': components['schemas']['EnableMenuItemBindingModel'][];
          'application/*+xml': components['schemas']['EnableMenuItemBindingModel'][];
        };
      };
      responses: {
        /** @description Returns nothing */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Organizations/{id}/EmergencyTypes': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get emergency types of the specified organization */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description organization id */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns emergency type view models */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['EmergencyTypeViewModel'][];
            'application/json': components['schemas']['EmergencyTypeViewModel'][];
            'text/json': components['schemas']['EmergencyTypeViewModel'][];
            'application/xml': components['schemas']['EmergencyTypeViewModel'][];
            'text/xml': components['schemas']['EmergencyTypeViewModel'][];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Organizations/{id}/ReorderEmergencyTypes': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Endpoint to reorder emergency type/s of the specified organization */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description organization id */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['ReorderEmergencyTypeBindingModel'][];
          'application/json': components['schemas']['ReorderEmergencyTypeBindingModel'][];
          'text/json': components['schemas']['ReorderEmergencyTypeBindingModel'][];
          'application/*+json': components['schemas']['ReorderEmergencyTypeBindingModel'][];
          'application/xml': components['schemas']['ReorderEmergencyTypeBindingModel'][];
          'text/xml': components['schemas']['ReorderEmergencyTypeBindingModel'][];
          'application/*+xml': components['schemas']['ReorderEmergencyTypeBindingModel'][];
        };
      };
      responses: {
        /** @description Returns nothing */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Organizations/{id}/MenuItems': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get menu items of the specified organization */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description organization id */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns menu item view models */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['MenuItemViewModel'][];
            'application/json': components['schemas']['MenuItemViewModel'][];
            'text/json': components['schemas']['MenuItemViewModel'][];
            'application/xml': components['schemas']['MenuItemViewModel'][];
            'text/xml': components['schemas']['MenuItemViewModel'][];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/EmergencyTypeIcons': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Returns the icons of emergency types */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns icon view models */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['EmergencyTypeIconViewModel'][];
            'application/json': components['schemas']['EmergencyTypeIconViewModel'][];
            'text/json': components['schemas']['EmergencyTypeIconViewModel'][];
            'application/xml': components['schemas']['EmergencyTypeIconViewModel'][];
            'text/xml': components['schemas']['EmergencyTypeIconViewModel'][];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Organizations/{id}/AddManager': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Add user as manager to the specified organization */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description organization id */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['GroupAddMemberModel'];
          'application/json': components['schemas']['GroupAddMemberModel'];
          'text/json': components['schemas']['GroupAddMemberModel'];
          'application/*+json': components['schemas']['GroupAddMemberModel'];
          'application/xml': components['schemas']['GroupAddMemberModel'];
          'text/xml': components['schemas']['GroupAddMemberModel'];
          'application/*+xml': components['schemas']['GroupAddMemberModel'];
        };
      };
      responses: {
        /** @description Returns nothing */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Organizations/{id}/RemoveManager': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Endpoint to remove manager from the specified organization */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description organization id */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['GroupAddMemberModel'];
          'application/json': components['schemas']['GroupAddMemberModel'];
          'text/json': components['schemas']['GroupAddMemberModel'];
          'application/*+json': components['schemas']['GroupAddMemberModel'];
          'application/xml': components['schemas']['GroupAddMemberModel'];
          'text/xml': components['schemas']['GroupAddMemberModel'];
          'application/*+xml': components['schemas']['GroupAddMemberModel'];
        };
      };
      responses: {
        /** @description Returns nothing */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Organizations/{id}/SetManagers': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** This endpoint is used to set managers to an organization.
     *     It first checks if the user making the request has the authority to manage the organization.
     *     Then, it retrieves the current managers for the organization from the database.
     *     It determines the managers to add by comparing the provided user IDs with the current managers.
     *     It also determines the managers to remove by comparing the current managers with the provided user IDs.
     *     If any users are not found or not accessible, it returns a Not Found error with a descriptive message.
     *     It adds the new managers to the organization and removes the managers that need to be removed.
     *     Finally, it returns an Ok response indicating that the operation was successful. */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The ID of the organization. */
          id: number;
        };
        cookie?: never;
      };
      /** @description An array of user IDs representing the managers to set. */
      requestBody?: {
        content: {
          'application/json-patch+json': number[];
          'application/json': number[];
          'text/json': number[];
          'application/*+json': number[];
          'application/xml': number[];
          'text/xml': number[];
          'application/*+xml': number[];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Organizations/{id}/RemoveUser/{userId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Endpoint to remove user from suborganization */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description suborganization id */
          id: number;
          /** @description user id */
          userId: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns nothing */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Organizations/{id}/RemoveUsers': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Endpoint to remove users from organization or suborganization */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description organization id */
          id: number;
        };
        cookie?: never;
      };
      /** @description user ids */
      requestBody?: {
        content: {
          'application/json-patch+json': number[];
          'application/json': number[];
          'text/json': number[];
          'application/*+json': number[];
          'application/xml': number[];
          'text/xml': number[];
          'application/*+xml': number[];
        };
      };
      responses: {
        /** @description Returns nothing */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Organizations/SendEmail': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Endpoint to send email to organizations. Accessible only to SuperAdmin. */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['SendEmailToOrganizationsBindingModel'];
          'application/json': components['schemas']['SendEmailToOrganizationsBindingModel'];
          'text/json': components['schemas']['SendEmailToOrganizationsBindingModel'];
          'application/*+json': components['schemas']['SendEmailToOrganizationsBindingModel'];
          'application/xml': components['schemas']['SendEmailToOrganizationsBindingModel'];
          'text/xml': components['schemas']['SendEmailToOrganizationsBindingModel'];
          'application/*+xml': components['schemas']['SendEmailToOrganizationsBindingModel'];
        };
      };
      responses: {
        /** @description Returns nothing */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Organizations/SendEmailToMembers': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Endpoint to send email to organizations. Accessible only to SuperAdmin. */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['SendEmailsToOrganizationsMembersBindingModel'];
          'application/json': components['schemas']['SendEmailsToOrganizationsMembersBindingModel'];
          'text/json': components['schemas']['SendEmailsToOrganizationsMembersBindingModel'];
          'application/*+json': components['schemas']['SendEmailsToOrganizationsMembersBindingModel'];
          'application/xml': components['schemas']['SendEmailsToOrganizationsMembersBindingModel'];
          'text/xml': components['schemas']['SendEmailsToOrganizationsMembersBindingModel'];
          'application/*+xml': components['schemas']['SendEmailsToOrganizationsMembersBindingModel'];
        };
      };
      responses: {
        /** @description Returns nothing */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Organizations/ExportUsersToExcel': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Endpoint to export users of the specified organization/s into excel file */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['RequestForUserExportToExcelBindingModel'];
          'application/json': components['schemas']['RequestForUserExportToExcelBindingModel'];
          'text/json': components['schemas']['RequestForUserExportToExcelBindingModel'];
          'application/*+json': components['schemas']['RequestForUserExportToExcelBindingModel'];
          'application/xml': components['schemas']['RequestForUserExportToExcelBindingModel'];
          'text/xml': components['schemas']['RequestForUserExportToExcelBindingModel'];
          'application/*+xml': components['schemas']['RequestForUserExportToExcelBindingModel'];
        };
      };
      responses: {
        /** @description Returns excel file containing exported users */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': string;
            'application/json': string;
            'text/json': string;
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Organizations/ListSentEmails': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** This endpoint accessible only to super admins, it returns the list of sent emails to organizations */
    get: {
      parameters: {
        query?: {
          /** @description return the specified number of elements */
          limit?: number;
          /** @description skip the specified number of elements */
          skip?: number;
          /** @description possible values: "emailTemplate", "emailTitle", "sendTime", "senderAddress", "sendStructure" - sorts by number of organizations email is sent. If not specified elements sorted by their Id in "ASC" mode. */
          sort?: string;
          /** @description possible values: "ASC", "DESC". Default value "ASC" */
          asc?: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns email view models */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': string;
            'application/json': string;
            'text/json': string;
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Organizations/ExportEmailRecipientsToExcel': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Endpoint to export email recipients from the specified organization/s into excel file */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['RequestForOrganizationEmailRecipientsBindingModel'];
          'application/json': components['schemas']['RequestForOrganizationEmailRecipientsBindingModel'];
          'text/json': components['schemas']['RequestForOrganizationEmailRecipientsBindingModel'];
          'application/*+json': components['schemas']['RequestForOrganizationEmailRecipientsBindingModel'];
          'application/xml': components['schemas']['RequestForOrganizationEmailRecipientsBindingModel'];
          'text/xml': components['schemas']['RequestForOrganizationEmailRecipientsBindingModel'];
          'application/*+xml': components['schemas']['RequestForOrganizationEmailRecipientsBindingModel'];
        };
      };
      responses: {
        /** @description Returns excel file containing email recipients */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': string;
            'application/json': string;
            'text/json': string;
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Organizations/{id}/EventCodes': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Endpoint returns event codes of the specified organization */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description organization id */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns event code view models */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['EventCodeViewModel'][];
            'application/json': components['schemas']['EventCodeViewModel'][];
            'text/json': components['schemas']['EventCodeViewModel'][];
            'application/xml': components['schemas']['EventCodeViewModel'][];
            'text/xml': components['schemas']['EventCodeViewModel'][];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Organizations/UsersStatistics': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** This endpoint is used to retrieve user statistics for organizations.
     *     It first checks if the user making the request has the authority to manage organizations.
     *     Then, it retrieves statistics about the number of users in each organization. */
    get: {
      parameters: {
        query?: {
          /** @description An array of integers representing the upper bounds of user count ranges. Organizations are counted in these ranges. */
          users?: number[];
          /** @description The type of organization to filter the statistics by. Can be 'Account' or 'SubAccount'. */
          orgType?: components['schemas']['OrganizationType'];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['OrganizationsUsersStatisticsViewModel'][];
            'application/json': components['schemas']['OrganizationsUsersStatisticsViewModel'][];
            'text/json': components['schemas']['OrganizationsUsersStatisticsViewModel'][];
            'application/xml': components['schemas']['OrganizationsUsersStatisticsViewModel'][];
            'text/xml': components['schemas']['OrganizationsUsersStatisticsViewModel'][];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/ExternalContacts': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Endpoint to create external contact list */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['ExternalContactListBindingModel'];
          'application/json': components['schemas']['ExternalContactListBindingModel'];
          'text/json': components['schemas']['ExternalContactListBindingModel'];
          'application/*+json': components['schemas']['ExternalContactListBindingModel'];
          'application/xml': components['schemas']['ExternalContactListBindingModel'];
          'text/xml': components['schemas']['ExternalContactListBindingModel'];
          'application/*+xml': components['schemas']['ExternalContactListBindingModel'];
        };
      };
      responses: {
        /** @description Returns newly created external contact list's view model */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ExternalContactListViewModel'][];
            'application/json': components['schemas']['ExternalContactListViewModel'][];
            'text/json': components['schemas']['ExternalContactListViewModel'][];
            'application/xml': components['schemas']['ExternalContactListViewModel'][];
            'text/xml': components['schemas']['ExternalContactListViewModel'][];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/ExternalContacts/{organizationId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Endpoint to get external contact lists of the specified organization */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          organizationId: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns external contact list view models */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ExternalContactListViewModel'][];
            'application/json': components['schemas']['ExternalContactListViewModel'][];
            'text/json': components['schemas']['ExternalContactListViewModel'][];
            'application/xml': components['schemas']['ExternalContactListViewModel'][];
            'text/xml': components['schemas']['ExternalContactListViewModel'][];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/ExternalContacts/Organizations/{organizationId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Endpoint to get external contacts of the specified organization */
    get: {
      parameters: {
        query?: {
          search?: string;
          skip?: number;
          take?: number;
          /** @description Possible values: "name" - default, "title", "email", "phone1", "phone2", "lists" */
          sort?: string;
          asc?: boolean;
          /** @description Array of external contact list id to exclude contacts that are already in these lists */
          excludeListId?: number[];
        };
        header?: never;
        path: {
          organizationId: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns external contact list view models */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ExternalContactViewModelPaginatedList'];
            'application/json': components['schemas']['ExternalContactViewModelPaginatedList'];
            'text/json': components['schemas']['ExternalContactViewModelPaginatedList'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/ExternalContacts/Organizations/{organizationId}/ExportExcel': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Endpoint to export as external contacts of the specified organization into excel file */
    get: {
      parameters: {
        query?: {
          search?: string;
          sort?: string;
          asc?: boolean;
        };
        header?: never;
        path: {
          organizationId: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': string;
            'application/json': string;
            'text/json': string;
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/ExternalContacts/Organizations/{organizationId}/ImportExcel': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Endpoint to import external contacts from Excel file of the specified organization
     *     and link them to the specified contact lists */
    post: {
      parameters: {
        query?: {
          /** @description array for lists id */
          listId?: number[];
        };
        header?: never;
        path: {
          organizationId: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ExternalContactsImportCsvResultViewModel'];
            'application/json': components['schemas']['ExternalContactsImportCsvResultViewModel'];
            'text/json': components['schemas']['ExternalContactsImportCsvResultViewModel'];
            'application/xml': components['schemas']['ExternalContactsImportCsvResultViewModel'];
            'text/xml': components['schemas']['ExternalContactsImportCsvResultViewModel'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/ExternalContacts/{contactListId}/Edit': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Endpoint to change specified contact list's name */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          contactListId: number;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['ExternalContactListEditBindingModel'];
          'application/json': components['schemas']['ExternalContactListEditBindingModel'];
          'text/json': components['schemas']['ExternalContactListEditBindingModel'];
          'application/*+json': components['schemas']['ExternalContactListEditBindingModel'];
          'application/xml': components['schemas']['ExternalContactListEditBindingModel'];
          'text/xml': components['schemas']['ExternalContactListEditBindingModel'];
          'application/*+xml': components['schemas']['ExternalContactListEditBindingModel'];
        };
      };
      responses: {
        /** @description Returns nothing */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/ExternalContacts/{contactListId}/GetAllContacts': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Endpoint returns paginated list of contacts from the specified contact list */
    get: {
      parameters: {
        query?: {
          search?: string;
          skip?: number;
          take?: number;
          /** @description Possible values: "name" - default, "title", "email", "phone1", "phone2", "lists" */
          sort?: string;
          asc?: boolean;
        };
        header?: never;
        path: {
          contactListId: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns paginated list of external contact view models */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ExternalContactViewModelPaginatedList'];
            'application/json': components['schemas']['ExternalContactViewModelPaginatedList'];
            'text/json': components['schemas']['ExternalContactViewModelPaginatedList'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/ExternalContacts/Contacts/{contactId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Endpoint returns external contact view model by contactId */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          contactId: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns external contact view model */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ExternalContactViewModel'];
            'application/json': components['schemas']['ExternalContactViewModel'];
            'text/json': components['schemas']['ExternalContactViewModel'];
            'application/xml': components['schemas']['ExternalContactViewModel'];
            'text/xml': components['schemas']['ExternalContactViewModel'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/ExternalContacts/{contactListId}/AddContacts': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Endpoint to add contacts to the specified contact list
     * @deprecated
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          contactListId: number;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['ExternalContactBindingModel'][];
          'application/json': components['schemas']['ExternalContactBindingModel'][];
          'text/json': components['schemas']['ExternalContactBindingModel'][];
          'application/*+json': components['schemas']['ExternalContactBindingModel'][];
          'application/xml': components['schemas']['ExternalContactBindingModel'][];
          'text/xml': components['schemas']['ExternalContactBindingModel'][];
          'application/*+xml': components['schemas']['ExternalContactBindingModel'][];
        };
      };
      responses: {
        /** @description Returns nothing */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ExternalContactViewModel'][];
            'application/json': components['schemas']['ExternalContactViewModel'][];
            'text/json': components['schemas']['ExternalContactViewModel'][];
            'application/xml': components['schemas']['ExternalContactViewModel'][];
            'text/xml': components['schemas']['ExternalContactViewModel'][];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/ExternalContacts/{contactListId}/AddExistingContacts': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Endpoint to add existing contacts to the specified contact list */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          contactListId: number;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': number[];
          'application/json': number[];
          'text/json': number[];
          'application/*+json': number[];
          'application/xml': number[];
          'text/xml': number[];
          'application/*+xml': number[];
        };
      };
      responses: {
        /** @description Returns nothing */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ExternalContactViewModel'][];
            'application/json': components['schemas']['ExternalContactViewModel'][];
            'text/json': components['schemas']['ExternalContactViewModel'][];
            'application/xml': components['schemas']['ExternalContactViewModel'][];
            'text/xml': components['schemas']['ExternalContactViewModel'][];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/ExternalContacts/{contactListId}/RemoveContacts': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Endpoint to remove contacts from the specified contact list */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          contactListId: number;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': number[];
          'application/json': number[];
          'text/json': number[];
          'application/*+json': number[];
          'application/xml': number[];
          'text/xml': number[];
          'application/*+xml': number[];
        };
      };
      responses: {
        /** @description Returns nothing */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/ExternalContacts/CreateContacts': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Endpoint to add external contacts */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['ExternalContactBindingModel'][];
          'application/json': components['schemas']['ExternalContactBindingModel'][];
          'text/json': components['schemas']['ExternalContactBindingModel'][];
          'application/*+json': components['schemas']['ExternalContactBindingModel'][];
          'application/xml': components['schemas']['ExternalContactBindingModel'][];
          'text/xml': components['schemas']['ExternalContactBindingModel'][];
          'application/*+xml': components['schemas']['ExternalContactBindingModel'][];
        };
      };
      responses: {
        /** @description Returns nothing */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/ExternalContacts/EditContact/{contactId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Endpoint to edit the specified contact */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          contactId: number;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['ExternalContactBindingModel'];
          'application/json': components['schemas']['ExternalContactBindingModel'];
          'text/json': components['schemas']['ExternalContactBindingModel'];
          'application/*+json': components['schemas']['ExternalContactBindingModel'];
          'application/xml': components['schemas']['ExternalContactBindingModel'];
          'text/xml': components['schemas']['ExternalContactBindingModel'];
          'application/*+xml': components['schemas']['ExternalContactBindingModel'];
        };
      };
      responses: {
        /** @description Returns nothing */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/ExternalContacts/DeleteContacts': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** Endpoint to delete external contact/s */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['ExternalContactsDeleteBindingModel'];
          'application/json': components['schemas']['ExternalContactsDeleteBindingModel'];
          'text/json': components['schemas']['ExternalContactsDeleteBindingModel'];
          'application/*+json': components['schemas']['ExternalContactsDeleteBindingModel'];
          'application/xml': components['schemas']['ExternalContactsDeleteBindingModel'];
          'text/xml': components['schemas']['ExternalContactsDeleteBindingModel'];
          'application/*+xml': components['schemas']['ExternalContactsDeleteBindingModel'];
        };
      };
      responses: {
        /** @description Returns nothing */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/ExternalContacts/DeleteContactList/{contactListId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** Endpoint to delete specified contact list */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          contactListId: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns nothing */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/ExternalContacts/DeleteContactLists': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** Endpoint to delete specified contact lists */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': number[];
          'application/json': number[];
          'text/json': number[];
          'application/*+json': number[];
          'application/xml': number[];
          'text/xml': number[];
          'application/*+xml': number[];
        };
      };
      responses: {
        /** @description Returns nothing */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/ExternalContacts/Organizations/{organizationId}/ExternalContactsSMSCount': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Endpoint to return sms counts */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description organizartion */
          organizationId: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Counts of sent external SMS for organization */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ExternalContactSMSCount'][];
            'application/json': components['schemas']['ExternalContactSMSCount'][];
            'text/json': components['schemas']['ExternalContactSMSCount'][];
            'application/xml': components['schemas']['ExternalContactSMSCount'][];
            'text/xml': components['schemas']['ExternalContactSMSCount'][];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/TextTemplatesForExternalContacts/{organizationId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Endpoint to get text templates for external contacts for the specified organization */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          organizationId: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns text template view models */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['TextTemplateForExternalContactsViewModel'][];
            'application/json': components['schemas']['TextTemplateForExternalContactsViewModel'][];
            'text/json': components['schemas']['TextTemplateForExternalContactsViewModel'][];
            'application/xml': components['schemas']['TextTemplateForExternalContactsViewModel'][];
            'text/xml': components['schemas']['TextTemplateForExternalContactsViewModel'][];
          };
        };
      };
    };
    put?: never;
    /** Endpoint to create text template for external contacts communiacation for the specified organization */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          organizationId: number;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['TextTemplateForExternalContactsBindingModel'];
          'application/json': components['schemas']['TextTemplateForExternalContactsBindingModel'];
          'text/json': components['schemas']['TextTemplateForExternalContactsBindingModel'];
          'application/*+json': components['schemas']['TextTemplateForExternalContactsBindingModel'];
          'application/xml': components['schemas']['TextTemplateForExternalContactsBindingModel'];
          'text/xml': components['schemas']['TextTemplateForExternalContactsBindingModel'];
          'application/*+xml': components['schemas']['TextTemplateForExternalContactsBindingModel'];
        };
      };
      responses: {
        /** @description Returns nothing */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/TextTemplatesForExternalContacts/Edit/{templateId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Endpoint to edit the specified text template for external contacts */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          templateId: number;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['TextTemplateForExternalContactsBindingModel'];
          'application/json': components['schemas']['TextTemplateForExternalContactsBindingModel'];
          'text/json': components['schemas']['TextTemplateForExternalContactsBindingModel'];
          'application/*+json': components['schemas']['TextTemplateForExternalContactsBindingModel'];
          'application/xml': components['schemas']['TextTemplateForExternalContactsBindingModel'];
          'text/xml': components['schemas']['TextTemplateForExternalContactsBindingModel'];
          'application/*+xml': components['schemas']['TextTemplateForExternalContactsBindingModel'];
        };
      };
      responses: {
        /** @description Returns nothing */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/TextTemplatesForExternalContacts/Delete/{templateId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** Endpoint to delete the specified text template for external contacts */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          templateId: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns nothing */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/TextTemplatesForExternalContacts': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** Endpoint to delete the specified text templates for external contacts */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': number[];
          'application/json': number[];
          'text/json': number[];
          'application/*+json': number[];
          'application/xml': number[];
          'text/xml': number[];
          'application/*+xml': number[];
        };
      };
      responses: {
        /** @description Returns nothing */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/SubOrganizations/All': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @deprecated */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/SubOrganizations/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @deprecated */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/SubOrganizations/Create': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** @deprecated */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['SubOrganizationBindingModel'];
          'application/json': components['schemas']['SubOrganizationBindingModel'];
          'text/json': components['schemas']['SubOrganizationBindingModel'];
          'application/*+json': components['schemas']['SubOrganizationBindingModel'];
          'application/xml': components['schemas']['SubOrganizationBindingModel'];
          'text/xml': components['schemas']['SubOrganizationBindingModel'];
          'application/*+xml': components['schemas']['SubOrganizationBindingModel'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/SubOrganizations/Bulk/Create': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Allow to create multiple suborganizations at once API call. */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description The request - list of suborganization names and parent organization id. */
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['BulkSubOrganizationBindingModel'];
          'application/json': components['schemas']['BulkSubOrganizationBindingModel'];
          'text/json': components['schemas']['BulkSubOrganizationBindingModel'];
          'application/*+json': components['schemas']['BulkSubOrganizationBindingModel'];
          'application/xml': components['schemas']['BulkSubOrganizationBindingModel'];
          'text/xml': components['schemas']['BulkSubOrganizationBindingModel'];
          'application/*+xml': components['schemas']['BulkSubOrganizationBindingModel'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['OrganizationViewModel'][];
            'application/json': components['schemas']['OrganizationViewModel'][];
            'text/json': components['schemas']['OrganizationViewModel'][];
            'application/xml': components['schemas']['OrganizationViewModel'][];
            'text/xml': components['schemas']['OrganizationViewModel'][];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Organizations/{id}/EnableCustomMenu': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Endpoint to enable/disable custom menu for the specified organization */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description organization id */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['EnableCustomMenuBindingModel'];
          'application/json': components['schemas']['EnableCustomMenuBindingModel'];
          'text/json': components['schemas']['EnableCustomMenuBindingModel'];
          'application/*+json': components['schemas']['EnableCustomMenuBindingModel'];
          'application/xml': components['schemas']['EnableCustomMenuBindingModel'];
          'text/xml': components['schemas']['EnableCustomMenuBindingModel'];
          'application/*+xml': components['schemas']['EnableCustomMenuBindingModel'];
        };
      };
      responses: {
        /** @description Returns nothing */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Organizations/{id}/ImportSettings': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** This endpoint is used to retrieve the import settings for a specific organization.
     *     It first checks if the user making the request has the authority to ManageIntegrations the organization.
     *     Then, it retrieves the organization object with its related import settings.
     *     If the organization or its import settings are not found, it returns a Not Found error.
     *     Otherwise, it returns an Ok response with the imported settings model. */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['OrganizationImportSettingsViewModel'];
            'application/json': components['schemas']['OrganizationImportSettingsViewModel'];
            'text/json': components['schemas']['OrganizationImportSettingsViewModel'];
            'application/xml': components['schemas']['OrganizationImportSettingsViewModel'];
            'text/xml': components['schemas']['OrganizationImportSettingsViewModel'];
          };
        };
      };
    };
    put?: never;
    /** This endpoint is used to update the import settings for a specific organization.
     *     It first checks if the user making the request has the authority to ManageIntegrations the organization.
     *     Then, it retrieves the organization object with its related import settings.
     *     If the organization is not found, it returns a Not Found error.
     *     If the ImportType is null, the endpoint determines it based on the file extension of FileName, which supports only Excel (.xlsx) or CSV (.csv) files.
     *     Otherwise, it updates the import settings for the organization and returns an Ok response with the updated imported settings model. */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The ID of the organization to update the import settings for. */
          id: number;
        };
        cookie?: never;
      };
      /** @description The model containing the new import settings to update. */
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['OrganizationImportSettingsBindingModel'];
          'application/json': components['schemas']['OrganizationImportSettingsBindingModel'];
          'text/json': components['schemas']['OrganizationImportSettingsBindingModel'];
          'application/*+json': components['schemas']['OrganizationImportSettingsBindingModel'];
          'application/xml': components['schemas']['OrganizationImportSettingsBindingModel'];
          'text/xml': components['schemas']['OrganizationImportSettingsBindingModel'];
          'application/*+xml': components['schemas']['OrganizationImportSettingsBindingModel'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['OrganizationImportSettingsViewModel'];
            'application/json': components['schemas']['OrganizationImportSettingsViewModel'];
            'text/json': components['schemas']['OrganizationImportSettingsViewModel'];
            'application/xml': components['schemas']['OrganizationImportSettingsViewModel'];
            'text/xml': components['schemas']['OrganizationImportSettingsViewModel'];
          };
        };
      };
    };
    /** This endpoint is used to delete the import settings for a specific organization.
     *     It first checks if the user making the request has the authority to ManageIntegrations the organization.
     *     Then, it retrieves the organization object with its related import settings.
     *     If the organization or its import settings are not found, it returns a Not Found error.
     *     Otherwise, it deletes the import settings from the organization object and saves the changes to the database. */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The ID of the organization for which to delete the import settings. */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Organizations/{id}/ImportSettings/Test': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** This endpoint is used to test the import settings for a specific organization.
     *     It first checks if the user making the request has the authority to manage the organization.
     *     Then, it retrieves the organization object with its related import settings.
     *     If the organization or its import settings are not found, it returns a Not Found error.
     *     Otherwise, it reads the input data using the import settings and returns an Ok response with the model that includes the first 50 input data. */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The ID of the organization to test the import settings for. */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['OrganizationImportSettingsTestViewModel'];
            'application/json': components['schemas']['OrganizationImportSettingsTestViewModel'];
            'text/json': components['schemas']['OrganizationImportSettingsTestViewModel'];
            'application/xml': components['schemas']['OrganizationImportSettingsTestViewModel'];
            'text/xml': components['schemas']['OrganizationImportSettingsTestViewModel'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/EntityChangeLog': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get entity change logs in admin panel, only SuperAdmin can access this endpoint */
    get: {
      parameters: {
        query?: {
          /** @description possible values: "User", "Group", "GroupMember", "Password", "Location" */
          entityName?: string;
          /** @description changed entity id, like userId, groupId, etc */
          entityId?: number;
          userId?: number;
          /** @description skip the specified number of elements */
          skip?: number;
          /** @description take the specified number of elements */
          take?: number;
          /** @description get change log of user with specified email */
          userEmail?: string;
          /** @description not used */
          ip?: string;
          /** @description get change log of log where email of some user has been changed to this specified value */
          changedUserEmail?: string;
          /** @description get change logs related to this organization */
          organizationId?: number;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns entity change log view models */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['EntityChangeLogViewModel'][];
            'application/json': components['schemas']['EntityChangeLogViewModel'][];
            'text/json': components['schemas']['EntityChangeLogViewModel'][];
            'application/xml': components['schemas']['EntityChangeLogViewModel'][];
            'text/xml': components['schemas']['EntityChangeLogViewModel'][];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Notifications': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get notifications log */
    get: {
      parameters: {
        query?: {
          /** @description take specified number of elements */
          limit?: number;
          /** @description filter out notifications for users with the specified email */
          email?: string;
          /** @description parameter used only by SuperAdmins: Super admin can filter out notifications based on any organizationId */
          organizationId?: number;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns notification view models */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['NotificationsViewModel'][];
            'application/json': components['schemas']['NotificationsViewModel'][];
            'text/json': components['schemas']['NotificationsViewModel'][];
            'application/xml': components['schemas']['NotificationsViewModel'][];
            'text/xml': components['schemas']['NotificationsViewModel'][];
          };
        };
      };
    };
    put?: never;
    /** Endpoint to test notification. Authorization is not required for this endpoint. */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': unknown;
          'application/json': unknown;
          'text/json': unknown;
          'application/*+json': unknown;
          'application/xml': unknown;
          'text/xml': unknown;
          'application/*+xml': unknown;
        };
      };
      responses: {
        /** @description Returns FirebaseReport object */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['FirebaseReport'];
            'application/json': components['schemas']['FirebaseReport'];
            'text/json': components['schemas']['FirebaseReport'];
            'application/xml': components['schemas']['FirebaseReport'];
            'text/xml': components['schemas']['FirebaseReport'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/NotificationTest': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Endpoint to test notification. Authorization is not required for this endpoint. */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': unknown;
          'application/json': unknown;
          'text/json': unknown;
          'application/*+json': unknown;
          'application/xml': unknown;
          'text/xml': unknown;
          'application/*+xml': unknown;
        };
      };
      responses: {
        /** @description Returns FirebaseReport object */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['FirebaseReport'];
            'application/json': components['schemas']['FirebaseReport'];
            'text/json': components['schemas']['FirebaseReport'];
            'application/xml': components['schemas']['FirebaseReport'];
            'text/xml': components['schemas']['FirebaseReport'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/EmergencyReport': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Endpoint to generate and get emergency report
     * @description Parameters: "type" - possible values: 1, 2. 1 - crisis based (get report for specific emergency by using its Id), 2 - time interval based (get report for all emergencies within specified timeframe). Now only value 2 is used;
     *     "crisisid" - ID of emergency to generate report. Only when "type" : 1. Now this parameter is ignored;
     *     "starttime" - start time when "type" : 2;
     *     "endtime" - end time when "type" : 2;
     *     "amplitude" - single possible value: 2 (virus mode).In case specified include all involved users. For example, if user from initial group sends message in other group, all users should be checked further, what they have done, and include also their actions;
     *     "depth" - not used anymore;
     *     "language" - language used, possible values: "en", "se", "pt";
     *     "organizationID" - optional parameter. In case specified user must be able to manage the specified organization. Specified in case user wants to see actions within the specific organization;
     *     "includeSuborgs" - used in pair with "organizationID" parameter, in case specified return emergency logs from suborganizations also ;
     *     "groupId" - optional parameter, in case specified filter emergency logs by group;
     *
     *     Generated report field's:
     *     "id" - entity id;
     *     "timestamp" - time of event;
     *     "deltatime" - [timestamp - data.StartTime] difference between start time(for report generation) and time of event;
     *     "messageType" - type of message: typical message, or checklist item checking event, etc (definition of types defined below, after this section);
     *     "msgtext" - text of message;
     *     "images" - links to the images added to message;
     *     "documents" - links to the documents attached to message;
     *     "audioFiles" - links to the audioFIles attached to message;
     *     "sender" - name of user or service that sent message;
     *     "sendertype" - possible values 0,1,2. 0 - Normal - Users that are not initiators of crisis message and not crisis team members,
     *     1 - Initiator - Normal users that have initiated any crisis message within period or crisis. Can be that someone else initiates new crisis thread, then also such person should be marked as initiator. Both for one crisis and period. Could be harder if person initiates new different ongoing crisis later in report, if to mark him as initiator also previously in report,
     *     2 - CTM - Crisis team members;
     *     "in_groups" - list of groups and their members that received this message;
     *     "emergency_type" -  emergency type id of emergency message;
     *     "emergency_type_name" - localized names of the emergency type (in case this is emergency message);
     *     "latitude" - latitude of the location of message;
     *     "longitude" - longitude of the location of message;
     *     "location_name" - name of the location of message;
     *     "location_time" - message sent time converted to location time zone;
     *     "initialId" - messages initial id in the format (CL(checklistId), OCA(onCallAlertId), MUS(musterId), M(messageId));
     *     "initial_message_type" - reply's initial message's type;
     *     "initial_message_type" - reply's initial message's subtype;
     *     "message_recipients" - message recipients;
     *     "organization" - messages organization in case this is broaccast message;
     *     "ended" - whether the event connected to this message endded (alarm recalled, checklist ended, oncallalert ended, muster(IamOk) ended);
     *     "isInitial" - whether the initial format fits M(messageId) for messages, etc;
     *
     *
     *     Message types:
     *     Possible values currently in use:
     *     34 - New group created via POST apu/admin/groups/register, sender - user who created group via admin panel,
     *
     *     35 - Group deleted via DELETE api/admin/groups/{id}/delete, sender - user who deleted specified group,
     *
     *     33 - User deleted via DELETE api/admin/users/{id}/delete(or deleteFully or deleteNotReally), sender - user who deleted the specified user,
     *
     *     21 - New checklist created via POST api/admin/checklists, sender - checklist creator,
     *
     *     21 - Checklist shared via POST api/admin/checklists/{checklistID:int}/sharelive/{groupIDs} with specified groups, sender - user who shared the specified checklist,
     *
     *     21 - Checklist shared via POST api/admin/checklists/{checklistID:int}/usershare with specified users, sender - user who shared the specified checklist,
     *
     *     21 - Checklist shared via POST api/checklists/{checklistID}/sharelive/{groupIdString} with specified groups, sender - user who shared specified checklist,
     *
     *     5 - Checklist started with specified groups via POST api/checklists/{checklistID:int}/start/{groupIDs}, sender - user who started checklist,
     *
     *     5 - Checklist started with users and groups via POST api/checklists/{checklistID:int}/startWithUsersAndGroups, sender - user who started checklist,
     *
     *     22 - Checklist ended via POST api/checklists/{checklistID}/end, sender - user who ended checklist,
     *
     *     23 - Ended checklist reactivated via POST api/checklists/{checklistID}/reactivate, sender - user who reactivated the ended checklist,
     *
     *     32 - User/s created via POST api/admin/Users/Register-users, sender - user who registers new user/s,
     *
     *     32 - User created via POST api/account/login when user logged in first time, user is initialized, sender - user who makes this api request,
     *
     *     32 - User is initialized via POST api/account/codelogin (login using referral code), sender - user who makes this api request,
     *
     *     32 - User is initialized via POST api/account/samlredirect (when user logs in using saml sso), sender - created user via saml sso,
     *
     *     32 - User is registered via POST api/admin/users/register, sender - user who makes request to register new user,
     *
     *     32 - User/s are imported via POST api/admin/users/import-users, sender - user who makes this api request for import,
     *
     *     26 - Log created for alarm activation event in the specified group (this endpoint does not activate any alarm, just creates log for it) POST api/groups/{id}/activateAlarm, sender - user who sends this request,
     *
     *     26 - Log created for alarm activation event in the specified groups (this endpoint does not activate any alarm, just creates log for it) POST api/groups/activateAlarms, sender - user who sends this request,
     *
     *     27 - Log created for alarm deactivation event in the specified group (this endpoint does not deactivate any alarm, just creates log for it) POST api/groups/{id}/deactivateAlarm, sender - user who sends this request,
     *
     *     27 - Log created for alarm deactivation event in the specified groups (this endpoint does not deactivate any alarm, just creates log for it) POST api/groups/deactivateAlarms, sender - user who sends this request,
     *
     *     18 - Specified group added to the specified message via POST api/messages/{id}/addgroup/{groupId}, sender - user who makes this request,
     *
     *     5 - New checklist started when sending emergency message via POST api/messages, sender - user who makes this request,
     *
     *     19 - Specified message deleted, deleted message is of type GroupMessageType.Message(type 0) or any type other than type 9(GroupMessageType.HoldingStatement) and type 10(GroupMessageType.LogNote), sender - user who makes this request,
     *
     *     38 - Specified message deleted, deleted message is of type GroupMessageType.HoldingStatement(type 9), sender - user who makes this request,
     *
     *     41 - Specified message deleted, deleted message is of type GroupMessageType.LogNote(type 10), sender - user who makes this request,
     *
     *     10 - Specified reply is edited via POST api/messages/replies/{replyId}/edit, reply's message is of type 0 (GroupMessageType.Message) or any other type except type 9 (GroupMessageType.HoldingStatement) and type 10 (GroupMessageType.LogNote), sender - user who makes this request,
     *
     *     36 - Specified reply is edited via POST api/messages/replies/{replyId}/edit, reply's message is of type 9 (GroupMessageType.HoldingStatement), sender - user who makes this request,
     *
     *     39 - Specified reply is edited via POST api/messages/replies/{replyId}/edit, reply's message is of type 10 (GroupMessageType.LogNote), sender - user who makes this request,
     *
     *     20 - Specified reply is deleted via DELETE api/messages/{messageID}/replies/{replyId}, reply's message is of type 0 (GroupMessageType.Message) or any other type except type 9 (GroupMessageType.HoldingStatement) and type 10 (GroupMessageType.LogNote), sender - user who makes this request,
     *
     *     37 - Specified reply is deleted via DELETE api/messages/{messageID}/replies/{replyId}, reply's message is of type 9 (GroupMessageType.HoldingStatement), sender - user who makes this request,
     *
     *     40 - Specified reply is deleted via DELETE api/messages/{messageID}/replies/{replyId}, reply's message is of type 10 (GroupMessageType.LogNote), sender - user who makes this request.
     *
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['EmergencyReportBindingModel'];
          'application/json': components['schemas']['EmergencyReportBindingModel'];
          'text/json': components['schemas']['EmergencyReportBindingModel'];
          'application/*+json': components['schemas']['EmergencyReportBindingModel'];
          'application/xml': components['schemas']['EmergencyReportBindingModel'];
          'text/xml': components['schemas']['EmergencyReportBindingModel'];
          'application/*+xml': components['schemas']['EmergencyReportBindingModel'];
        };
      };
      responses: {
        /** @description Returns emergency report view model */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['EmergencyReportViewModel'];
            'application/json': components['schemas']['EmergencyReportViewModel'];
            'text/json': components['schemas']['EmergencyReportViewModel'];
            'application/xml': components['schemas']['EmergencyReportViewModel'];
            'text/xml': components['schemas']['EmergencyReportViewModel'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/EmergencyReportDownload': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Endpoint to generate and get emergency report
     * @description Parameters: "type" - possible values: 1, 2. 1 - crisis based (get report for specific emergency by using its Id), 2 - time interval based (get report for all emergencies within specified timeframe). Now only value 2 is used;
     *     "crisisid" - ID of emergency to generate report. Only when "type" : 1. Now this parameter is ignored;
     *     "starttime" - start time when "type" : 2;
     *     "endtime" - end time when "type" : 2;
     *     "amplitude" - single possible value: 2 (virus mode).In case specified include all involved users. For example, if user from initial group sends message in other group, all users should be checked further, what they have done, and include also their actions;
     *     "depth" - not used anymore;
     *     "language" - language used, possible values: "en", "se", "pt";
     *     "organizationID" - optional parameter. In case specified user must be able to manage the specified organization. Specified in case user wants to see actions within the specific organization;
     *     "includeSuborgs" - used in pair with "organizationID" parameter, in case specified return emergency logs from suborganizations also ;
     *     "groupId" - optional parameter, in case specified filter emergency logs by group;
     *
     *     Generated report field's:
     *     "id" - entity id;
     *     "timestamp" - time of event;
     *     "deltatime" - [timestamp - data.StartTime] difference between start time(for report generation) and time of event;
     *     "messageType" - type of message: typical message, or checklist item checking event, etc (definition of types defined below, after this section);
     *     "msgtext" - text of message;
     *     "images" - links to the images added to message;
     *     "documents" - links to the documents attached to message;
     *     "audioFiles" - links to the audioFIles attached to message;
     *     "sender" - name of user or service that sent message;
     *     "sendertype" - possible values 0,1,2. 0 - Normal - Users that are not initiators of crisis message and not crisis team members,
     *     1 - Initiator - Normal users that have initiated any crisis message within period or crisis. Can be that someone else initiates new crisis thread, then also such person should be marked as initiator. Both for one crisis and period. Could be harder if person initiates new different ongoing crisis later in report, if to mark him as initiator also previously in report,
     *     2 - CTM - Crisis team members;
     *     "in_groups" - list of groups and their members that received this message;
     *     "emergency_type" -  emergency type id of emergency message;
     *     "emergency_type_name" - localized names of the emergency type (in case this is emergency message);
     *     "latitude" - latitude of the location of message;
     *     "longitude" - longitude of the location of message;
     *     "location_name" - name of the location of message;
     *     "location_time" - message sent time converted to location time zone;
     *     "initialId" - messages initial id in the format (CL(checklistId), OCA(onCallAlertId), MUS(musterId), M(messageId));
     *     "initial_message_type" - reply's initial message's type;
     *     "initial_message_type" - reply's initial message's subtype;
     *     "message_recipients" - message recipients;
     *     "organization" - messages organization in case this is broaccast message;
     *     "ended" - whether the event connected to this message endded (alarm recalled, checklist ended, oncallalert ended, muster(IamOk) ended);
     *     "isInitial" - whether the initial format fits M(messageId) for messages, etc;
     *
     *
     *     Message types:
     *     Possible values currently in use:
     *     34 - New group created via POST apu/admin/groups/register, sender - user who created group via admin panel,
     *
     *     35 - Group deleted via DELETE api/admin/groups/{id}/delete, sender - user who deleted specified group,
     *
     *     33 - User deleted via DELETE api/admin/users/{id}/delete(or deleteFully or deleteNotReally), sender - user who deleted the specified user,
     *
     *     21 - New checklist created via POST api/admin/checklists, sender - checklist creator,
     *
     *     21 - Checklist shared via POST api/admin/checklists/{checklistID:int}/sharelive/{groupIDs} with specified groups, sender - user who shared the specified checklist,
     *
     *     21 - Checklist shared via POST api/admin/checklists/{checklistID:int}/usershare with specified users, sender - user who shared the specified checklist,
     *
     *     21 - Checklist shared via POST api/checklists/{checklistID}/sharelive/{groupIdString} with specified groups, sender - user who shared specified checklist,
     *
     *     5 - Checklist started with specified groups via POST api/checklists/{checklistID:int}/start/{groupIDs}, sender - user who started checklist,
     *
     *     5 - Checklist started with users and groups via POST api/checklists/{checklistID:int}/startWithUsersAndGroups, sender - user who started checklist,
     *
     *     22 - Checklist ended via POST api/checklists/{checklistID}/end, sender - user who ended checklist,
     *
     *     23 - Ended checklist reactivated via POST api/checklists/{checklistID}/reactivate, sender - user who reactivated the ended checklist,
     *
     *     32 - User/s created via POST api/admin/Users/Register-users, sender - user who registers new user/s,
     *
     *     32 - User created via POST api/account/login when user logged in first time, user is initialized, sender - user who makes this api request,
     *
     *     32 - User is initialized via POST api/account/codelogin (login using referral code), sender - user who makes this api request,
     *
     *     32 - User is initialized via POST api/account/samlredirect (when user logs in using saml sso), sender - created user via saml sso,
     *
     *     32 - User is registered via POST api/admin/users/register, sender - user who makes request to register new user,
     *
     *     32 - User/s are imported via POST api/admin/users/import-users, sender - user who makes this api request for import,
     *
     *     26 - Log created for alarm activation event in the specified group (this endpoint does not activate any alarm, just creates log for it) POST api/groups/{id}/activateAlarm, sender - user who sends this request,
     *
     *     26 - Log created for alarm activation event in the specified groups (this endpoint does not activate any alarm, just creates log for it) POST api/groups/activateAlarms, sender - user who sends this request,
     *
     *     27 - Log created for alarm deactivation event in the specified group (this endpoint does not deactivate any alarm, just creates log for it) POST api/groups/{id}/deactivateAlarm, sender - user who sends this request,
     *
     *     27 - Log created for alarm deactivation event in the specified groups (this endpoint does not deactivate any alarm, just creates log for it) POST api/groups/deactivateAlarms, sender - user who sends this request,
     *
     *     18 - Specified group added to the specified message via POST api/messages/{id}/addgroup/{groupId}, sender - user who makes this request,
     *
     *     5 - New checklist started when sending emergency message via POST api/messages, sender - user who makes this request,
     *
     *     19 - Specified message deleted, deleted message is of type GroupMessageType.Message(type 0) or any type other than type 9(GroupMessageType.HoldingStatement) and type 10(GroupMessageType.LogNote), sender - user who makes this request,
     *
     *     38 - Specified message deleted, deleted message is of type GroupMessageType.HoldingStatement(type 9), sender - user who makes this request,
     *
     *     41 - Specified message deleted, deleted message is of type GroupMessageType.LogNote(type 10), sender - user who makes this request,
     *
     *     10 - Specified reply is edited via POST api/messages/replies/{replyId}/edit, reply's message is of type 0 (GroupMessageType.Message) or any other type except type 9 (GroupMessageType.HoldingStatement) and type 10 (GroupMessageType.LogNote), sender - user who makes this request,
     *
     *     36 - Specified reply is edited via POST api/messages/replies/{replyId}/edit, reply's message is of type 9 (GroupMessageType.HoldingStatement), sender - user who makes this request,
     *
     *     39 - Specified reply is edited via POST api/messages/replies/{replyId}/edit, reply's message is of type 10 (GroupMessageType.LogNote), sender - user who makes this request,
     *
     *     20 - Specified reply is deleted via DELETE api/messages/{messageID}/replies/{replyId}, reply's message is of type 0 (GroupMessageType.Message) or any other type except type 9 (GroupMessageType.HoldingStatement) and type 10 (GroupMessageType.LogNote), sender - user who makes this request,
     *
     *     37 - Specified reply is deleted via DELETE api/messages/{messageID}/replies/{replyId}, reply's message is of type 9 (GroupMessageType.HoldingStatement), sender - user who makes this request,
     *
     *     40 - Specified reply is deleted via DELETE api/messages/{messageID}/replies/{replyId}, reply's message is of type 10 (GroupMessageType.LogNote), sender - user who makes this request.
     *
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['EmergencyReportBindingModel'];
          'application/json': components['schemas']['EmergencyReportBindingModel'];
          'text/json': components['schemas']['EmergencyReportBindingModel'];
          'application/*+json': components['schemas']['EmergencyReportBindingModel'];
          'application/xml': components['schemas']['EmergencyReportBindingModel'];
          'text/xml': components['schemas']['EmergencyReportBindingModel'];
          'application/*+xml': components['schemas']['EmergencyReportBindingModel'];
        };
      };
      responses: {
        /** @description Returns emergency report view model */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['EmergencyReportViewModel'];
            'application/json': components['schemas']['EmergencyReportViewModel'];
            'text/json': components['schemas']['EmergencyReportViewModel'];
            'application/xml': components['schemas']['EmergencyReportViewModel'];
            'text/xml': components['schemas']['EmergencyReportViewModel'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/EmergencyReport/pdf': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Endpoint to generate and get emergency report
     * @description Parameters: "type" - possible values: 1, 2. 1 - crisis based (get report for specific emergency by using its Id), 2 - time interval based (get report for all emergencies within specified timeframe). Now only value 2 is used;
     *     "crisisid" - ID of emergency to generate report. Only when "type" : 1. Now this parameter is ignored;
     *     "starttime" - start time when "type" : 2;
     *     "endtime" - end time when "type" : 2;
     *     "amplitude" - single possible value: 2 (virus mode).In case specified include all involved users. For example, if user from initial group sends message in other group, all users should be checked further, what they have done, and include also their actions;
     *     "depth" - not used anymore;
     *     "language" - language used, possible values: "en", "se", "pt";
     *     "organizationID" - optional parameter. In case specified user must be able to manage the specified organization. Specified in case user wants to see actions within the specific organization;
     *     "includeSuborgs" - used in pair with "organizationID" parameter, in case specified return emergency logs from suborganizations also ;
     *     "groupId" - optional parameter, in case specified filter emergency logs by group;
     *
     *     Generated report field's:
     *     "id" - entity id;
     *     "timestamp" - time of event;
     *     "deltatime" - [timestamp - data.StartTime] difference between start time(for report generation) and time of event;
     *     "messageType" - type of message: typical message, or checklist item checking event, etc (definition of types defined below, after this section);
     *     "msgtext" - text of message;
     *     "images" - links to the images added to message;
     *     "documents" - links to the documents attached to message;
     *     "audioFiles" - links to the audioFIles attached to message;
     *     "sender" - name of user or service that sent message;
     *     "sendertype" - possible values 0,1,2. 0 - Normal - Users that are not initiators of crisis message and not crisis team members,
     *     1 - Initiator - Normal users that have initiated any crisis message within period or crisis. Can be that someone else initiates new crisis thread, then also such person should be marked as initiator. Both for one crisis and period. Could be harder if person initiates new different ongoing crisis later in report, if to mark him as initiator also previously in report,
     *     2 - CTM - Crisis team members;
     *     "in_groups" - list of groups and their members that received this message;
     *     "emergency_type" -  emergency type id of emergency message;
     *     "emergency_type_name" - localized names of the emergency type (in case this is emergency message);
     *     "latitude" - latitude of the location of message;
     *     "longitude" - longitude of the location of message;
     *     "location_name" - name of the location of message;
     *     "location_time" - message sent time converted to location time zone;
     *     "initialId" - messages initial id in the format (CL(checklistId), OCA(onCallAlertId), MUS(musterId), M(messageId));
     *     "initial_message_type" - reply's initial message's type;
     *     "initial_message_type" - reply's initial message's subtype;
     *     "message_recipients" - message recipients;
     *     "organization" - messages organization in case this is broaccast message;
     *     "ended" - whether the event connected to this message endded (alarm recalled, checklist ended, oncallalert ended, muster(IamOk) ended);
     *     "isInitial" - whether the initial format fits M(messageId) for messages, etc;
     *
     *
     *     Message types:
     *     Possible values currently in use:
     *     34 - New group created via POST apu/admin/groups/register, sender - user who created group via admin panel,
     *
     *     35 - Group deleted via DELETE api/admin/groups/{id}/delete, sender - user who deleted specified group,
     *
     *     33 - User deleted via DELETE api/admin/users/{id}/delete(or deleteFully or deleteNotReally), sender - user who deleted the specified user,
     *
     *     21 - New checklist created via POST api/admin/checklists, sender - checklist creator,
     *
     *     21 - Checklist shared via POST api/admin/checklists/{checklistID:int}/sharelive/{groupIDs} with specified groups, sender - user who shared the specified checklist,
     *
     *     21 - Checklist shared via POST api/admin/checklists/{checklistID:int}/usershare with specified users, sender - user who shared the specified checklist,
     *
     *     21 - Checklist shared via POST api/checklists/{checklistID}/sharelive/{groupIdString} with specified groups, sender - user who shared specified checklist,
     *
     *     5 - Checklist started with specified groups via POST api/checklists/{checklistID:int}/start/{groupIDs}, sender - user who started checklist,
     *
     *     5 - Checklist started with users and groups via POST api/checklists/{checklistID:int}/startWithUsersAndGroups, sender - user who started checklist,
     *
     *     22 - Checklist ended via POST api/checklists/{checklistID}/end, sender - user who ended checklist,
     *
     *     23 - Ended checklist reactivated via POST api/checklists/{checklistID}/reactivate, sender - user who reactivated the ended checklist,
     *
     *     32 - User/s created via POST api/admin/Users/Register-users, sender - user who registers new user/s,
     *
     *     32 - User created via POST api/account/login when user logged in first time, user is initialized, sender - user who makes this api request,
     *
     *     32 - User is initialized via POST api/account/codelogin (login using referral code), sender - user who makes this api request,
     *
     *     32 - User is initialized via POST api/account/samlredirect (when user logs in using saml sso), sender - created user via saml sso,
     *
     *     32 - User is registered via POST api/admin/users/register, sender - user who makes request to register new user,
     *
     *     32 - User/s are imported via POST api/admin/users/import-users, sender - user who makes this api request for import,
     *
     *     26 - Log created for alarm activation event in the specified group (this endpoint does not activate any alarm, just creates log for it) POST api/groups/{id}/activateAlarm, sender - user who sends this request,
     *
     *     26 - Log created for alarm activation event in the specified groups (this endpoint does not activate any alarm, just creates log for it) POST api/groups/activateAlarms, sender - user who sends this request,
     *
     *     27 - Log created for alarm deactivation event in the specified group (this endpoint does not deactivate any alarm, just creates log for it) POST api/groups/{id}/deactivateAlarm, sender - user who sends this request,
     *
     *     27 - Log created for alarm deactivation event in the specified groups (this endpoint does not deactivate any alarm, just creates log for it) POST api/groups/deactivateAlarms, sender - user who sends this request,
     *
     *     18 - Specified group added to the specified message via POST api/messages/{id}/addgroup/{groupId}, sender - user who makes this request,
     *
     *     5 - New checklist started when sending emergency message via POST api/messages, sender - user who makes this request,
     *
     *     19 - Specified message deleted, deleted message is of type GroupMessageType.Message(type 0) or any type other than type 9(GroupMessageType.HoldingStatement) and type 10(GroupMessageType.LogNote), sender - user who makes this request,
     *
     *     38 - Specified message deleted, deleted message is of type GroupMessageType.HoldingStatement(type 9), sender - user who makes this request,
     *
     *     41 - Specified message deleted, deleted message is of type GroupMessageType.LogNote(type 10), sender - user who makes this request,
     *
     *     10 - Specified reply is edited via POST api/messages/replies/{replyId}/edit, reply's message is of type 0 (GroupMessageType.Message) or any other type except type 9 (GroupMessageType.HoldingStatement) and type 10 (GroupMessageType.LogNote), sender - user who makes this request,
     *
     *     36 - Specified reply is edited via POST api/messages/replies/{replyId}/edit, reply's message is of type 9 (GroupMessageType.HoldingStatement), sender - user who makes this request,
     *
     *     39 - Specified reply is edited via POST api/messages/replies/{replyId}/edit, reply's message is of type 10 (GroupMessageType.LogNote), sender - user who makes this request,
     *
     *     20 - Specified reply is deleted via DELETE api/messages/{messageID}/replies/{replyId}, reply's message is of type 0 (GroupMessageType.Message) or any other type except type 9 (GroupMessageType.HoldingStatement) and type 10 (GroupMessageType.LogNote), sender - user who makes this request,
     *
     *     37 - Specified reply is deleted via DELETE api/messages/{messageID}/replies/{replyId}, reply's message is of type 9 (GroupMessageType.HoldingStatement), sender - user who makes this request,
     *
     *     40 - Specified reply is deleted via DELETE api/messages/{messageID}/replies/{replyId}, reply's message is of type 10 (GroupMessageType.LogNote), sender - user who makes this request.
     *
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['EmergencyReportBindingModel'];
          'application/json': components['schemas']['EmergencyReportBindingModel'];
          'text/json': components['schemas']['EmergencyReportBindingModel'];
          'application/*+json': components['schemas']['EmergencyReportBindingModel'];
          'application/xml': components['schemas']['EmergencyReportBindingModel'];
          'text/xml': components['schemas']['EmergencyReportBindingModel'];
          'application/*+xml': components['schemas']['EmergencyReportBindingModel'];
        };
      };
      responses: {
        /** @description Returns emergency report view model */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['EmergencyReportViewModel'];
            'application/json': components['schemas']['EmergencyReportViewModel'];
            'text/json': components['schemas']['EmergencyReportViewModel'];
            'application/xml': components['schemas']['EmergencyReportViewModel'];
            'text/xml': components['schemas']['EmergencyReportViewModel'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/EmergencyReportConfig': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Gets config for emergency tests for user */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns emergency report configuration view model */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['EmergencyReportConfigModel'];
            'application/json': components['schemas']['EmergencyReportConfigModel'];
            'text/json': components['schemas']['EmergencyReportConfigModel'];
            'application/xml': components['schemas']['EmergencyReportConfigModel'];
            'text/xml': components['schemas']['EmergencyReportConfigModel'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/MenuItems': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Endpoint to get menu items, user can access menu items enabled in its organization/s */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns menu item view models */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['MenuItemViewModel'][];
            'application/json': components['schemas']['MenuItemViewModel'][];
            'text/json': components['schemas']['MenuItemViewModel'][];
            'application/xml': components['schemas']['MenuItemViewModel'][];
            'text/xml': components['schemas']['MenuItemViewModel'][];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/AllMenuItems': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Endpoint to get all menu items. Only SuperAdmin can access. */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns menu item view models */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['MenuItemViewModel'][];
            'application/json': components['schemas']['MenuItemViewModel'][];
            'text/json': components['schemas']['MenuItemViewModel'][];
            'application/xml': components['schemas']['MenuItemViewModel'][];
            'text/xml': components['schemas']['MenuItemViewModel'][];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/EmergencyTypes': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Endpoint to create emergency type */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['EmergencyTypeBindingModel'];
          'application/json': components['schemas']['EmergencyTypeBindingModel'];
          'text/json': components['schemas']['EmergencyTypeBindingModel'];
          'application/*+json': components['schemas']['EmergencyTypeBindingModel'];
          'application/xml': components['schemas']['EmergencyTypeBindingModel'];
          'text/xml': components['schemas']['EmergencyTypeBindingModel'];
          'application/*+xml': components['schemas']['EmergencyTypeBindingModel'];
        };
      };
      responses: {
        /** @description Returns newly created emergency type's view model */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['EmergencyTypeViewModel'];
            'application/json': components['schemas']['EmergencyTypeViewModel'];
            'text/json': components['schemas']['EmergencyTypeViewModel'];
            'application/xml': components['schemas']['EmergencyTypeViewModel'];
            'text/xml': components['schemas']['EmergencyTypeViewModel'];
          };
        };
      };
    };
    /** Endpoint to delete specified emergency types */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': number[];
          'application/json': number[];
          'text/json': number[];
          'application/*+json': number[];
          'application/xml': number[];
          'text/xml': number[];
          'application/*+xml': number[];
        };
      };
      responses: {
        /** @description Returns nothing */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/EmergencyTypes/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Endpoint to edit the specified emergency type */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description emergency type id */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['EmergencyTypeBindingModel'];
          'application/json': components['schemas']['EmergencyTypeBindingModel'];
          'text/json': components['schemas']['EmergencyTypeBindingModel'];
          'application/*+json': components['schemas']['EmergencyTypeBindingModel'];
          'application/xml': components['schemas']['EmergencyTypeBindingModel'];
          'text/xml': components['schemas']['EmergencyTypeBindingModel'];
          'application/*+xml': components['schemas']['EmergencyTypeBindingModel'];
        };
      };
      responses: {
        /** @description Returns edited emergency type's view model */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['EmergencyTypeViewModel'];
            'application/json': components['schemas']['EmergencyTypeViewModel'];
            'text/json': components['schemas']['EmergencyTypeViewModel'];
            'application/xml': components['schemas']['EmergencyTypeViewModel'];
            'text/xml': components['schemas']['EmergencyTypeViewModel'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/EmergencyTypes/{id}/LinkToSubOrgGroups': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** This endpoint used by manager of parent organization or suborganization to link groups of suborganization to EmergencyTypes */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description emergency type id */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['LinkEmergencyTypeToGroupsBindingModel'];
          'application/json': components['schemas']['LinkEmergencyTypeToGroupsBindingModel'];
          'text/json': components['schemas']['LinkEmergencyTypeToGroupsBindingModel'];
          'application/*+json': components['schemas']['LinkEmergencyTypeToGroupsBindingModel'];
          'application/xml': components['schemas']['LinkEmergencyTypeToGroupsBindingModel'];
          'text/xml': components['schemas']['LinkEmergencyTypeToGroupsBindingModel'];
          'application/*+xml': components['schemas']['LinkEmergencyTypeToGroupsBindingModel'];
        };
      };
      responses: {
        /** @description Returns nothing */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/EmergencyTypes/{id}/AssignToSubOrganizations': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Endpoint used to link emergency type from parent organization to suborganizations. */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description emergency type id */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['AssignEmergencyTypeToSubOrganizationsBindingModel'];
          'application/json': components['schemas']['AssignEmergencyTypeToSubOrganizationsBindingModel'];
          'text/json': components['schemas']['AssignEmergencyTypeToSubOrganizationsBindingModel'];
          'application/*+json': components['schemas']['AssignEmergencyTypeToSubOrganizationsBindingModel'];
          'application/xml': components['schemas']['AssignEmergencyTypeToSubOrganizationsBindingModel'];
          'text/xml': components['schemas']['AssignEmergencyTypeToSubOrganizationsBindingModel'];
          'application/*+xml': components['schemas']['AssignEmergencyTypeToSubOrganizationsBindingModel'];
        };
      };
      responses: {
        /** @description Returns nothing */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/EmergencyTypes/{id}/Delete': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Endpoint to delete specified emergency type */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description emergency type id */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns nothing */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Roles/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Endpoint to edit the specified role. Only SuperAdmin can access this endpoint */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description role id */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['UserRoleBindingModel'];
          'application/json': components['schemas']['UserRoleBindingModel'];
          'text/json': components['schemas']['UserRoleBindingModel'];
          'application/*+json': components['schemas']['UserRoleBindingModel'];
          'application/xml': components['schemas']['UserRoleBindingModel'];
          'text/xml': components['schemas']['UserRoleBindingModel'];
          'application/*+xml': components['schemas']['UserRoleBindingModel'];
        };
      };
      responses: {
        /** @description Returns edite role's view model */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['UserRoleViewModel'];
            'application/json': components['schemas']['UserRoleViewModel'];
            'text/json': components['schemas']['UserRoleViewModel'];
            'application/xml': components['schemas']['UserRoleViewModel'];
            'text/xml': components['schemas']['UserRoleViewModel'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Documents/List': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get the list of available documents and folders */
    get: {
      parameters: {
        query?: {
          /** @description in case 'true' return only offline documents and folders */
          offline?: boolean;
          /** @description if specified, return only documents in the specified folder */
          folderId?: number;
          /** @description only user with 'DocumentsAdmin' permission (SuperAdmin role) can use this parameter. In case specified return documents where: user making the request
           *                 is member in the documents (organization OR its parent organization), document belongs to the group of the specified (organization OR its parent organization), document is in the specified folder that belongs to the specified (organization OR its parent organization) */
          organizationId?: number;
          /** @description filter documents and folder by their name in case insensitive manner */
          search?: string;
          /** @description in case specified return only documents that belong to the specified group */
          groupId?: number;
          /** @description this parameter used in pair with 'groupId'. By default 'true'. In case true return also documents that belong to the folders of the specified group */
          includeFolders?: boolean;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns view model containing documents and folders info and count */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['DocumentAndFoldersViewModel'];
            'application/json': components['schemas']['DocumentAndFoldersViewModel'];
            'text/json': components['schemas']['DocumentAndFoldersViewModel'];
            'application/xml': components['schemas']['DocumentAndFoldersViewModel'];
            'text/xml': components['schemas']['DocumentAndFoldersViewModel'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Documents/Add': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Uploading document, include file to request body */
    post: {
      parameters: {
        query?: {
          /** @description Should document be available offline? */
          offline?: boolean;
          /** @description ID of the group */
          groupId?: number;
          /** @description ID of the Organization (aka Account) */
          organizationId?: number;
          /** @description ID of the folder to put document in */
          folderId?: number;
          /** @description ID of the user to share document with */
          userId?: number;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns view model containing ids of posted document/s */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['PostDocumentsViewModel'];
            'application/json': components['schemas']['PostDocumentsViewModel'];
            'text/json': components['schemas']['PostDocumentsViewModel'];
            'application/xml': components['schemas']['PostDocumentsViewModel'];
            'text/xml': components['schemas']['PostDocumentsViewModel'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Documents/{id}/Share': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Endpoint to share the specified document.
     * @description OrganizationIds, UserIds parameter not used in this endpoint.
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description document id */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['DocumentShareBindingModel'];
          'application/json': components['schemas']['DocumentShareBindingModel'];
          'text/json': components['schemas']['DocumentShareBindingModel'];
          'application/*+json': components['schemas']['DocumentShareBindingModel'];
          'application/xml': components['schemas']['DocumentShareBindingModel'];
          'text/xml': components['schemas']['DocumentShareBindingModel'];
          'application/*+xml': components['schemas']['DocumentShareBindingModel'];
        };
      };
      responses: {
        /** @description Returns document view model */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['DocumentViewModelBrief'];
            'application/json': components['schemas']['DocumentViewModelBrief'];
            'text/json': components['schemas']['DocumentViewModelBrief'];
            'application/xml': components['schemas']['DocumentViewModelBrief'];
            'text/xml': components['schemas']['DocumentViewModelBrief'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Documents/{id}/Unshare': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Endpoint to unshare the specified document from groups and/or folders
     * @description GroupIds and FolderIds are used, ignore other parameters here
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description document id */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['DocumentShareBindingModel'];
          'application/json': components['schemas']['DocumentShareBindingModel'];
          'text/json': components['schemas']['DocumentShareBindingModel'];
          'application/*+json': components['schemas']['DocumentShareBindingModel'];
          'application/xml': components['schemas']['DocumentShareBindingModel'];
          'text/xml': components['schemas']['DocumentShareBindingModel'];
          'application/*+xml': components['schemas']['DocumentShareBindingModel'];
        };
      };
      responses: {
        /** @description Returns document view model */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['DocumentViewModelBrief'];
            'application/json': components['schemas']['DocumentViewModelBrief'];
            'text/json': components['schemas']['DocumentViewModelBrief'];
            'application/xml': components['schemas']['DocumentViewModelBrief'];
            'text/xml': components['schemas']['DocumentViewModelBrief'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Documents': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** Endpoint to delete the specified documents */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['DocumentDeleteBindingModel'];
          'application/json': components['schemas']['DocumentDeleteBindingModel'];
          'text/json': components['schemas']['DocumentDeleteBindingModel'];
          'application/*+json': components['schemas']['DocumentDeleteBindingModel'];
          'application/xml': components['schemas']['DocumentDeleteBindingModel'];
          'text/xml': components['schemas']['DocumentDeleteBindingModel'];
          'application/*+xml': components['schemas']['DocumentDeleteBindingModel'];
        };
      };
      responses: {
        /** @description Returns nothing */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Documents/Download': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Endpoint to download the specified document/s */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['DownloadBindingModel'];
          'application/json': components['schemas']['DownloadBindingModel'];
          'text/json': components['schemas']['DownloadBindingModel'];
          'application/*+json': components['schemas']['DownloadBindingModel'];
          'application/xml': components['schemas']['DownloadBindingModel'];
          'text/xml': components['schemas']['DownloadBindingModel'];
          'application/*+xml': components['schemas']['DownloadBindingModel'];
        };
      };
      responses: {
        /** @description Returns documents as zip file */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': string;
            'application/json': string;
            'text/json': string;
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Folders/Add': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Endpoint to create new folder */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['FolderBindingModel'];
          'application/json': components['schemas']['FolderBindingModel'];
          'text/json': components['schemas']['FolderBindingModel'];
          'application/*+json': components['schemas']['FolderBindingModel'];
          'application/xml': components['schemas']['FolderBindingModel'];
          'text/xml': components['schemas']['FolderBindingModel'];
          'application/*+xml': components['schemas']['FolderBindingModel'];
        };
      };
      responses: {
        /** @description Returns folder view model */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['FolderViewModel'];
            'application/json': components['schemas']['FolderViewModel'];
            'text/json': components['schemas']['FolderViewModel'];
            'application/xml': components['schemas']['FolderViewModel'];
            'text/xml': components['schemas']['FolderViewModel'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Folders/AddFolders': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Endpoint to create new folders */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['FolderBindingModel'][];
          'application/json': components['schemas']['FolderBindingModel'][];
          'text/json': components['schemas']['FolderBindingModel'][];
          'application/*+json': components['schemas']['FolderBindingModel'][];
          'application/xml': components['schemas']['FolderBindingModel'][];
          'text/xml': components['schemas']['FolderBindingModel'][];
          'application/*+xml': components['schemas']['FolderBindingModel'][];
        };
      };
      responses: {
        /** @description Returns folder view models */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['FolderViewModel'][];
            'application/json': components['schemas']['FolderViewModel'][];
            'text/json': components['schemas']['FolderViewModel'][];
            'application/xml': components['schemas']['FolderViewModel'][];
            'text/xml': components['schemas']['FolderViewModel'][];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Folders/{id}/Rename': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Endpoint to rename specified folder */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description folder id */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['FolderBindingModel'];
          'application/json': components['schemas']['FolderBindingModel'];
          'text/json': components['schemas']['FolderBindingModel'];
          'application/*+json': components['schemas']['FolderBindingModel'];
          'application/xml': components['schemas']['FolderBindingModel'];
          'text/xml': components['schemas']['FolderBindingModel'];
          'application/*+xml': components['schemas']['FolderBindingModel'];
        };
      };
      responses: {
        /** @description Returns folder view model */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['FolderViewModel'];
            'application/json': components['schemas']['FolderViewModel'];
            'text/json': components['schemas']['FolderViewModel'];
            'application/xml': components['schemas']['FolderViewModel'];
            'text/xml': components['schemas']['FolderViewModel'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Folders/{id}/Share': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Endpoint to share the specified folder with the specified group/s */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description folder id */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['DocumentShareBindingModel'];
          'application/json': components['schemas']['DocumentShareBindingModel'];
          'text/json': components['schemas']['DocumentShareBindingModel'];
          'application/*+json': components['schemas']['DocumentShareBindingModel'];
          'application/xml': components['schemas']['DocumentShareBindingModel'];
          'text/xml': components['schemas']['DocumentShareBindingModel'];
          'application/*+xml': components['schemas']['DocumentShareBindingModel'];
        };
      };
      responses: {
        /** @description Returns nothing */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Folders': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** Endpoint to delete the specified folder/s */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['FolderDeleteBindingModel'];
          'application/json': components['schemas']['FolderDeleteBindingModel'];
          'text/json': components['schemas']['FolderDeleteBindingModel'];
          'application/*+json': components['schemas']['FolderDeleteBindingModel'];
          'application/xml': components['schemas']['FolderDeleteBindingModel'];
          'text/xml': components['schemas']['FolderDeleteBindingModel'];
          'application/*+xml': components['schemas']['FolderDeleteBindingModel'];
        };
      };
      responses: {
        /** @description Returns nothing */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Documents/setoffline': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Allows to change folders and documents Offline status in bulk */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['SetDocumentOfflineBindingModel'][];
          'application/json': components['schemas']['SetDocumentOfflineBindingModel'][];
          'text/json': components['schemas']['SetDocumentOfflineBindingModel'][];
          'application/*+json': components['schemas']['SetDocumentOfflineBindingModel'][];
          'application/xml': components['schemas']['SetDocumentOfflineBindingModel'][];
          'text/xml': components['schemas']['SetDocumentOfflineBindingModel'][];
          'application/*+xml': components['schemas']['SetDocumentOfflineBindingModel'][];
        };
      };
      responses: {
        /** @description Returns nothing */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Tutorials/Create': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Endpoint to create new tutorial */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['TutorialBindingModel'];
          'application/json': components['schemas']['TutorialBindingModel'];
          'text/json': components['schemas']['TutorialBindingModel'];
          'application/*+json': components['schemas']['TutorialBindingModel'];
          'application/xml': components['schemas']['TutorialBindingModel'];
          'text/xml': components['schemas']['TutorialBindingModel'];
          'application/*+xml': components['schemas']['TutorialBindingModel'];
        };
      };
      responses: {
        /** @description Returns newly created tutorial's view model */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['TutorialViewModel'];
            'application/json': components['schemas']['TutorialViewModel'];
            'text/json': components['schemas']['TutorialViewModel'];
            'application/xml': components['schemas']['TutorialViewModel'];
            'text/xml': components['schemas']['TutorialViewModel'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Tutorials/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Endpoint to get the specified tutorial */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description tutorial id */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns tutorial view model */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['TutorialViewModel'];
            'application/json': components['schemas']['TutorialViewModel'];
            'text/json': components['schemas']['TutorialViewModel'];
            'application/xml': components['schemas']['TutorialViewModel'];
            'text/xml': components['schemas']['TutorialViewModel'];
          };
        };
      };
    };
    put?: never;
    /** Endpoint to edit the specified tutorial */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description tutorial id */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['TutorialBindingModel'];
          'application/json': components['schemas']['TutorialBindingModel'];
          'text/json': components['schemas']['TutorialBindingModel'];
          'application/*+json': components['schemas']['TutorialBindingModel'];
          'application/xml': components['schemas']['TutorialBindingModel'];
          'text/xml': components['schemas']['TutorialBindingModel'];
          'application/*+xml': components['schemas']['TutorialBindingModel'];
        };
      };
      responses: {
        /** @description Returns edited tutorial's view model */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['TutorialViewModel'];
            'application/json': components['schemas']['TutorialViewModel'];
            'text/json': components['schemas']['TutorialViewModel'];
            'application/xml': components['schemas']['TutorialViewModel'];
            'text/xml': components['schemas']['TutorialViewModel'];
          };
        };
      };
    };
    /** Endpoint to delete the specified tutorial */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description tutorial id */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns nothing */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Tutorials/All': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Endpoint to return all tutorials excluding content */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns tutorial view models */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['TutorialViewModel'][];
            'application/json': components['schemas']['TutorialViewModel'][];
            'text/json': components['schemas']['TutorialViewModel'][];
            'application/xml': components['schemas']['TutorialViewModel'][];
            'text/xml': components['schemas']['TutorialViewModel'][];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Tutorials/WebAdmin/{id}/{language}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Endpoint to get the specified web admin tutorial */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description tutorial id */
          id: number;
          /** @description language of tutorial content */
          language: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns tutorial's view model */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['TutorialViewModel'];
            'application/json': components['schemas']['TutorialViewModel'];
            'text/json': components['schemas']['TutorialViewModel'];
            'application/xml': components['schemas']['TutorialViewModel'];
            'text/xml': components['schemas']['TutorialViewModel'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Tutorials/WebAdminTutorials/{language}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Endpoint to get web admin tutorials that have content in the specified language */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          language: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns tutorial view models */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['TutorialViewModel'][];
            'application/json': components['schemas']['TutorialViewModel'][];
            'text/json': components['schemas']['TutorialViewModel'][];
            'application/xml': components['schemas']['TutorialViewModel'][];
            'text/xml': components['schemas']['TutorialViewModel'][];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Tutorials/Reorder': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Endpoint to reorder specified tutorials in bulk */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['EditTutorialSortOrderBindingModel'][];
          'application/json': components['schemas']['EditTutorialSortOrderBindingModel'][];
          'text/json': components['schemas']['EditTutorialSortOrderBindingModel'][];
          'application/*+json': components['schemas']['EditTutorialSortOrderBindingModel'][];
          'application/xml': components['schemas']['EditTutorialSortOrderBindingModel'][];
          'text/xml': components['schemas']['EditTutorialSortOrderBindingModel'][];
          'application/*+xml': components['schemas']['EditTutorialSortOrderBindingModel'][];
        };
      };
      responses: {
        /** @description Returns nothing */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Import/Summaries': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get user import summaries */
    get: {
      parameters: {
        query?: {
          organizationId?: number;
          limit?: number;
          skip?: number;
          /** @description optional value: 0 - SSO, 1 - FTP, 3 - API */
          source?: components['schemas']['ImportSource'];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns import summary report view model */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ImportSummaryReportViewModel'];
            'application/json': components['schemas']['ImportSummaryReportViewModel'];
            'text/json': components['schemas']['ImportSummaryReportViewModel'];
            'application/xml': components['schemas']['ImportSummaryReportViewModel'];
            'text/xml': components['schemas']['ImportSummaryReportViewModel'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Contacts': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Endpoint to get contacts */
    get: {
      parameters: {
        query?: {
          /** @description in case specified, return contacts from users parent organization */
          organizationId?: number;
          /** @description in case true, return global contacts not related to specific organization */
          global?: boolean;
          includeSuborganizations?: boolean;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns import summary report view model */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ContactViewModel'][];
            'application/json': components['schemas']['ContactViewModel'][];
            'text/json': components['schemas']['ContactViewModel'][];
            'application/xml': components['schemas']['ContactViewModel'][];
            'text/xml': components['schemas']['ContactViewModel'][];
          };
        };
      };
    };
    put?: never;
    /** Endpoint to create new contact */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['ContactBindingModel'];
          'application/json': components['schemas']['ContactBindingModel'];
          'text/json': components['schemas']['ContactBindingModel'];
          'application/*+json': components['schemas']['ContactBindingModel'];
          'application/xml': components['schemas']['ContactBindingModel'];
          'text/xml': components['schemas']['ContactBindingModel'];
          'application/*+xml': components['schemas']['ContactBindingModel'];
        };
      };
      responses: {
        /** @description Returns new contact's view model */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ContactViewModel'];
            'application/json': components['schemas']['ContactViewModel'];
            'text/json': components['schemas']['ContactViewModel'];
            'application/xml': components['schemas']['ContactViewModel'];
            'text/xml': components['schemas']['ContactViewModel'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Contacts/{contactId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Endpoint to edit the specified contact */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          contactId: number;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['ContactBindingModel'];
          'application/json': components['schemas']['ContactBindingModel'];
          'text/json': components['schemas']['ContactBindingModel'];
          'application/*+json': components['schemas']['ContactBindingModel'];
          'application/xml': components['schemas']['ContactBindingModel'];
          'text/xml': components['schemas']['ContactBindingModel'];
          'application/*+xml': components['schemas']['ContactBindingModel'];
        };
      };
      responses: {
        /** @description Returns edited contact's view model */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ContactViewModel'];
            'application/json': components['schemas']['ContactViewModel'];
            'text/json': components['schemas']['ContactViewModel'];
            'application/xml': components['schemas']['ContactViewModel'];
            'text/xml': components['schemas']['ContactViewModel'];
          };
        };
      };
    };
    /** Endpoint to delete the specified contact */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          contactId: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns nothing */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Notices': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Returns unread Notices for the user.Notices are similar to notifications. They are used in admin panel to inform users about: 1.Release notes: to show whats new in the released version of the application received by all users;
     *     2. When alarm is forced down to suborganization via POST api/admin/EmergencyTypes/{id}/AssignToSubOrganizations Notice is sent to administrators of the suborganization and its parent organization. */
    get: {
      parameters: {
        query?: {
          /** @description Pass true to get read notices */
          cleared?: boolean;
          /** @description skip the specified number of notices */
          skip?: number;
          /** @description take the specified number of notices */
          take?: number;
          /** @description filter notices by type */
          noticeTypes?: components['schemas']['NoticeType'][];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns new contact's view model */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['NoticeViewModel'][];
            'application/json': components['schemas']['NoticeViewModel'][];
            'text/json': components['schemas']['NoticeViewModel'][];
            'application/xml': components['schemas']['NoticeViewModel'][];
            'text/xml': components['schemas']['NoticeViewModel'][];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Notices/{noticeId}/Read': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Mark specified Notice as read */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          noticeId: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns nothing */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Notices/ByType/{noticeType}/ReadAll': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Mark all Notices of the specified type as read */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Notice type to filter */
          noticeType: components['schemas']['NoticeType'];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns nothing */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/SkolonSchools': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** This endpoint is used to retrieve Skolon schools using the provided OAuth code.
     *     It first sets the redirect URL for the Skolon client, using either the provided redirect URL or the default one from the configuration.
     *     Then, it obtains the access token using the provided OAuth code.
     *     If the access token is invalid, it returns an Unauthorized response with an error message.
     *     Otherwise, it retrieves the list of schools from the Skolon client and returns an Ok response with the schools. */
    get: {
      parameters: {
        query?: {
          /** @description The optional organization ID to return skolon schools that are attached to organization or its suborganizations. */
          organizationId?: number;
          /** @description The OAuth code used to obtain the access token. */
          oAuthCode?: string;
          /** @description The optional redirect URL for the Skolon client. */
          redirectUrl?: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['SkolonSchool'][];
            'application/json': components['schemas']['SkolonSchool'][];
            'text/json': components['schemas']['SkolonSchool'][];
            'application/xml': components['schemas']['SkolonSchool'][];
            'text/xml': components['schemas']['SkolonSchool'][];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Test': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Test endpoint to check whether api is responding in backend */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns view model which contains current utc time */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': unknown;
            'application/json': unknown;
            'text/json': unknown;
            'application/xml': unknown;
            'text/xml': unknown;
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/TestError': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Test endpoint that returns error */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/TestStatus': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Test endpoint  that returns 404 NotFound */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ProblemDetails'];
            'application/json': components['schemas']['ProblemDetails'];
            'text/json': components['schemas']['ProblemDetails'];
            'application/xml': components['schemas']['ProblemDetails'];
            'text/xml': components['schemas']['ProblemDetails'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/statistics': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** This endpoint is used to retrieve statistics for the admin dashboard.
     *     It returns the count of active organizations, sub-organizations, users, and inactive users. */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['AdminStatisticsViewModel'];
            'application/json': components['schemas']['AdminStatisticsViewModel'];
            'text/json': components['schemas']['AdminStatisticsViewModel'];
            'application/xml': components['schemas']['AdminStatisticsViewModel'];
            'text/xml': components['schemas']['AdminStatisticsViewModel'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/exceptions': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * This endpoint is used to retrieve front-end exceptions based on the provided search criteria.
     *     It allows filtering by date range, search keyword, and limiting the number of results returned.
     *     If no filter is provided, it returns the most recent exceptions up to the default limit.
     * @deprecated
     * @description The feature has been deleted. The endpoint has been kept for the backward compatibility.
     *                 It does nothing and always returns the empty array in the response.
     */
    get: {
      parameters: {
        query?: {
          /** @description Optional. The start date for filtering exceptions. */
          startDate?: string;
          /** @description Optional. The end date for filtering exceptions. */
          endDate?: string;
          /** @description Optional. The search keyword to filter exceptions by appName, appOs, appVersion, exceptionType or description. */
          search?: string;
          /** @description Optional. The maximum number of exceptions to return (default is 100). */
          limit?: number;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': unknown[];
            'application/json': unknown[];
            'text/json': unknown[];
            'application/xml': unknown[];
            'text/xml': unknown[];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Checklists': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Endpoint to create new checklist */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['PostChecklistBindingModel'];
          'application/json': components['schemas']['PostChecklistBindingModel'];
          'text/json': components['schemas']['PostChecklistBindingModel'];
          'application/*+json': components['schemas']['PostChecklistBindingModel'];
          'application/xml': components['schemas']['PostChecklistBindingModel'];
          'text/xml': components['schemas']['PostChecklistBindingModel'];
          'application/*+xml': components['schemas']['PostChecklistBindingModel'];
        };
      };
      responses: {
        /** @description Returns newly created checklist's view model */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ChecklistViewModel'];
            'application/json': components['schemas']['ChecklistViewModel'];
            'text/json': components['schemas']['ChecklistViewModel'];
            'application/xml': components['schemas']['ChecklistViewModel'];
            'text/xml': components['schemas']['ChecklistViewModel'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Checklists/{id}/ExportCsv': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Endpoint to export the specified checklist into csv/excel file */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description checklist id */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns csv/excel file */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': string;
            'application/json': string;
            'text/json': string;
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Checklists/{id}/ExportExcel': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Endpoint to export the specified checklist into csv/excel file */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description checklist id */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns csv/excel file */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': string;
            'application/json': string;
            'text/json': string;
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Checklists/Download': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Endpoint to export checklists in bulk into one excel file */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['DownloadChkecklistsBindingModel'];
          'application/json': components['schemas']['DownloadChkecklistsBindingModel'];
          'text/json': components['schemas']['DownloadChkecklistsBindingModel'];
          'application/*+json': components['schemas']['DownloadChkecklistsBindingModel'];
          'application/xml': components['schemas']['DownloadChkecklistsBindingModel'];
          'text/xml': components['schemas']['DownloadChkecklistsBindingModel'];
          'application/*+xml': components['schemas']['DownloadChkecklistsBindingModel'];
        };
      };
      responses: {
        /** @description Returns excel file containing checklists */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': string;
            'application/json': string;
            'text/json': string;
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Checklists/Import': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Import checklist/s from excel file. 'userIds' and 'groupIds' optional parameters used to share the imported checklist
     *     with specified users and groups. User making request needs to have access to those users and groups. */
    post: {
      parameters: {
        query?: {
          /** @description Optional parameter */
          organizationId?: number;
          userIds?: number[];
          groupIds?: number[];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns nothing */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/checklists/{checklistID}/items': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Endpoint to get items of the specified checklist */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          checklistID: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns checklist item view models */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ChecklistItemViewModel'][];
            'application/json': components['schemas']['ChecklistItemViewModel'][];
            'text/json': components['schemas']['ChecklistItemViewModel'][];
            'application/xml': components['schemas']['ChecklistItemViewModel'][];
            'text/xml': components['schemas']['ChecklistItemViewModel'][];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/checklists/{checklistID}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Endpoint to edit the specified checklist's shares */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          checklistID: number;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['ModifyChecklistSharesBindingModel'];
          'application/json': components['schemas']['ModifyChecklistSharesBindingModel'];
          'text/json': components['schemas']['ModifyChecklistSharesBindingModel'];
          'application/*+json': components['schemas']['ModifyChecklistSharesBindingModel'];
          'application/xml': components['schemas']['ModifyChecklistSharesBindingModel'];
          'text/xml': components['schemas']['ModifyChecklistSharesBindingModel'];
          'application/*+xml': components['schemas']['ModifyChecklistSharesBindingModel'];
        };
      };
      responses: {
        /** @description Returns nothing */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    /** Endpoint to delete the specified checklist */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          checklistID: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns nothing */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/checklists': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get checklists for the user in admin panel */
    get: {
      parameters: {
        query?: {
          /** @description optional parameter. In case specified user should have access to the specified organizations checklists */
          organizationID?: number;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns checklist view models */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ChecklistViewModel'][];
            'application/json': components['schemas']['ChecklistViewModel'][];
            'text/json': components['schemas']['ChecklistViewModel'][];
            'application/xml': components['schemas']['ChecklistViewModel'][];
            'text/xml': components['schemas']['ChecklistViewModel'][];
          };
        };
      };
    };
    put?: never;
    post?: never;
    /** Endpoint to delete the specified checklists */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': number[];
          'application/json': number[];
          'text/json': number[];
          'application/*+json': number[];
          'application/xml': number[];
          'text/xml': number[];
          'application/*+xml': number[];
        };
      };
      responses: {
        /** @description Returns nothing */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description No Content */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Checklists/{checklistID}/rename': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Endpoint to rename the specified checklist
     * @deprecated
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          checklistID: number;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['PostChecklistBindingModel'];
          'application/json': components['schemas']['PostChecklistBindingModel'];
          'text/json': components['schemas']['PostChecklistBindingModel'];
          'application/*+json': components['schemas']['PostChecklistBindingModel'];
          'application/xml': components['schemas']['PostChecklistBindingModel'];
          'text/xml': components['schemas']['PostChecklistBindingModel'];
          'application/*+xml': components['schemas']['PostChecklistBindingModel'];
        };
      };
      responses: {
        /** @description Returns nothing */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/checklists/{checklistID}/sharelive/{groupIDs}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Endpoint to share the specified checklist with the specified group/s
     * @deprecated
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          checklistID: number;
          groupIDs: string;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': unknown;
          'application/json': unknown;
          'text/json': unknown;
          'application/*+json': unknown;
          'application/xml': unknown;
          'text/xml': unknown;
          'application/*+xml': unknown;
        };
      };
      responses: {
        /** @description Returns nothing */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/checklists/{checklistID}/usershare': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Share checklist with specified users. User making request must be manager of the checklists organization (checklists organization/s retrieved from its user shares and group shares)
     * @deprecated
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          checklistID: number;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['ShareChecklistWithUsersBindingModel'];
          'application/json': components['schemas']['ShareChecklistWithUsersBindingModel'];
          'text/json': components['schemas']['ShareChecklistWithUsersBindingModel'];
          'application/*+json': components['schemas']['ShareChecklistWithUsersBindingModel'];
          'application/xml': components['schemas']['ShareChecklistWithUsersBindingModel'];
          'text/xml': components['schemas']['ShareChecklistWithUsersBindingModel'];
          'application/*+xml': components['schemas']['ShareChecklistWithUsersBindingModel'];
        };
      };
      responses: {
        /** @description Returns nothing */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/checklists/{checklistID}/unshare/{groupIDs}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Endpoint to unshare the specified checklist from the specified group/s
     * @deprecated
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          checklistID: number;
          groupIDs: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns nothing */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/checklists/{checklistID}/userunshare': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Unshare checklist from the specified users. User making request must be manager of the checklists organization (checklists organization/s retrieved from its user shares and group shares)
     * @deprecated
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          checklistID: number;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['ShareChecklistWithUsersBindingModel'];
          'application/json': components['schemas']['ShareChecklistWithUsersBindingModel'];
          'text/json': components['schemas']['ShareChecklistWithUsersBindingModel'];
          'application/*+json': components['schemas']['ShareChecklistWithUsersBindingModel'];
          'application/xml': components['schemas']['ShareChecklistWithUsersBindingModel'];
          'text/xml': components['schemas']['ShareChecklistWithUsersBindingModel'];
          'application/*+xml': components['schemas']['ShareChecklistWithUsersBindingModel'];
        };
      };
      responses: {
        /** @description Returns nothing */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/checklists/{checklistID}/edititems': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Endpoint to edit the specified checklist's items in bulk
     * @deprecated
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          checklistID: number;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['EditChecklistItemsBulkBindingModel'];
          'application/json': components['schemas']['EditChecklistItemsBulkBindingModel'];
          'text/json': components['schemas']['EditChecklistItemsBulkBindingModel'];
          'application/*+json': components['schemas']['EditChecklistItemsBulkBindingModel'];
          'application/xml': components['schemas']['EditChecklistItemsBulkBindingModel'];
          'text/xml': components['schemas']['EditChecklistItemsBulkBindingModel'];
          'application/*+xml': components['schemas']['EditChecklistItemsBulkBindingModel'];
        };
      };
      responses: {
        /** @description Returns nothing */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/checklists/{checklistID}/itemsAndName': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Endpoint to modify the specified checklist items and name */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          checklistId: number;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['ModifyChecklistNameAndItemsBindingModel'];
          'application/json': components['schemas']['ModifyChecklistNameAndItemsBindingModel'];
          'text/json': components['schemas']['ModifyChecklistNameAndItemsBindingModel'];
          'application/*+json': components['schemas']['ModifyChecklistNameAndItemsBindingModel'];
          'application/xml': components['schemas']['ModifyChecklistNameAndItemsBindingModel'];
          'text/xml': components['schemas']['ModifyChecklistNameAndItemsBindingModel'];
          'application/*+xml': components['schemas']['ModifyChecklistNameAndItemsBindingModel'];
        };
      };
      responses: {
        /** @description Returns nothing */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/checklists/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get the specified checklist by Id. Exactly the same logic as in GET api/admin/checklists for the single checklist with specified Id. */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description checklist id */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns checklist view model */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ChecklistViewModel'];
            'application/json': components['schemas']['ChecklistViewModel'];
            'text/json': components['schemas']['ChecklistViewModel'];
            'application/xml': components['schemas']['ChecklistViewModel'];
            'text/xml': components['schemas']['ChecklistViewModel'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Users/Import-users': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Endpoint to import users
     * @description "userImportOperation" - (0-create, 1-edit). Import summary generated after import.
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['UserBindingModelForImport'][];
          'application/json': components['schemas']['UserBindingModelForImport'][];
          'text/json': components['schemas']['UserBindingModelForImport'][];
          'application/*+json': components['schemas']['UserBindingModelForImport'][];
          'application/xml': components['schemas']['UserBindingModelForImport'][];
          'text/xml': components['schemas']['UserBindingModelForImport'][];
          'application/*+xml': components['schemas']['UserBindingModelForImport'][];
        };
      };
      responses: {
        /** @description Returns user import result view models */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['UserImportResult'][];
            'application/json': components['schemas']['UserImportResult'][];
            'text/json': components['schemas']['UserImportResult'][];
            'application/xml': components['schemas']['UserImportResult'][];
            'text/xml': components['schemas']['UserImportResult'][];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/check-users-availability-excel': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Endpoint to check users before import via xlsx file */
    post: {
      parameters: {
        query?: {
          /** @description Required parameter. It could be the main organization and/or sub-organizations of the same main organization. */
          organizationIds?: number[];
          /** @description Optional parameter. It could be groups that belong to an organization with IDs from organizationIds. */
          groupIds?: number[];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description Required parameter. MS Excel file with users data. */
      requestBody?: {
        content: {
          'multipart/form-data': {
            /** Format: binary */
            file?: string;
          };
        };
      };
      responses: {
        /** @description Returns view model containing new users, users to edit, users with errors */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['UserImportResponse'];
            'application/json': components['schemas']['UserImportResponse'];
            'text/json': components['schemas']['UserImportResponse'];
            'application/xml': components['schemas']['UserImportResponse'];
            'text/xml': components['schemas']['UserImportResponse'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/check-users-availability': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Endpoint to check users before import */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description info about users to import */
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['UserImportRequest'];
          'application/json': components['schemas']['UserImportRequest'];
          'text/json': components['schemas']['UserImportRequest'];
          'application/*+json': components['schemas']['UserImportRequest'];
          'application/xml': components['schemas']['UserImportRequest'];
          'text/xml': components['schemas']['UserImportRequest'];
          'application/*+xml': components['schemas']['UserImportRequest'];
        };
      };
      responses: {
        /** @description Returns view model containing new users, users to edit, users with errors */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['UserImportResponse'];
            'application/json': components['schemas']['UserImportResponse'];
            'text/json': components['schemas']['UserImportResponse'];
            'application/xml': components['schemas']['UserImportResponse'];
            'text/xml': components['schemas']['UserImportResponse'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Organizations/{organizationId}/meetingRooms': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          organizationId: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['MeetingRoomViewModel'][];
            'application/json': components['schemas']['MeetingRoomViewModel'][];
            'text/json': components['schemas']['MeetingRoomViewModel'][];
            'application/xml': components['schemas']['MeetingRoomViewModel'][];
            'text/xml': components['schemas']['MeetingRoomViewModel'][];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ErrorMessageViewModel'];
            'application/json': components['schemas']['ErrorMessageViewModel'];
            'text/json': components['schemas']['ErrorMessageViewModel'];
            'application/xml': components['schemas']['ErrorMessageViewModel'];
            'text/xml': components['schemas']['ErrorMessageViewModel'];
          };
        };
      };
    };
    put?: never;
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          organizationId: number;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['MeetingRoomCreationModel'];
          'application/json': components['schemas']['MeetingRoomCreationModel'];
          'text/json': components['schemas']['MeetingRoomCreationModel'];
          'application/*+json': components['schemas']['MeetingRoomCreationModel'];
          'application/xml': components['schemas']['MeetingRoomCreationModel'];
          'text/xml': components['schemas']['MeetingRoomCreationModel'];
          'application/*+xml': components['schemas']['MeetingRoomCreationModel'];
        };
      };
      responses: {
        /** @description Created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['MeetingRoomViewModel'];
            'application/json': components['schemas']['MeetingRoomViewModel'];
            'text/json': components['schemas']['MeetingRoomViewModel'];
            'application/xml': components['schemas']['MeetingRoomViewModel'];
            'text/xml': components['schemas']['MeetingRoomViewModel'];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ApplicationValidationResult'];
            'application/json': components['schemas']['ApplicationValidationResult'];
            'text/json': components['schemas']['ApplicationValidationResult'];
            'application/xml': components['schemas']['ApplicationValidationResult'];
            'text/xml': components['schemas']['ApplicationValidationResult'];
          };
        };
        /** @description Unauthorized */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Admin/Organizations/{organizationId}/meetingRooms/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          organizationId: number;
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['MeetingRoomViewModel'];
            'application/json': components['schemas']['MeetingRoomViewModel'];
            'text/json': components['schemas']['MeetingRoomViewModel'];
            'application/xml': components['schemas']['MeetingRoomViewModel'];
            'text/xml': components['schemas']['MeetingRoomViewModel'];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ErrorMessageViewModel'];
            'application/json': components['schemas']['ErrorMessageViewModel'];
            'text/json': components['schemas']['ErrorMessageViewModel'];
            'application/xml': components['schemas']['ErrorMessageViewModel'];
            'text/xml': components['schemas']['ErrorMessageViewModel'];
          };
        };
      };
    };
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          organizationId: number;
          id: number;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['MeetingRoomEditionModel'];
          'application/json': components['schemas']['MeetingRoomEditionModel'];
          'text/json': components['schemas']['MeetingRoomEditionModel'];
          'application/*+json': components['schemas']['MeetingRoomEditionModel'];
          'application/xml': components['schemas']['MeetingRoomEditionModel'];
          'text/xml': components['schemas']['MeetingRoomEditionModel'];
          'application/*+xml': components['schemas']['MeetingRoomEditionModel'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['MeetingRoomViewModel'];
            'application/json': components['schemas']['MeetingRoomViewModel'];
            'text/json': components['schemas']['MeetingRoomViewModel'];
            'application/xml': components['schemas']['MeetingRoomViewModel'];
            'text/xml': components['schemas']['MeetingRoomViewModel'];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ErrorMessageViewModel'][];
            'application/json': components['schemas']['ErrorMessageViewModel'][];
            'text/json': components['schemas']['ErrorMessageViewModel'][];
            'application/xml': components['schemas']['ErrorMessageViewModel'][];
            'text/xml': components['schemas']['ErrorMessageViewModel'][];
          };
        };
      };
    };
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Checklists': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Endpoint to return checklists */
    get: {
      parameters: {
        query?: {
          /** @description search by name of checklist */
          search?: string;
          /** @description skip the specified number of checklists */
          skip?: number;
          /** @description return up to the specified number of checklists */
          limit?: number;
          /** @description possible values: "name", "nameDesc", "createdDate", "createdDateDesc", "startedDate", "startedDateDesc" - sort using the specified parameters in asc and desc order */
          sort?: string;
          /** @description possible values: 0 - active, 1 - templates, 2 - ended, used to filter out by checklist type. */
          type?: number;
          /** @description If true will return checklists created by user, making request (default - true) */
          my?: boolean;
          /** @description If true will return checklists created by other users (default - true) */
          others?: boolean;
          /** @description If true will return checklists shared with user making request (default - true) */
          shared?: boolean;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns view models of checklists */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ChecklistViewModel'][];
            'application/json': components['schemas']['ChecklistViewModel'][];
            'text/json': components['schemas']['ChecklistViewModel'][];
            'application/xml': components['schemas']['ChecklistViewModel'][];
            'text/xml': components['schemas']['ChecklistViewModel'][];
          };
        };
      };
    };
    put?: never;
    /** Endpoint to create new checklist */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['PostChecklistBindingModel'];
          'application/json': components['schemas']['PostChecklistBindingModel'];
          'text/json': components['schemas']['PostChecklistBindingModel'];
          'application/*+json': components['schemas']['PostChecklistBindingModel'];
          'application/xml': components['schemas']['PostChecklistBindingModel'];
          'text/xml': components['schemas']['PostChecklistBindingModel'];
          'application/*+xml': components['schemas']['PostChecklistBindingModel'];
        };
      };
      responses: {
        /** @description Returns newly created checklist view model */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ChecklistViewModel'];
            'application/json': components['schemas']['ChecklistViewModel'];
            'text/json': components['schemas']['ChecklistViewModel'];
            'application/xml': components['schemas']['ChecklistViewModel'];
            'text/xml': components['schemas']['ChecklistViewModel'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Checklists/Summary': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Return checklists summary, the same logic as in GET api/checklists */
    get: {
      parameters: {
        query?: {
          /** @description search by name of checklist */
          search?: string;
          /** @description possible values: 0 - active, 1 - templates, 2 - ended, used to filter out by checklist type. */
          type?: number;
          /** @description If true will return checklists created by user, making request (default - true) */
          my?: boolean;
          /** @description If true will return checklists created by other users (default - true) */
          others?: boolean;
          /** @description If true will return checklists shared with user making request (default - true) */
          shared?: boolean;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns checklist summary view model */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ChecklistSummaryViewModel'];
            'application/json': components['schemas']['ChecklistSummaryViewModel'];
            'text/json': components['schemas']['ChecklistSummaryViewModel'];
            'application/xml': components['schemas']['ChecklistSummaryViewModel'];
            'text/xml': components['schemas']['ChecklistSummaryViewModel'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Checklists/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Returns the specified checklist */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description checklist id */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns checklist summary view model */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ChecklistViewModel'];
            'application/json': components['schemas']['ChecklistViewModel'];
            'text/json': components['schemas']['ChecklistViewModel'];
            'application/xml': components['schemas']['ChecklistViewModel'];
            'text/xml': components['schemas']['ChecklistViewModel'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    /** Endpoint to delete the specified checklist */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description checklist id */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns nothing */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Checklists/{checklistID}/items': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Returns the items of the specified checklist */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          checklistID: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns checklist item view models */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ChecklistItemViewModel'][];
            'application/json': components['schemas']['ChecklistItemViewModel'][];
            'text/json': components['schemas']['ChecklistItemViewModel'][];
            'application/xml': components['schemas']['ChecklistItemViewModel'][];
            'text/xml': components['schemas']['ChecklistItemViewModel'][];
          };
        };
      };
    };
    put?: never;
    /** Create new items in the specified checklist */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          checklistID: number;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['PostChecklistItemBindingModel'][];
          'application/json': components['schemas']['PostChecklistItemBindingModel'][];
          'text/json': components['schemas']['PostChecklistItemBindingModel'][];
          'application/*+json': components['schemas']['PostChecklistItemBindingModel'][];
          'application/xml': components['schemas']['PostChecklistItemBindingModel'][];
          'text/xml': components['schemas']['PostChecklistItemBindingModel'][];
          'application/*+xml': components['schemas']['PostChecklistItemBindingModel'][];
        };
      };
      responses: {
        /** @description Returns checklist item view models */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ChecklistItemViewModel'][];
            'application/json': components['schemas']['ChecklistItemViewModel'][];
            'text/json': components['schemas']['ChecklistItemViewModel'][];
            'application/xml': components['schemas']['ChecklistItemViewModel'][];
            'text/xml': components['schemas']['ChecklistItemViewModel'][];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Checklists/{checklistID}/share/{groupID}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** @deprecated */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          checklistID: number;
          groupID: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Checklists/{checklistID}/sharelive/{groupIdString}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Shares the specified checklist with the specified groups */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          checklistID: number;
          groupIdString: string;
        };
        cookie?: never;
      };
      /** @description messageId(optional parameter) can be passed using this */
      requestBody?: {
        content: {
          'application/json-patch+json': unknown;
          'application/json': unknown;
          'text/json': unknown;
          'application/*+json': unknown;
          'application/xml': unknown;
          'text/xml': unknown;
          'application/*+xml': unknown;
        };
      };
      responses: {
        /** @description Returns nothing */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Checklists/{checklistID}/unshare/{groupIdString}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** @deprecated */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          checklistID: number;
          groupIdString: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Checklists/{checklistID}/sharelivewithusers': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Sharing live checklists with users */
    post: {
      parameters: {
        query?: {
          /** @description Message id (optional) */
          messageId?: number;
        };
        header?: never;
        path: {
          /** @description Checklist id */
          checklistID: number;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['ShareChecklistWithUsersBindingModel'];
          'application/json': components['schemas']['ShareChecklistWithUsersBindingModel'];
          'text/json': components['schemas']['ShareChecklistWithUsersBindingModel'];
          'application/*+json': components['schemas']['ShareChecklistWithUsersBindingModel'];
          'application/xml': components['schemas']['ShareChecklistWithUsersBindingModel'];
          'text/xml': components['schemas']['ShareChecklistWithUsersBindingModel'];
          'application/*+xml': components['schemas']['ShareChecklistWithUsersBindingModel'];
        };
      };
      responses: {
        /** @description Returns nothing */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Checklists/{checklistID}/unsharewithusers': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Unshares specified checklist with specified users */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          checklistID: number;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['ShareChecklistWithUsersBindingModel'];
          'application/json': components['schemas']['ShareChecklistWithUsersBindingModel'];
          'text/json': components['schemas']['ShareChecklistWithUsersBindingModel'];
          'application/*+json': components['schemas']['ShareChecklistWithUsersBindingModel'];
          'application/xml': components['schemas']['ShareChecklistWithUsersBindingModel'];
          'text/xml': components['schemas']['ShareChecklistWithUsersBindingModel'];
          'application/*+xml': components['schemas']['ShareChecklistWithUsersBindingModel'];
        };
      };
      responses: {
        /** @description Returns nothing */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Checklists/{checklistID}/sharereadonly': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** @deprecated */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          checklistID: number;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['ShareChecklistReadonlyBindingModel'];
          'application/json': components['schemas']['ShareChecklistReadonlyBindingModel'];
          'text/json': components['schemas']['ShareChecklistReadonlyBindingModel'];
          'application/*+json': components['schemas']['ShareChecklistReadonlyBindingModel'];
          'application/xml': components['schemas']['ShareChecklistReadonlyBindingModel'];
          'text/xml': components['schemas']['ShareChecklistReadonlyBindingModel'];
          'application/*+xml': components['schemas']['ShareChecklistReadonlyBindingModel'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Checklists/{checklistID}/start/{groupIDs}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Starts specified checklist with specified groups */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          checklistID: number;
          groupIDs: string;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['StartChecklistItemBindingModel'];
          'application/json': components['schemas']['StartChecklistItemBindingModel'];
          'text/json': components['schemas']['StartChecklistItemBindingModel'];
          'application/*+json': components['schemas']['StartChecklistItemBindingModel'];
          'application/xml': components['schemas']['StartChecklistItemBindingModel'];
          'text/xml': components['schemas']['StartChecklistItemBindingModel'];
          'application/*+xml': components['schemas']['StartChecklistItemBindingModel'];
        };
      };
      responses: {
        /** @description Returns started checklist view model */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ChecklistViewModel'];
            'application/json': components['schemas']['ChecklistViewModel'];
            'text/json': components['schemas']['ChecklistViewModel'];
            'application/xml': components['schemas']['ChecklistViewModel'];
            'text/xml': components['schemas']['ChecklistViewModel'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Checklists/{checklistID}/startWithUsersAndGroups': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Endpoint to start checklist with users and groups. The checklist must be already shared with the specified users or the specified users must be members of the groups that the checklist is already shared with. */
    post: {
      parameters: {
        query?: {
          skipMessage?: boolean;
        };
        header?: never;
        path: {
          checklistID: number;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['StartChecklistWithUsersAndGroupsBindingModel'];
          'application/json': components['schemas']['StartChecklistWithUsersAndGroupsBindingModel'];
          'text/json': components['schemas']['StartChecklistWithUsersAndGroupsBindingModel'];
          'application/*+json': components['schemas']['StartChecklistWithUsersAndGroupsBindingModel'];
          'application/xml': components['schemas']['StartChecklistWithUsersAndGroupsBindingModel'];
          'text/xml': components['schemas']['StartChecklistWithUsersAndGroupsBindingModel'];
          'application/*+xml': components['schemas']['StartChecklistWithUsersAndGroupsBindingModel'];
        };
      };
      responses: {
        /** @description Returns started checklist view model */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ChecklistViewModel'];
            'application/json': components['schemas']['ChecklistViewModel'];
            'text/json': components['schemas']['ChecklistViewModel'];
            'application/xml': components['schemas']['ChecklistViewModel'];
            'text/xml': components['schemas']['ChecklistViewModel'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Checklists/{checklistID}/end': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Ends the specified checklist */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          checklistID: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns nothing */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Checklists/{checklistID}/reactivate': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Reactivates the ended checklist. The checklist must be ended within the last 14 days. */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          checklistID: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns nothing */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Checklists/{checklistID}/items/reset': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** @deprecated */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          checklistID: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Checklists/{checklistID}/items/{itemID}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @deprecated */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          checklistID: number;
          itemID: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    /** Edits the specified checklist item */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          checklistID: number;
          itemID: number;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['EditChecklistItemBindingModel'];
          'application/json': components['schemas']['EditChecklistItemBindingModel'];
          'text/json': components['schemas']['EditChecklistItemBindingModel'];
          'application/*+json': components['schemas']['EditChecklistItemBindingModel'];
          'application/xml': components['schemas']['EditChecklistItemBindingModel'];
          'text/xml': components['schemas']['EditChecklistItemBindingModel'];
          'application/*+xml': components['schemas']['EditChecklistItemBindingModel'];
        };
      };
      responses: {
        /** @description Returns checklist item view models */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ChecklistItemViewModel'][];
            'application/json': components['schemas']['ChecklistItemViewModel'][];
            'text/json': components['schemas']['ChecklistItemViewModel'][];
            'application/xml': components['schemas']['ChecklistItemViewModel'][];
            'text/xml': components['schemas']['ChecklistItemViewModel'][];
          };
        };
      };
    };
    /** @deprecated */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          checklistID: number;
          itemID: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Checklists/{checklistID}/edititems': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Edits the specified checklist items in bulk */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          checklistID: number;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['EditChecklistItemsBulkBindingModel'];
          'application/json': components['schemas']['EditChecklistItemsBulkBindingModel'];
          'text/json': components['schemas']['EditChecklistItemsBulkBindingModel'];
          'application/*+json': components['schemas']['EditChecklistItemsBulkBindingModel'];
          'application/xml': components['schemas']['EditChecklistItemsBulkBindingModel'];
          'text/xml': components['schemas']['EditChecklistItemsBulkBindingModel'];
          'application/*+xml': components['schemas']['EditChecklistItemsBulkBindingModel'];
        };
      };
      responses: {
        /** @description Returns nothing */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Checklists/{checklistID}/items/{itemID}/swap/{otherItemID}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** @deprecated */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          checklistID: number;
          itemID: number;
          otherItemID: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Checklists/{checklistID}/rename': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Renames the specified checklist */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          checklistID: number;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['PostChecklistBindingModel'];
          'application/json': components['schemas']['PostChecklistBindingModel'];
          'text/json': components['schemas']['PostChecklistBindingModel'];
          'application/*+json': components['schemas']['PostChecklistBindingModel'];
          'application/xml': components['schemas']['PostChecklistBindingModel'];
          'text/xml': components['schemas']['PostChecklistBindingModel'];
          'application/*+xml': components['schemas']['PostChecklistBindingModel'];
        };
      };
      responses: {
        /** @description Returns nothing */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Checklists/{checklistID}/items/{itemID}/comment': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Adding regular comment to checklist item neither marking it complete nor incomplete */
    post: operations['PostComment'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Checklists/{checklistID}/items/{itemID}/check': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Marking checklist item as complete
     * @deprecated
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          checkListID: number;
          itemID: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Checklists/{checklistID}/items/{itemID}/uncheck': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Marking checklist item as incomplete
     * @deprecated
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          checkListID: number;
          itemID: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/versions': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Returns version information regarding clients: minimum version, latest version, latest desktop app version */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns client version view model */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ClientVersionViewModel'];
            'application/json': components['schemas']['ClientVersionViewModel'];
            'text/json': components['schemas']['ClientVersionViewModel'];
            'application/xml': components['schemas']['ClientVersionViewModel'];
            'text/xml': components['schemas']['ClientVersionViewModel'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Devices': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Create new device */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['Device'];
          'application/json': components['schemas']['Device'];
          'text/json': components['schemas']['Device'];
          'application/*+json': components['schemas']['Device'];
          'application/xml': components['schemas']['Device'];
          'text/xml': components['schemas']['Device'];
          'application/*+xml': components['schemas']['Device'];
        };
      };
      responses: {
        /** @description Returns new created device's model */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['Device'];
            'application/json': components['schemas']['Device'];
            'text/json': components['schemas']['Device'];
            'application/xml': components['schemas']['Device'];
            'text/xml': components['schemas']['Device'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Devices/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** Delete the specified device. This endpoint does not require authentication. */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description device id */
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns client version view model */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['Device'];
            'application/json': components['schemas']['Device'];
            'text/json': components['schemas']['Device'];
            'application/xml': components['schemas']['Device'];
            'text/xml': components['schemas']['Device'];
          };
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Exceptions': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * This endpoint is used to log front-end exceptions sent from the client-side.
     *     It receives the front-end exception data and publishes it to a message queue
     *     for further processing. The message queue is subscribed by a backend service
     *     responsible for handling front-end exceptions.
     * @deprecated
     * @description The feature has been deleted. The endpoint has been kept for the backward compatibility.
     *                 It does nothing and always returns the 200 OK response.
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description The data representing the front-end exception. */
      requestBody?: {
        content: {
          'application/json-patch+json': unknown;
          'application/json': unknown;
          'text/json': unknown;
          'application/*+json': unknown;
          'application/xml': unknown;
          'text/xml': unknown;
          'application/*+xml': unknown;
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/ExternalContacts': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Returns external contact lists for users parent organization (such feature exists only for parent organizations) */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns contact lists view models */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ExternalContactListDetailedViewModel'][];
            'application/json': components['schemas']['ExternalContactListDetailedViewModel'][];
            'text/json': components['schemas']['ExternalContactListDetailedViewModel'][];
            'application/xml': components['schemas']['ExternalContactListDetailedViewModel'][];
            'text/xml': components['schemas']['ExternalContactListDetailedViewModel'][];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/ExternalContacts/SendMessage': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Sends message to specified contact list/s (one contact list contains many contacts)
     *     <remarks>"sendMethods" parameter possible values are: (0-email, 1-sms, 2-voice call)</remarks> */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['MessageToExternalContactListsBindingModel'];
          'application/json': components['schemas']['MessageToExternalContactListsBindingModel'];
          'text/json': components['schemas']['MessageToExternalContactListsBindingModel'];
          'application/*+json': components['schemas']['MessageToExternalContactListsBindingModel'];
          'application/xml': components['schemas']['MessageToExternalContactListsBindingModel'];
          'text/xml': components['schemas']['MessageToExternalContactListsBindingModel'];
          'application/*+xml': components['schemas']['MessageToExternalContactListsBindingModel'];
        };
      };
      responses: {
        /** @description Returns nothing */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/ExternalContacts/GetMessages': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Returns messages sent for external contact lists in users parent organization */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns message view models */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['MessageToExternalContactListViewModel'][];
            'application/json': components['schemas']['MessageToExternalContactListViewModel'][];
            'text/json': components['schemas']['MessageToExternalContactListViewModel'][];
            'application/xml': components['schemas']['MessageToExternalContactListViewModel'][];
            'text/xml': components['schemas']['MessageToExternalContactListViewModel'][];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/ExternalContacts/Message/{messageId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Returns the specified message */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          messageId: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns message view models */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['MessageToExternalContactListWithRecipientsViewModel'];
            'application/json': components['schemas']['MessageToExternalContactListWithRecipientsViewModel'];
            'text/json': components['schemas']['MessageToExternalContactListWithRecipientsViewModel'];
            'application/xml': components['schemas']['MessageToExternalContactListWithRecipientsViewModel'];
            'text/xml': components['schemas']['MessageToExternalContactListWithRecipientsViewModel'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/ExternalContacts/ConfirmMessageDelivery/{token}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Endpoint to confirm that message was received using token. This endpoint does not require authorization. */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          token: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns nothing */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/ExternalContacts/CalculateSmsLength': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Endpoint to calculate sms message length */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns text and token length */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/ExternalContacts/GetTextTemplates': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Returns text templates used to send messages to external contacts. Those templates belong to parent organization of user */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns text templates view models */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['TextTemplateForExternalContactsViewModel'][];
            'application/json': components['schemas']['TextTemplateForExternalContactsViewModel'][];
            'text/json': components['schemas']['TextTemplateForExternalContactsViewModel'][];
            'application/xml': components['schemas']['TextTemplateForExternalContactsViewModel'][];
            'text/xml': components['schemas']['TextTemplateForExternalContactsViewModel'][];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Groups': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get groups for user */
    get: {
      parameters: {
        query?: {
          search?: string;
          /** @description skip the specified number of elements */
          skip?: number;
          /** @description take the specified number of elements */
          limit?: number;
          /** @description used in pair with "longitude" to filter out groups by location */
          latitude?: number;
          /** @description used in pair with "latitude" to filter out groups by location */
          longitude?: number;
          /** @description sort groups by organizations menuitem.In case "menuitem" = "documents" passed: return groups from users managed organizations also, exclude groups of type 3 and 4. */
          menuitem?: string;
          /** @description filter out groups without minimal number of members */
          minGroupMembersCount?: number;
          /** @description filter out groups which user is or not a member */
          member?: boolean;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns groups view models */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['GroupViewModelExtended'][];
            'application/json': components['schemas']['GroupViewModelExtended'][];
            'text/json': components['schemas']['GroupViewModelExtended'][];
            'application/xml': components['schemas']['GroupViewModelExtended'][];
            'text/xml': components['schemas']['GroupViewModelExtended'][];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Groups/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Returns the specified group */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description group id */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns group view model */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['GroupViewModelExtended'];
            'application/json': components['schemas']['GroupViewModelExtended'];
            'text/json': components['schemas']['GroupViewModelExtended'];
            'application/xml': components['schemas']['GroupViewModelExtended'];
            'text/xml': components['schemas']['GroupViewModelExtended'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Groups/{id}/members': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Returns members of the specified group */
    get: {
      parameters: {
        query?: {
          /** @description skip the specified number of elements */
          skip?: number;
          /** @description take the specified number of elements */
          limit?: number;
        };
        header?: never;
        path: {
          /** @description group id */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns group members view models */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['GroupMemberViewModel'][];
            'application/json': components['schemas']['GroupMemberViewModel'][];
            'text/json': components['schemas']['GroupMemberViewModel'][];
            'application/xml': components['schemas']['GroupMemberViewModel'][];
            'text/xml': components['schemas']['GroupMemberViewModel'][];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Groups/{id}/locations': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Returns locations of the specified group */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description group id */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns locations view models */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['LocationViewModel'][];
            'application/json': components['schemas']['LocationViewModel'][];
            'text/json': components['schemas']['LocationViewModel'][];
            'application/xml': components['schemas']['LocationViewModel'][];
            'text/xml': components['schemas']['LocationViewModel'][];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Groups/{id}/activateAlarm': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Endpoint to create log for alarm activation event in the specified group (this endpoint does not activate any alarm, just creates log for it) */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description group id */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['GroupAlarmBindingModel'];
          'application/json': components['schemas']['GroupAlarmBindingModel'];
          'text/json': components['schemas']['GroupAlarmBindingModel'];
          'application/*+json': components['schemas']['GroupAlarmBindingModel'];
          'application/xml': components['schemas']['GroupAlarmBindingModel'];
          'text/xml': components['schemas']['GroupAlarmBindingModel'];
          'application/*+xml': components['schemas']['GroupAlarmBindingModel'];
        };
      };
      responses: {
        /** @description Returns nothing */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Groups/{id}/deactivateAlarm': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Endpoint to create log for alarm deactivation event in the specified group (this endpoint does not deactivate any alarm, just creates log for it) */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description group id */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns nothing */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Groups/activateAlarms': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Endpoint to create log for alarm activation event in the specified groups (this endpoint does not activate any alarm, just creates log for it) */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['GroupAlarmBindingModel'];
          'application/json': components['schemas']['GroupAlarmBindingModel'];
          'text/json': components['schemas']['GroupAlarmBindingModel'];
          'application/*+json': components['schemas']['GroupAlarmBindingModel'];
          'application/xml': components['schemas']['GroupAlarmBindingModel'];
          'text/xml': components['schemas']['GroupAlarmBindingModel'];
          'application/*+xml': components['schemas']['GroupAlarmBindingModel'];
        };
      };
      responses: {
        /** @description Returns nothing */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Groups/deactivateAlarms': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Endpoint to create log for alarm deactivation event in the specified groups (this endpoint does not deactivate any alarm, just creates log for it) */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['GroupAlarmBindingModel'];
          'application/json': components['schemas']['GroupAlarmBindingModel'];
          'text/json': components['schemas']['GroupAlarmBindingModel'];
          'application/*+json': components['schemas']['GroupAlarmBindingModel'];
          'application/xml': components['schemas']['GroupAlarmBindingModel'];
          'text/xml': components['schemas']['GroupAlarmBindingModel'];
          'application/*+xml': components['schemas']['GroupAlarmBindingModel'];
        };
      };
      responses: {
        /** @description Returns nothing */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Import/Skolon': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Endpoint for Skolon import */
    post: {
      parameters: {
        query?: {
          /** @description The 'no-Skolon' property.
           *     If set to false or null, trigger old approach where the import load of all users from Skolon.
           *     If set to true, trigger the import that is based on the versionTag approach. */
          useVersionTagApproach?: boolean;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['SkolonUpdateRequest'];
          'application/json': components['schemas']['SkolonUpdateRequest'];
          'text/json': components['schemas']['SkolonUpdateRequest'];
          'application/*+json': components['schemas']['SkolonUpdateRequest'];
          'application/xml': components['schemas']['SkolonUpdateRequest'];
          'text/xml': components['schemas']['SkolonUpdateRequest'];
          'application/*+xml': components['schemas']['SkolonUpdateRequest'];
        };
      };
      responses: {
        /** @description Returns just message that import started */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Import/Organizations': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Process organizations for import */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns nothing */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Locations': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get locations */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns location view models */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['LocationViewModel'][];
            'application/json': components['schemas']['LocationViewModel'][];
            'text/json': components['schemas']['LocationViewModel'][];
            'application/xml': components['schemas']['LocationViewModel'][];
            'text/xml': components['schemas']['LocationViewModel'][];
          };
        };
      };
    };
    put?: never;
    /** Create new location */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['CreateLocationBindingModel'];
          'application/json': components['schemas']['CreateLocationBindingModel'];
          'text/json': components['schemas']['CreateLocationBindingModel'];
          'application/*+json': components['schemas']['CreateLocationBindingModel'];
          'application/xml': components['schemas']['CreateLocationBindingModel'];
          'text/xml': components['schemas']['CreateLocationBindingModel'];
          'application/*+xml': components['schemas']['CreateLocationBindingModel'];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['LocationViewModel'];
            'application/json': components['schemas']['LocationViewModel'];
            'text/json': components['schemas']['LocationViewModel'];
            'application/xml': components['schemas']['LocationViewModel'];
            'text/xml': components['schemas']['LocationViewModel'];
          };
        };
        /** @description Returns new location view model */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Locations/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Returns the specified location */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description location id */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns location view model */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['LocationViewModel'];
            'application/json': components['schemas']['LocationViewModel'];
            'text/json': components['schemas']['LocationViewModel'];
            'application/xml': components['schemas']['LocationViewModel'];
            'text/xml': components['schemas']['LocationViewModel'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/MailDashboard/Organization/{id}/Provider': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Edit organizations email provider. Only parent organizations can have email provider setting. This endpoint accessible only for organization managers and users with SuperAdmin role. */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description organization id */
          id: number;
        };
        cookie?: never;
      };
      /** @description email provider data */
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['OrganizationEmailProviderBindingModel'];
          'application/json': components['schemas']['OrganizationEmailProviderBindingModel'];
          'text/json': components['schemas']['OrganizationEmailProviderBindingModel'];
          'application/*+json': components['schemas']['OrganizationEmailProviderBindingModel'];
          'application/xml': components['schemas']['OrganizationEmailProviderBindingModel'];
          'text/xml': components['schemas']['OrganizationEmailProviderBindingModel'];
          'application/*+xml': components['schemas']['OrganizationEmailProviderBindingModel'];
        };
      };
      responses: {
        /** @description Returns nothing */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/MailDashboard/DailySummary': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Gets the logs of sent/unsent (delivered/failed) emails for the specified organization between the specified dates. Organization Id parameter is mandatory for all except SuperAdmins.
     *     This endpoint accessible only for organization managers and users with SuperAdmin role. */
    get: {
      parameters: {
        query?: {
          /** @description organization id */
          organizationId?: number;
          /** @description start date of email sent date */
          startDate?: string;
          /** @description end date of email sent date */
          endDate?: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns email daily summary view models */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['EmailDailySummaryViewModel'][];
            'application/json': components['schemas']['EmailDailySummaryViewModel'][];
            'text/json': components['schemas']['EmailDailySummaryViewModel'][];
            'application/xml': components['schemas']['EmailDailySummaryViewModel'][];
            'text/xml': components['schemas']['EmailDailySummaryViewModel'][];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/MailDashboard/ProviderSummary': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Gets the email logs for the specified provider and organization between the specified dates. Organization Id is mandatory for all users except SuperAdmins.
     *     This endpoint accessible only for organization managers and users with SuperAdmin role. */
    get: {
      parameters: {
        query?: {
          /** @description email provider */
          provider?: components['schemas']['EmailProvider'];
          /** @description organization id */
          organizationId?: number;
          /** @description start date of email sent date */
          startDate?: string;
          /** @description end date of email sent date */
          endDate?: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns email provider summary view models */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['EmailProviderSummaryViewModel'][];
            'application/json': components['schemas']['EmailProviderSummaryViewModel'][];
            'text/json': components['schemas']['EmailProviderSummaryViewModel'][];
            'application/xml': components['schemas']['EmailProviderSummaryViewModel'][];
            'text/xml': components['schemas']['EmailProviderSummaryViewModel'][];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/MailDashboard/Log': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** This endpoint used to get email logs with different filtering options. Filtering options: email provider, organization id (mandatory for all users except SuperAdmin), start/end date for email sent date
     *     This endpoint accessible only for organization managers and users with SuperAdmin role. */
    get: {
      parameters: {
        query?: {
          /** @description email provider */
          provider?: components['schemas']['EmailProvider'];
          /** @description organization id */
          organizationId?: number;
          /** @description start date of email sent date */
          startDate?: string;
          /** @description end date of email sent date */
          endDate?: string;
          /** @description filter out email logs by subject or recipients email address */
          search?: string;
          /** @description in case 'true' return logs of delivered email, 'false' - failed emails, 'null' - both. Default value 'null' returns all email logs */
          sent?: boolean;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns email log view models */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['EmailLogViewModel'][];
            'application/json': components['schemas']['EmailLogViewModel'][];
            'text/json': components['schemas']['EmailLogViewModel'][];
            'application/xml': components['schemas']['EmailLogViewModel'][];
            'text/xml': components['schemas']['EmailLogViewModel'][];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Media/Image': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /** Endpoint to upload image file/s */
    put: {
      parameters: {
        query?: {
          /** @description is image tutorial image or not (tutorial images are not resized) */
          tutorial?: boolean;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns uploaded image view model */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['PutImageViewModel'];
            'application/json': components['schemas']['PutImageViewModel'];
            'text/json': components['schemas']['PutImageViewModel'];
            'application/xml': components['schemas']['PutImageViewModel'];
            'text/xml': components['schemas']['PutImageViewModel'];
          };
        };
      };
    };
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Media/Image/Cropped': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /** Endpoint to upload cropped image file/s */
    put: {
      parameters: {
        query?: {
          /** @description is image tutorial image or not (tutorial images are not resized) */
          tutorial?: boolean;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns uploaded image view model */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['PutImageViewModel'];
            'application/json': components['schemas']['PutImageViewModel'];
            'text/json': components['schemas']['PutImageViewModel'];
            'application/xml': components['schemas']['PutImageViewModel'];
            'text/xml': components['schemas']['PutImageViewModel'];
          };
        };
      };
    };
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Media/Document': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /** Endpoint to upload document file/s */
    put: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns uploaded document view model */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['PutDocumentViewModel'];
            'application/json': components['schemas']['PutDocumentViewModel'];
            'text/json': components['schemas']['PutDocumentViewModel'];
            'application/xml': components['schemas']['PutDocumentViewModel'];
            'text/xml': components['schemas']['PutDocumentViewModel'];
          };
        };
      };
    };
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Media/GroupDocument': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Endpoint to list documents */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns document view models */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['DocumentViewModelBrief'][];
            'application/json': components['schemas']['DocumentViewModelBrief'][];
            'text/json': components['schemas']['DocumentViewModelBrief'][];
            'application/xml': components['schemas']['DocumentViewModelBrief'][];
            'text/xml': components['schemas']['DocumentViewModelBrief'][];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Media/document/{documentId}/favorite': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Returns the specified the document */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          documentId: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns the specified file */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Media/document/{documentId}/unfavorite': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Adding document to favorite */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          documentId: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Media/GroupDocument/{documentId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Returns the specified the document */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          documentId: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns the specified file */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': string;
            'application/json': string;
            'text/json': string;
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Media/GroupDocument/AddDocument/{groupId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Uploading document, include file to request body */
    post: {
      parameters: {
        query?: {
          /** @description Should document be available offline? */
          offline?: boolean;
        };
        header?: never;
        path: {
          groupId: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns Id of the new document */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Media/GroupDocument/AddDocumentToGroups/{groupIds}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Uploads document/s to the specified group/s */
    post: {
      parameters: {
        query?: {
          /** @description should document be accessible offline */
          offline?: boolean;
        };
        header?: never;
        path: {
          groupIds: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns id of the new document */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Media/GroupDocument/DeleteDocument/{documentIdList}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Deletes the specified document/s */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          documentIdList: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns ids of deleted documents */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Media/GroupDocument/DeleteDocument/{documentId}/FromGroup/{groupId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Removes specified document from specified group */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          documentId: number;
          groupId: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns nothing */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Media/GroupDocument/setoffline': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Allows to change folders and documents Offline status in bulk */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['SetDocumentOfflineBindingModel'][];
          'application/json': components['schemas']['SetDocumentOfflineBindingModel'][];
          'text/json': components['schemas']['SetDocumentOfflineBindingModel'][];
          'application/*+json': components['schemas']['SetDocumentOfflineBindingModel'][];
          'application/xml': components['schemas']['SetDocumentOfflineBindingModel'][];
          'text/xml': components['schemas']['SetDocumentOfflineBindingModel'][];
          'application/*+xml': components['schemas']['SetDocumentOfflineBindingModel'][];
        };
      };
      responses: {
        /** @description Returns message "Offline statuses updated" */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Media/AmazonFile/{fileName}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Gets file by fileName. This endpoint does not require authentication. */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          fileName: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns file with specified name */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': string;
            'application/json': string;
            'text/json': string;
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Media/File/{fileName}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Gets file by fileName. This endpoint does not require authentication. */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          fileName: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns file with specified name */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': string;
            'application/json': string;
            'text/json': string;
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Media/Folders': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Endpoint to get list of folders */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns file with specified name */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['FolderViewModel'][];
            'application/json': components['schemas']['FolderViewModel'][];
            'text/json': components['schemas']['FolderViewModel'][];
            'application/xml': components['schemas']['FolderViewModel'][];
            'text/xml': components['schemas']['FolderViewModel'][];
          };
        };
      };
    };
    put?: never;
    /** Endpoint to post new folder */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['FolderBindingModel'];
          'application/json': components['schemas']['FolderBindingModel'];
          'text/json': components['schemas']['FolderBindingModel'];
          'application/*+json': components['schemas']['FolderBindingModel'];
          'application/xml': components['schemas']['FolderBindingModel'];
          'text/xml': components['schemas']['FolderBindingModel'];
          'application/*+xml': components['schemas']['FolderBindingModel'];
        };
      };
      responses: {
        /** @description Returns nothing */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Media/Folders/{id}/delete': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Endpoint to delete the specified folder */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description folder id */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns nothing */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Media/Folders/{id}/edit': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Endpoint to edit the specified folder */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description folder id */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['FolderBindingModel'];
          'application/json': components['schemas']['FolderBindingModel'];
          'text/json': components['schemas']['FolderBindingModel'];
          'application/*+json': components['schemas']['FolderBindingModel'];
          'application/xml': components['schemas']['FolderBindingModel'];
          'text/xml': components['schemas']['FolderBindingModel'];
          'application/*+xml': components['schemas']['FolderBindingModel'];
        };
      };
      responses: {
        /** @description Returns nothing */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Media/Folders/{id}/documents': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** This endpoint retrieves documents associated with a specified folder.
     *     It first checks if the user making the request has the necessary permissions to manage or access the documents.
     *     If the query succeeds, it returns an Ok response with the list of documents. */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The identifier of the folder for which the documents are to be retrieved. */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['DocumentViewModel'][];
            'application/json': components['schemas']['DocumentViewModel'][];
            'text/json': components['schemas']['DocumentViewModel'][];
            'application/xml': components['schemas']['DocumentViewModel'][];
            'text/xml': components['schemas']['DocumentViewModel'][];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Media/Groups/{id}/documents': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** This endpoint retrieves documents associated with a specified group.
     *     It first checks if the user making the request has the necessary permissions to manage or access the documents.
     *     If the query succeeds, it returns an Ok response with the list of documents. */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The identifier of the group for which the documents are to be retrieved. */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['DocumentViewModel'][];
            'application/json': components['schemas']['DocumentViewModel'][];
            'text/json': components['schemas']['DocumentViewModel'][];
            'application/xml': components['schemas']['DocumentViewModel'][];
            'text/xml': components['schemas']['DocumentViewModel'][];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Media/Folders/AddDocument/{folderIds}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Endpoint to upload a file to the specified folder/s */
    post: {
      parameters: {
        query?: {
          offline?: boolean;
        };
        header?: never;
        path: {
          folderIds: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns uploaded new documents id */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Media/GroupDocument/{documentId}/AddToGroup/{groupId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Adding document to the group */
    post: {
      parameters: {
        query?: {
          name?: string;
          offline?: boolean;
        };
        header?: never;
        path: {
          documentId: number;
          groupId: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns nothing */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Media/folders/{id}/favorite': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** This endpoint is used to mark a folder as favorite for the currently authenticated user.
     *     It retrieves the folder based on the provided ID and user permissions to ensure access.
     *     If the folder is not found or the user doesn't have permission to access it, a Not Found error is returned.
     *     If the folder is not already marked as a favorite by the user, a new entry is added to the database's favorites list. */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The ID of the folder to be marked as a favorite. */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Media/folders/{id}/unfavorite': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** This endpoint is used to remove a folder from the user's favorites.
     *     It first retrieves the folder based on the provided ID and user permissions.
     *     If the folder is not found or the user has no permission to access it, a Not Found error is returned.
     *     If the folder is favorited by the user, it is unfavorited by removing the corresponding entry from the database. */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The ID of the folder to be unfavorited. */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Media/GroupDocument/{documentId}/AddToFolder/{folderId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Adding document to the folder */
    post: {
      parameters: {
        query?: {
          name?: string;
          offline?: boolean;
        };
        header?: never;
        path: {
          documentId: number;
          folderId: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns nothing */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Media/GroupDocument/{documentId}/RemoveFromFolder/{folderId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Endpoint to remove the specified document from the specified folder */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          documentId: number;
          folderId: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns nothing */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Media/Video': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /** Uploads video */
    put: {
      parameters: {
        query?: {
          /** @description is it tutorial? */
          tutorial?: boolean;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns uploaded videos view model */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['PutImageViewModel'];
            'application/json': components['schemas']['PutImageViewModel'];
            'text/json': components['schemas']['PutImageViewModel'];
            'application/xml': components['schemas']['PutImageViewModel'];
            'text/xml': components['schemas']['PutImageViewModel'];
          };
        };
      };
    };
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Media/VideoStream/{fileName}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Endpoint to get video file by name */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          fileName: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns the specified video file */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': string;
            'application/json': string;
            'text/json': string;
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Media/Audio': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /** Endpoint to upload audio file */
    put: {
      parameters: {
        query?: {
          /** @description is it tutorial? */
          tutorial?: boolean;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns uploaded audio files view model */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['PutImageViewModel'];
            'application/json': components['schemas']['PutImageViewModel'];
            'text/json': components['schemas']['PutImageViewModel'];
            'application/xml': components['schemas']['PutImageViewModel'];
            'text/xml': components['schemas']['PutImageViewModel'];
          };
        };
      };
    };
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Media/Tutorials': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Endpoint to get tutorials excluding its content */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns tutorial view models */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['TutorialViewModel'][];
            'application/json': components['schemas']['TutorialViewModel'][];
            'text/json': components['schemas']['TutorialViewModel'][];
            'application/xml': components['schemas']['TutorialViewModel'][];
            'text/xml': components['schemas']['TutorialViewModel'][];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Media/Tutorials/{id}/{language}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Endpoint to get the specified tutorial with its content in the specified language */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description tutorial id */
          id: number;
          /** @description used to filter out tutorials content by language */
          language: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns tutorial view model */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['TutorialViewModel'];
            'application/json': components['schemas']['TutorialViewModel'];
            'text/json': components['schemas']['TutorialViewModel'];
            'application/xml': components['schemas']['TutorialViewModel'];
            'text/xml': components['schemas']['TutorialViewModel'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/MeetingRooms': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['MeetingRoomSimpleViewModel'][];
            'application/json': components['schemas']['MeetingRoomSimpleViewModel'][];
            'text/json': components['schemas']['MeetingRoomSimpleViewModel'][];
            'application/xml': components['schemas']['MeetingRoomSimpleViewModel'][];
            'text/xml': components['schemas']['MeetingRoomSimpleViewModel'][];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Messages': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Endpoint to get messages */
    get: {
      parameters: {
        query?: {
          /** @description filter out messages by its text or text of any reply using this parameter in case insensitive manner */
          search?: string;
          /** @description skips the specfied number of messages */
          skip?: number;
          /** @description returns up to the specified number of messages */
          take?: number;
          recalled?: boolean;
          threshold?: string;
          /** @description filter out messages by its type, possible values:   Message = 0, Report = 1, Emergency = 2, Broadcast = 3,GroupAdditionNormal = 4,GroupAdditionEmergency = 5, SituationReport = 6, HoldingStatement = 9, LogNote = 10, CrossOrganizationEmergency = 11, Forwarded = 12 */
          types?: number[];
          /** @description filter out messages by its group connections */
          groups?: number[];
          /** @description exclude messages with specified type/s */
          excludeTypes?: number[];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns message view models */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['MessageListViewModel'][];
            'application/json': components['schemas']['MessageListViewModel'][];
            'text/json': components['schemas']['MessageListViewModel'][];
            'application/xml': components['schemas']['MessageListViewModel'][];
            'text/xml': components['schemas']['MessageListViewModel'][];
          };
        };
      };
    };
    put?: never;
    /** Sends new message */
    post: {
      parameters: {
        query?: {
          senderId?: number;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['PostMessageBindingModel'];
          'application/json': components['schemas']['PostMessageBindingModel'];
          'text/json': components['schemas']['PostMessageBindingModel'];
          'application/*+json': components['schemas']['PostMessageBindingModel'];
          'application/xml': components['schemas']['PostMessageBindingModel'];
          'text/xml': components['schemas']['PostMessageBindingModel'];
          'application/*+xml': components['schemas']['PostMessageBindingModel'];
        };
      };
      responses: {
        /** @description Returns created message view model */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['MessageViewModel'];
            'application/json': components['schemas']['MessageViewModel'];
            'text/json': components['schemas']['MessageViewModel'];
            'application/xml': components['schemas']['MessageViewModel'];
            'text/xml': components['schemas']['MessageViewModel'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Messages/list': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Endpoint to get messages */
    get: {
      parameters: {
        query?: {
          /** @description filter out messages by its text or text of any reply using this parameter in case insensitive manner */
          search?: string;
          /** @description skips the specfied number of messages */
          skip?: number;
          /** @description returns up to the specified number of messages */
          take?: number;
          recalled?: boolean;
          threshold?: string;
          /** @description filter out messages by its type, possible values:   Message = 0, Report = 1, Emergency = 2, Broadcast = 3,GroupAdditionNormal = 4,GroupAdditionEmergency = 5, SituationReport = 6, HoldingStatement = 9, LogNote = 10, CrossOrganizationEmergency = 11, Forwarded = 12 */
          types?: number[];
          /** @description filter out messages by its group connections */
          groups?: number[];
          /** @description exclude messages with specified type/s */
          excludeTypes?: number[];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns message view models */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['MessageListViewModel'][];
            'application/json': components['schemas']['MessageListViewModel'][];
            'text/json': components['schemas']['MessageListViewModel'][];
            'application/xml': components['schemas']['MessageListViewModel'][];
            'text/xml': components['schemas']['MessageListViewModel'][];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/Messages': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Endpoint to get messages v2 */
    get: {
      parameters: {
        query?: {
          /** @description filter out messages by its text or text of any reply using this parameter in case insensitive manner */
          search?: string;
          /** @description skips the specified number of messages */
          skip?: number;
          /** @description returns up to the specified number of messages */
          take?: number;
          recalled?: boolean;
          threshold?: string;
          /** @description filter out messages by its type, possible values:   Message = 0, Report = 1, Emergency = 2, Broadcast = 3,GroupAdditionNormal = 4,GroupAdditionEmergency = 5, SituationReport = 6, HoldingStatement = 9, LogNote = 10, CrossOrganizationEmergency = 11, Forwarded = 12 */
          types?: number[];
          /** @description filter out messages by its group connections */
          groups?: number[];
          /** @description exclude messages with specified type/s */
          excludeTypes?: number[];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns message view models */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['MessageListViewModelV2'][];
            'application/json': components['schemas']['MessageListViewModelV2'][];
            'text/json': components['schemas']['MessageListViewModelV2'][];
            'application/xml': components['schemas']['MessageListViewModelV2'][];
            'text/xml': components['schemas']['MessageListViewModelV2'][];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Messages/groups': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** This endpoint returns groups connected to messages user can read. Those groups should be visible to the user
     *     via GET api/groups. Returned groups then used to filter messages */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description For each group it returns the following fields: ID, Name, ImageFileName */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Messages/TotalUnread': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get the the [number of unread messages, number of active emergencies, number of messages with unread replies, number of not ended checklists, number of active blocking alarms] within the last 3 months. */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns view model containing number of different unread counts */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['TotalUnreadViewModel'];
            'application/json': components['schemas']['TotalUnreadViewModel'];
            'text/json': components['schemas']['TotalUnreadViewModel'];
            'application/xml': components['schemas']['TotalUnreadViewModel'];
            'text/xml': components['schemas']['TotalUnreadViewModel'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Messages/FooterData': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** This endpoint is used to retrieve footer data for the user.
     *     It provides information about the user's unread messages and replies and the status of an active emergency, if any. */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['FooterDataViewModel'];
            'application/json': components['schemas']['FooterDataViewModel'];
            'text/json': components['schemas']['FooterDataViewModel'];
            'application/xml': components['schemas']['FooterDataViewModel'];
            'text/xml': components['schemas']['FooterDataViewModel'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Messages/unread': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Returns number of unread messages within the last 3 months */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns single integer value */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Messages/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get specific message by id */
    get: {
      parameters: {
        query?: {
          /** @description in case "true" retrieve from db, not cache */
          noCache?: boolean;
          /** @description in case "true" retrieve replies */
          includeReplies?: boolean;
          /** @description filter replies by purpose */
          replyPurpose?: components['schemas']['ReplyPurpose'][];
        };
        header?: never;
        path: {
          /** @description message id */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns message view model */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['MessageViewModel'];
            'application/json': components['schemas']['MessageViewModel'];
            'text/json': components['schemas']['MessageViewModel'];
            'application/xml': components['schemas']['MessageViewModel'];
            'text/xml': components['schemas']['MessageViewModel'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v2/Messages/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get specific message by id */
    get: {
      parameters: {
        query?: {
          /** @description in case "true" retrieve from db, not cache */
          noCache?: boolean;
          includeReplies?: boolean;
        };
        header?: never;
        path: {
          /** @description message id */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns message view model */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['MessageViewModelV2'];
            'application/json': components['schemas']['MessageViewModelV2'];
            'text/json': components['schemas']['MessageViewModelV2'];
            'application/xml': components['schemas']['MessageViewModelV2'];
            'text/xml': components['schemas']['MessageViewModelV2'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Messages/{id}/addgroup/{groupId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Add specified group to the specified message */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description message id */
          id: number;
          groupId: number;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['PostMessageBindingModel'];
          'application/json': components['schemas']['PostMessageBindingModel'];
          'text/json': components['schemas']['PostMessageBindingModel'];
          'application/*+json': components['schemas']['PostMessageBindingModel'];
          'application/xml': components['schemas']['PostMessageBindingModel'];
          'text/xml': components['schemas']['PostMessageBindingModel'];
          'application/*+xml': components['schemas']['PostMessageBindingModel'];
        };
      };
      responses: {
        /** @description Returns nothing */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Messages/{id}/addRecipients': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Add recipients to the message. User making request must be sender of the message.
     *     Message must be send to no groups or only normal groups. User making request must
     *     see all recipients via GET api/users. */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description message Id */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['MessageRecipientsBindingModel'];
          'application/json': components['schemas']['MessageRecipientsBindingModel'];
          'text/json': components['schemas']['MessageRecipientsBindingModel'];
          'application/*+json': components['schemas']['MessageRecipientsBindingModel'];
          'application/xml': components['schemas']['MessageRecipientsBindingModel'];
          'text/xml': components['schemas']['MessageRecipientsBindingModel'];
          'application/*+xml': components['schemas']['MessageRecipientsBindingModel'];
        };
      };
      responses: {
        /** @description Returns number of recipients added to the message */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Messages/{id}/forward': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Forwards the specified alarm message to the specified groups and users */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description message id */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['ForwardMessageBindingModel'];
          'application/json': components['schemas']['ForwardMessageBindingModel'];
          'text/json': components['schemas']['ForwardMessageBindingModel'];
          'application/*+json': components['schemas']['ForwardMessageBindingModel'];
          'application/xml': components['schemas']['ForwardMessageBindingModel'];
          'text/xml': components['schemas']['ForwardMessageBindingModel'];
          'application/*+xml': components['schemas']['ForwardMessageBindingModel'];
        };
      };
      responses: {
        /** @description Returns message view model */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['MessageViewModel'];
            'application/json': components['schemas']['MessageViewModel'];
            'text/json': components['schemas']['MessageViewModel'];
            'application/xml': components['schemas']['MessageViewModel'];
            'text/xml': components['schemas']['MessageViewModel'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Messages/{messageID}/read': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Sets the specified message and its specified replies as read/unread */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          messageID: number;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['MessageReadBindingModel'];
          'application/json': components['schemas']['MessageReadBindingModel'];
          'text/json': components['schemas']['MessageReadBindingModel'];
          'application/*+json': components['schemas']['MessageReadBindingModel'];
          'application/xml': components['schemas']['MessageReadBindingModel'];
          'text/xml': components['schemas']['MessageReadBindingModel'];
          'application/*+xml': components['schemas']['MessageReadBindingModel'];
        };
      };
      responses: {
        /** @description Returns updated last read date */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Messages/{messageID}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Edits the specified message */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          messageID: number;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['EditMessageBindingModel'];
          'application/json': components['schemas']['EditMessageBindingModel'];
          'text/json': components['schemas']['EditMessageBindingModel'];
          'application/*+json': components['schemas']['EditMessageBindingModel'];
          'application/xml': components['schemas']['EditMessageBindingModel'];
          'text/xml': components['schemas']['EditMessageBindingModel'];
          'application/*+xml': components['schemas']['EditMessageBindingModel'];
        };
      };
      responses: {
        /** @description Returns edited message view model */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['MessageViewModel'];
            'application/json': components['schemas']['MessageViewModel'];
            'text/json': components['schemas']['MessageViewModel'];
            'application/xml': components['schemas']['MessageViewModel'];
            'text/xml': components['schemas']['MessageViewModel'];
          };
        };
      };
    };
    /** Deletes the specified message */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          messageID: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns nothing */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Messages/{messageID}/recall': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** End a crisis */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          messageID: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns nothing */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Messages/{messageID}/reply': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Reply to the specified message */
    post: {
      parameters: {
        query?: {
          senderId?: number;
        };
        header?: never;
        path: {
          messageID: number;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['ReplyBindingModel'];
          'application/json': components['schemas']['ReplyBindingModel'];
          'text/json': components['schemas']['ReplyBindingModel'];
          'application/*+json': components['schemas']['ReplyBindingModel'];
          'application/xml': components['schemas']['ReplyBindingModel'];
          'text/xml': components['schemas']['ReplyBindingModel'];
          'application/*+xml': components['schemas']['ReplyBindingModel'];
        };
      };
      responses: {
        /** @description Returns reply view model */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ReplyViewModel'];
            'application/json': components['schemas']['ReplyViewModel'];
            'text/json': components['schemas']['ReplyViewModel'];
            'application/xml': components['schemas']['ReplyViewModel'];
            'text/xml': components['schemas']['ReplyViewModel'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Messages/replies/{replyId}/edit': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Edits the specified reply */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          replyId: number;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['ReplyBindingModel'];
          'application/json': components['schemas']['ReplyBindingModel'];
          'text/json': components['schemas']['ReplyBindingModel'];
          'application/*+json': components['schemas']['ReplyBindingModel'];
          'application/xml': components['schemas']['ReplyBindingModel'];
          'text/xml': components['schemas']['ReplyBindingModel'];
          'application/*+xml': components['schemas']['ReplyBindingModel'];
        };
      };
      responses: {
        /** @description Returns nothing */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Messages/{messageID}/replies': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Returns replies of the specified message */
    get: {
      parameters: {
        query?: {
          /** @description skips the specified number of replies, default = 0 */
          skip?: number;
          /** @description returns the specified number of replies, default = null, takes all replies */
          take?: number;
          /** @description sorting order for replies, possible values: 0,1. 0-asc, 1-desc. Reply sent time used for sorting. */
          direction?: components['schemas']['SortEnum'];
          /** @description this parameter used to filter replies by last edit time and used in pair with "direction" parameter. In case direction is 0-asc, then return replies which edited(lastEdited property of reply) after the specified time,
           *                 if 1-desc which edited before the specified time. */
          threshold?: string;
          /** @description filters out replies based on types of attachments they have. Default value - null, no filter. Possible values: 0 - Document, 1 - Photo, 2 - Audio */
          hasAttachments?: components['schemas']['AttachmentType'];
          /** @description return replies with ID less than or equal to the specified ID */
          maxReplyId?: number;
          /** @description return replies with ID greater than or equal to the specified ID */
          minReplyId?: number;
          /** @description return message from database instead of cache */
          noCache?: boolean;
          /** @description filter replies by purpose */
          replyPurpose?: components['schemas']['ReplyPurpose'][];
        };
        header?: never;
        path: {
          /** @description message id */
          messageID: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns list containing reply view models */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ReplyViewModel'][];
            'application/json': components['schemas']['ReplyViewModel'][];
            'text/json': components['schemas']['ReplyViewModel'][];
            'application/xml': components['schemas']['ReplyViewModel'][];
            'text/xml': components['schemas']['ReplyViewModel'][];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Messages/{messageID}/replies/{replyID}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** Deletes the specified reply of the specified message */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          messageID: number;
          replyID: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns nothing */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Messages/{id}/reply/{replyId}/setRead': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Endpoint to mark reply to the message as read, user must be recipient of the message and be able to see the specified reply */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: number;
          replyId: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns nothing */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Messages/{id}/reply/{replyId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Endpoint to get the user reads info for the specified reply (like when each user read this reply) */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: number;
          replyId: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns view model containing reply reads info */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ReplyDataViewModel'];
            'application/json': components['schemas']['ReplyDataViewModel'];
            'text/json': components['schemas']['ReplyDataViewModel'];
            'application/xml': components['schemas']['ReplyDataViewModel'];
            'text/xml': components['schemas']['ReplyDataViewModel'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Messages/{messageID}/recipients': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Returns recipients of the specified message */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          messageID: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns list containing message recipient view models */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['MessageRecipientViewModelFull'][];
            'application/json': components['schemas']['MessageRecipientViewModelFull'][];
            'text/json': components['schemas']['MessageRecipientViewModelFull'][];
            'application/xml': components['schemas']['MessageRecipientViewModelFull'][];
            'text/xml': components['schemas']['MessageRecipientViewModelFull'][];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Messages/{messageId}/ChangeType': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Changes type and reply type of the specified message */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          messageId: number;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['ChangeMessageTypeBindingModel'];
          'application/json': components['schemas']['ChangeMessageTypeBindingModel'];
          'text/json': components['schemas']['ChangeMessageTypeBindingModel'];
          'application/*+json': components['schemas']['ChangeMessageTypeBindingModel'];
          'application/xml': components['schemas']['ChangeMessageTypeBindingModel'];
          'text/xml': components['schemas']['ChangeMessageTypeBindingModel'];
          'application/*+xml': components['schemas']['ChangeMessageTypeBindingModel'];
        };
      };
      responses: {
        /** @description Returns nothing */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Messages/broadcast/organization': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Send broadcast message (message type = 3) to organizations. Organizations where user can send the message
     *     can be retrieved from GET api/messages/broadcast/organizations. Only organization/suborganization members
     *     added as recipients of the message, nested organization members are excluded. Organization/Suborganization
     *     ids should be passed using "organizationIds" field. "organizationId" and "subOrganizationId" fields left
     *     for backwards compatability. */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['OrganizationBroadcastBindingModel'];
          'application/json': components['schemas']['OrganizationBroadcastBindingModel'];
          'text/json': components['schemas']['OrganizationBroadcastBindingModel'];
          'application/*+json': components['schemas']['OrganizationBroadcastBindingModel'];
          'application/xml': components['schemas']['OrganizationBroadcastBindingModel'];
          'text/xml': components['schemas']['OrganizationBroadcastBindingModel'];
          'application/*+xml': components['schemas']['OrganizationBroadcastBindingModel'];
        };
      };
      responses: {
        /** @description Returns new message view model */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['MessageViewModel'];
            'application/json': components['schemas']['MessageViewModel'];
            'text/json': components['schemas']['MessageViewModel'];
            'application/xml': components['schemas']['MessageViewModel'];
            'text/xml': components['schemas']['MessageViewModel'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Messages/broadcast/organizations': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Returns the organizations where user can send broadcast message (message type=3). Organizations and suborganizations
     *     where user is member and their nested organizations */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns list containing organization view models */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['OrganizationViewModelShortest'][];
            'application/json': components['schemas']['OrganizationViewModelShortest'][];
            'text/json': components['schemas']['OrganizationViewModelShortest'][];
            'application/xml': components['schemas']['OrganizationViewModelShortest'][];
            'text/xml': components['schemas']['OrganizationViewModelShortest'][];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Messages/broadcast/suborganization': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Returns the suborganizations where user can send broadcast message (message type=3). Organizations and suborganizations
     *     where user is member and their nested organizations */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns list containing organization view models */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['OrganizationViewModelShortest'][];
            'application/json': components['schemas']['OrganizationViewModelShortest'][];
            'text/json': components['schemas']['OrganizationViewModelShortest'][];
            'application/xml': components['schemas']['OrganizationViewModelShortest'][];
            'text/xml': components['schemas']['OrganizationViewModelShortest'][];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Messages/{id}/attachment/{fileName}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Returns message attachment with specified name */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description message id */
          id: number;
          /** @description attachment file name */
          fileName: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns file */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Messages/{id}/Archive': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Archives the specified message */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns nothing */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Messages/GetBlockingAlarmUsers': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Returns users with active(not recalled yet) blocking alarm among the specified users */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['UsersWithBlockingAlarmBindingModel'];
          'application/json': components['schemas']['UsersWithBlockingAlarmBindingModel'];
          'text/json': components['schemas']['UsersWithBlockingAlarmBindingModel'];
          'application/*+json': components['schemas']['UsersWithBlockingAlarmBindingModel'];
          'application/xml': components['schemas']['UsersWithBlockingAlarmBindingModel'];
          'text/xml': components['schemas']['UsersWithBlockingAlarmBindingModel'];
          'application/*+xml': components['schemas']['UsersWithBlockingAlarmBindingModel'];
        };
      };
      responses: {
        /** @description Returns list containing user view models */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['UserViewModel'][];
            'application/json': components['schemas']['UserViewModel'][];
            'text/json': components['schemas']['UserViewModel'][];
            'application/xml': components['schemas']['UserViewModel'][];
            'text/xml': components['schemas']['UserViewModel'][];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Messages/ActiveAlarms': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Endpoint to get the list of active alarms */
    get: {
      parameters: {
        query?: {
          /** @description Required parameter. Used to filter out active alarms by its group connections */
          groupIds?: number[];
          /** @description Not required parameter. Used to exclude active alarms with sent date equal or after the specified date. Default - null */
          minSentDate?: string;
          /** @description Not required parameter. Used to skip the specified number of alarms. Default - 0 */
          skip?: number;
          /** @description Not required parameter. Used to take the specified number of alarms. Default - 2 */
          take?: number;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns active alarms view models */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['ActiveMessageAlarmListViewModelPaginatedList'];
            'application/json': components['schemas']['ActiveMessageAlarmListViewModelPaginatedList'];
            'text/json': components['schemas']['ActiveMessageAlarmListViewModelPaginatedList'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Muster': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get the list of musters */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns muster view models */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['MusterViewModel'][];
            'application/json': components['schemas']['MusterViewModel'][];
            'text/json': components['schemas']['MusterViewModel'][];
            'application/xml': components['schemas']['MusterViewModel'][];
            'text/xml': components['schemas']['MusterViewModel'][];
          };
        };
      };
    };
    put?: never;
    /** Create new muster */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['MusterBindingModel'];
          'application/json': components['schemas']['MusterBindingModel'];
          'text/json': components['schemas']['MusterBindingModel'];
          'application/*+json': components['schemas']['MusterBindingModel'];
          'application/xml': components['schemas']['MusterBindingModel'];
          'text/xml': components['schemas']['MusterBindingModel'];
          'application/*+xml': components['schemas']['MusterBindingModel'];
        };
      };
      responses: {
        /** @description Returns muster view model */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['MusterViewModel'];
            'application/json': components['schemas']['MusterViewModel'];
            'text/json': components['schemas']['MusterViewModel'];
            'application/xml': components['schemas']['MusterViewModel'];
            'text/xml': components['schemas']['MusterViewModel'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Muster/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Returns the specified muster */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description muster id */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns muster view model */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['MusterViewModelFull'];
            'application/json': components['schemas']['MusterViewModelFull'];
            'text/json': components['schemas']['MusterViewModelFull'];
            'application/xml': components['schemas']['MusterViewModelFull'];
            'text/xml': components['schemas']['MusterViewModelFull'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    /** Allows to delete existing muster (I'm OK) */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Muster Id */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns nothing */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Muster/{id}/SetStatus': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Set status for the specified muster */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description muster id */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['MusterStatusBindingModel'];
          'application/json': components['schemas']['MusterStatusBindingModel'];
          'text/json': components['schemas']['MusterStatusBindingModel'];
          'application/*+json': components['schemas']['MusterStatusBindingModel'];
          'application/xml': components['schemas']['MusterStatusBindingModel'];
          'text/xml': components['schemas']['MusterStatusBindingModel'];
          'application/*+xml': components['schemas']['MusterStatusBindingModel'];
        };
      };
      responses: {
        /** @description Returns muster status view model */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['MusterUserStatusViewModel'];
            'application/json': components['schemas']['MusterUserStatusViewModel'];
            'text/json': components['schemas']['MusterUserStatusViewModel'];
            'application/xml': components['schemas']['MusterUserStatusViewModel'];
            'text/xml': components['schemas']['MusterUserStatusViewModel'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Muster/{id}/GetStatus': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get the status for the specified muster */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description muster id */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns muster status view model */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['MusterUserStatusViewModel'];
            'application/json': components['schemas']['MusterUserStatusViewModel'];
            'text/json': components['schemas']['MusterUserStatusViewModel'];
            'application/xml': components['schemas']['MusterUserStatusViewModel'];
            'text/xml': components['schemas']['MusterUserStatusViewModel'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Muster/{id}/end': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** End the specified muster */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description muster id */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns nothing */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Muster/{id}/edit': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Allows to edit existing muster (I'm OK) */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Muster Id */
          id: number;
        };
        cookie?: never;
      };
      /** @description New data model, "name" and "subject" properties does matter */
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['MusterBindingModel'];
          'application/json': components['schemas']['MusterBindingModel'];
          'text/json': components['schemas']['MusterBindingModel'];
          'application/*+json': components['schemas']['MusterBindingModel'];
          'application/xml': components['schemas']['MusterBindingModel'];
          'text/xml': components['schemas']['MusterBindingModel'];
          'application/*+xml': components['schemas']['MusterBindingModel'];
        };
      };
      responses: {
        /** @description Returns edited muster view model */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['MusterViewModel'];
            'application/json': components['schemas']['MusterViewModel'];
            'text/json': components['schemas']['MusterViewModel'];
            'application/xml': components['schemas']['MusterViewModel'];
            'text/xml': components['schemas']['MusterViewModel'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/News': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Returns news */
    get: {
      parameters: {
        query?: {
          currentRegion?: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns news view models */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['NewsViewModel'][];
            'application/json': components['schemas']['NewsViewModel'][];
            'text/json': components['schemas']['NewsViewModel'][];
            'application/xml': components['schemas']['NewsViewModel'][];
            'text/xml': components['schemas']['NewsViewModel'][];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/OnCallAlerts/sent': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Returns on call alerts sent by the user making this request */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns on call alert view models */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['OnCallAlertViewModel'][];
            'application/json': components['schemas']['OnCallAlertViewModel'][];
            'text/json': components['schemas']['OnCallAlertViewModel'][];
            'application/xml': components['schemas']['OnCallAlertViewModel'][];
            'text/xml': components['schemas']['OnCallAlertViewModel'][];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/OnCallAlerts/received': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Returns on call alerts received by the user making this request */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns on call alert view models */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['OnCallAlertReceivedViewModel'][];
            'application/json': components['schemas']['OnCallAlertReceivedViewModel'][];
            'text/json': components['schemas']['OnCallAlertReceivedViewModel'][];
            'application/xml': components['schemas']['OnCallAlertReceivedViewModel'][];
            'text/xml': components['schemas']['OnCallAlertReceivedViewModel'][];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/OnCallAlerts': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Create new on call alert */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['OnCallAlertBindingModel'];
          'application/json': components['schemas']['OnCallAlertBindingModel'];
          'text/json': components['schemas']['OnCallAlertBindingModel'];
          'application/*+json': components['schemas']['OnCallAlertBindingModel'];
          'application/xml': components['schemas']['OnCallAlertBindingModel'];
          'text/xml': components['schemas']['OnCallAlertBindingModel'];
          'application/*+xml': components['schemas']['OnCallAlertBindingModel'];
        };
      };
      responses: {
        /** @description Returns on call alert view model */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['OnCallAlertViewModel'];
            'application/json': components['schemas']['OnCallAlertViewModel'];
            'text/json': components['schemas']['OnCallAlertViewModel'];
            'application/xml': components['schemas']['OnCallAlertViewModel'];
            'text/xml': components['schemas']['OnCallAlertViewModel'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/OnCallAlerts/{id}/setstatus': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Set status for the specified on call alert */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description on call alert id */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['OnCallAlertStatusBindingModel'];
          'application/json': components['schemas']['OnCallAlertStatusBindingModel'];
          'text/json': components['schemas']['OnCallAlertStatusBindingModel'];
          'application/*+json': components['schemas']['OnCallAlertStatusBindingModel'];
          'application/xml': components['schemas']['OnCallAlertStatusBindingModel'];
          'text/xml': components['schemas']['OnCallAlertStatusBindingModel'];
          'application/*+xml': components['schemas']['OnCallAlertStatusBindingModel'];
        };
      };
      responses: {
        /** @description Returns nothing */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/OnCallAlerts/{id}/statuses': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get statuses of the specified on call alert id */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description on call alert id */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns on call alert recipient view models */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['OnCallAlertRecipientViewModel'][];
            'application/json': components['schemas']['OnCallAlertRecipientViewModel'][];
            'text/json': components['schemas']['OnCallAlertRecipientViewModel'][];
            'application/xml': components['schemas']['OnCallAlertRecipientViewModel'][];
            'text/xml': components['schemas']['OnCallAlertRecipientViewModel'][];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/OnCallAlerts/{id}/end': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Ends the specified on call alert */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description on call alert id */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns nothing */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/OnCallAlerts/{id}/edit': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Allows to edit existing On call alert */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description On call alert id */
          id: number;
        };
        cookie?: never;
      };
      /** @description New data model, "text" and "subject" properties does matter */
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['OnCallAlertBindingModel'];
          'application/json': components['schemas']['OnCallAlertBindingModel'];
          'text/json': components['schemas']['OnCallAlertBindingModel'];
          'application/*+json': components['schemas']['OnCallAlertBindingModel'];
          'application/xml': components['schemas']['OnCallAlertBindingModel'];
          'text/xml': components['schemas']['OnCallAlertBindingModel'];
          'application/*+xml': components['schemas']['OnCallAlertBindingModel'];
        };
      };
      responses: {
        /** @description Returns on call alert view model */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['OnCallAlertViewModel'];
            'application/json': components['schemas']['OnCallAlertViewModel'];
            'text/json': components['schemas']['OnCallAlertViewModel'];
            'application/xml': components['schemas']['OnCallAlertViewModel'];
            'text/xml': components['schemas']['OnCallAlertViewModel'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/OnCallAlerts/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** Allows to delete existing On call alert */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description On call alert id */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns nothing */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/PersonalAlarm': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Returns active personal alarm of the user making this request */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns personal alarm view model */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['PersonalAlarmViewModel'];
            'application/json': components['schemas']['PersonalAlarmViewModel'];
            'text/json': components['schemas']['PersonalAlarmViewModel'];
            'application/xml': components['schemas']['PersonalAlarmViewModel'];
            'text/xml': components['schemas']['PersonalAlarmViewModel'];
          };
        };
      };
    };
    put?: never;
    /** Create new personal alarm */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['PersonalAlarmBindingModels'];
          'application/json': components['schemas']['PersonalAlarmBindingModels'];
          'text/json': components['schemas']['PersonalAlarmBindingModels'];
          'application/*+json': components['schemas']['PersonalAlarmBindingModels'];
          'application/xml': components['schemas']['PersonalAlarmBindingModels'];
          'text/xml': components['schemas']['PersonalAlarmBindingModels'];
          'application/*+xml': components['schemas']['PersonalAlarmBindingModels'];
        };
      };
      responses: {
        /** @description Returns created personal alarm's view model */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['PersonalAlarmViewModel'];
            'application/json': components['schemas']['PersonalAlarmViewModel'];
            'text/json': components['schemas']['PersonalAlarmViewModel'];
            'application/xml': components['schemas']['PersonalAlarmViewModel'];
            'text/xml': components['schemas']['PersonalAlarmViewModel'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/PersonalAlarm/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Returns the specified personal alarm */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description personal alarm id */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns personal alarm view model */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['PersonalAlarmViewModel'];
            'application/json': components['schemas']['PersonalAlarmViewModel'];
            'text/json': components['schemas']['PersonalAlarmViewModel'];
            'application/xml': components['schemas']['PersonalAlarmViewModel'];
            'text/xml': components['schemas']['PersonalAlarmViewModel'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/PersonalAlarm/update': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Update existing active personal alarm of the user making this request */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['PersonalAlarmBindingModels'];
          'application/json': components['schemas']['PersonalAlarmBindingModels'];
          'text/json': components['schemas']['PersonalAlarmBindingModels'];
          'application/*+json': components['schemas']['PersonalAlarmBindingModels'];
          'application/xml': components['schemas']['PersonalAlarmBindingModels'];
          'text/xml': components['schemas']['PersonalAlarmBindingModels'];
          'application/*+xml': components['schemas']['PersonalAlarmBindingModels'];
        };
      };
      responses: {
        /** @description Returns updated personal alarm's view model */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['PersonalAlarmViewModel'];
            'application/json': components['schemas']['PersonalAlarmViewModel'];
            'text/json': components['schemas']['PersonalAlarmViewModel'];
            'application/xml': components['schemas']['PersonalAlarmViewModel'];
            'text/xml': components['schemas']['PersonalAlarmViewModel'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/PersonalAlarm/Cancel': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Cancels active personal alarm of the user making this request */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns cancelled personal alarm's view model */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['PersonalAlarmViewModel'];
            'application/json': components['schemas']['PersonalAlarmViewModel'];
            'text/json': components['schemas']['PersonalAlarmViewModel'];
            'application/xml': components['schemas']['PersonalAlarmViewModel'];
            'text/xml': components['schemas']['PersonalAlarmViewModel'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/PersonalAlarm/SetOff': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** This endpoint is used to set off a personal alarm for the current user.
     *     It first retrieves the personal alarm associated with the current user.
     *     If no personal alarm is found, it returns a Not Found error.
     *     Otherwise, it publishes a message to activate the personal alarm, notifying relevant recipients.
     *     Finally, it returns an Ok response with the activated personal alarm model. */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['PersonalAlarmViewModel'];
            'application/json': components['schemas']['PersonalAlarmViewModel'];
            'text/json': components['schemas']['PersonalAlarmViewModel'];
            'application/xml': components['schemas']['PersonalAlarmViewModel'];
            'text/xml': components['schemas']['PersonalAlarmViewModel'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Rss': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Returns RSS feeds for the user making this request */
    get: {
      parameters: {
        query?: {
          skip?: number;
          limit?: number;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns RSS feed view models */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['RssFeedViewModel'][];
            'application/json': components['schemas']['RssFeedViewModel'][];
            'text/json': components['schemas']['RssFeedViewModel'][];
            'application/xml': components['schemas']['RssFeedViewModel'][];
            'text/xml': components['schemas']['RssFeedViewModel'][];
          };
        };
      };
    };
    put?: never;
    /** Create new RSS feed */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['RssFeedBindingModel'];
          'application/json': components['schemas']['RssFeedBindingModel'];
          'text/json': components['schemas']['RssFeedBindingModel'];
          'application/*+json': components['schemas']['RssFeedBindingModel'];
          'application/xml': components['schemas']['RssFeedBindingModel'];
          'text/xml': components['schemas']['RssFeedBindingModel'];
          'application/*+xml': components['schemas']['RssFeedBindingModel'];
        };
      };
      responses: {
        /** @description Returns nothing */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Rss/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Returns the specified RSS feed */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description feedId */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns RSS feed view model */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['RssFeedViewModel'];
            'application/json': components['schemas']['RssFeedViewModel'];
            'text/json': components['schemas']['RssFeedViewModel'];
            'application/xml': components['schemas']['RssFeedViewModel'];
            'text/xml': components['schemas']['RssFeedViewModel'];
          };
        };
      };
    };
    put?: never;
    /** Store new RSS feed in the specified organization specified feed */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description feed id */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          'application/json-patch+json': components['schemas']['RssFeedBindingModel'];
          'application/json': components['schemas']['RssFeedBindingModel'];
          'text/json': components['schemas']['RssFeedBindingModel'];
          'application/*+json': components['schemas']['RssFeedBindingModel'];
          'application/xml': components['schemas']['RssFeedBindingModel'];
          'text/xml': components['schemas']['RssFeedBindingModel'];
          'application/*+xml': components['schemas']['RssFeedBindingModel'];
        };
      };
      responses: {
        /** @description Returns nothing */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Rss/organization/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Returns RSS feeds for the specified organization */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description organization id */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns RSS feed view models */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['RssFeedViewModel'][];
            'application/json': components['schemas']['RssFeedViewModel'][];
            'text/json': components['schemas']['RssFeedViewModel'][];
            'application/xml': components['schemas']['RssFeedViewModel'][];
            'text/xml': components['schemas']['RssFeedViewModel'][];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Rss/{id}/organization/{orgId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** Deletes the specified RSS feed in the specified organization */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description feed id */
          id: number;
          /** @description organization id */
          orgId: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns nothing */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Twilio/voice': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Returns voice from the specified text */
    get: {
      parameters: {
        query?: {
          text?: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns encoded voice content */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['HttpResponseMessage'];
            'application/json': components['schemas']['HttpResponseMessage'];
            'text/json': components['schemas']['HttpResponseMessage'];
            'application/xml': components['schemas']['HttpResponseMessage'];
            'text/xml': components['schemas']['HttpResponseMessage'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Twilio/voice.xml': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Returns encoded voice xml file from the specified text */
    get: {
      parameters: {
        query?: {
          text?: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns encoded voice content */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['HttpResponseMessage'];
            'application/json': components['schemas']['HttpResponseMessage'];
            'text/json': components['schemas']['HttpResponseMessage'];
            'application/xml': components['schemas']['HttpResponseMessage'];
            'text/xml': components['schemas']['HttpResponseMessage'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Twilio/reminder.xml': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Returns on call alert's encoded voice content */
    get: {
      parameters: {
        query?: {
          language?: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns encoded voice content */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/xml': components['schemas']['ContentResult'];
          };
        };
      };
    };
    put?: never;
    /** Returns on call alert's encoded voice content */
    post: {
      parameters: {
        query?: {
          language?: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns encoded voice content */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/xml': components['schemas']['ContentResult'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Twilio/externalContactVoiceCall.xml': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Returns encoded voice content for playing in a call to external contacts */
    get: {
      parameters: {
        query?: {
          voiceMessageUrl?: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns encoded voice content */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/xml': components['schemas']['ContentResult'];
          };
        };
      };
    };
    put?: never;
    /** Returns encoded voice content for playing in a call to external contacts */
    post: {
      parameters: {
        query?: {
          voiceMessageUrl?: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns encoded voice content */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/xml': components['schemas']['ContentResult'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Users': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get users list */
    get: {
      parameters: {
        query?: {
          /** @description possible values: "name", "nameDesc" - sort by name, "roles", "rolesDesc" - sort by the number of roles the user has, "email", "emailDesc" - sort alphabetically by their email, "created", "createdDesc" - sort by created date, "lastVisit, "lastVisitDesc" - sort by last visit date, "groups", "groupsDesc" - sort by users group memberships count,
           *                 "messages", "messagesDesc" - order by the number of messages sent by the user, "registrationEmailNotSent", "registrationEmailNotSentDesc" - sort by User.EmailNotSent property. No default value for this parameter. If not specified sorts users by their ID. */
          sort?: string;
          /** @description return user/s that contain in email or display name the specified search parameter */
          search?: string;
          /** @description skip the specified number of users */
          skip?: number;
          /** @description return the specified number of users, default value = 100 */
          limit?: number;
          /** @description only 2 possible values: "checklists" - returns users that have access to checklists; "personalAlarm" - returns users who could be selected as PersonalAlarm recipients */
          menuitem?: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns user view models */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['UserViewModel'][];
            'application/json': components['schemas']['UserViewModel'][];
            'text/json': components['schemas']['UserViewModel'][];
            'application/xml': components['schemas']['UserViewModel'][];
            'text/xml': components['schemas']['UserViewModel'][];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/Users/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Returns the specified user */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description user id */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Returns user view model */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'text/plain': components['schemas']['UserViewModelExtended'];
            'application/json': components['schemas']['UserViewModelExtended'];
            'text/json': components['schemas']['UserViewModelExtended'];
            'application/xml': components['schemas']['UserViewModelExtended'];
            'text/xml': components['schemas']['UserViewModelExtended'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    AccountDeleteBindingModel: {
      /** Format: int32 */
      userId?: number | null;
      password?: string | null;
      token?: string | null;
    };
    ActivateGroupBindingModel: {
      active: boolean;
    };
    ActiveMessageAlarmListViewModel: {
      /** Format: int32 */
      id?: number;
      /** Format: date-time */
      sent?: string;
      groups?: components['schemas']['IdNameWithOrganizationModel'][] | null;
      /** Format: int32 */
      senderId?: number | null;
      senderName?: string | null;
      senderPhotoFileName?: string | null;
      /** Format: int32 */
      emergencyTypeId?: number;
      emergencyTypeName?: string | null;
      emergencyTypeIconFileName?: string | null;
    };
    ActiveMessageAlarmListViewModelPaginatedList: {
      items?: components['schemas']['ActiveMessageAlarmListViewModel'][] | null;
      /** Format: int32 */
      totalCount?: number;
    };
    AdminStatisticsViewModel: {
      /** Format: int32 */
      organizationsCount?: number;
      /** Format: int32 */
      subOrganizationsCount?: number;
      /** Format: int32 */
      usersCount?: number;
      /** Format: int32 */
      inactiveUsersCount?: number;
    };
    AlarmTestStatusBindingModel: {
      /** Format: int32 */
      testId?: number;
      success?: boolean;
    };
    AlarmTestViewModel: {
      /** Format: int32 */
      testId?: number;
      /** Format: int32 */
      userId?: number;
      deviceType?: components['schemas']['DeviceType'];
      success?: boolean | null;
      /** Format: date-time */
      date?: string;
    };
    /**
     * Format: int32
     * @enum {integer}
     */
    AlertRecipientStatus: 0 | 1 | 2;
    ApplicationValidationResult: {
      readonly isValid?: boolean;
      readonly errorMessage?: string | null;
      readonly errorCode?: string | null;
      readonly additionalErrorDetails?: string[] | null;
    };
    AssignEmergencyTypeToSubOrganizationsBindingModel: {
      organizationIDs: number[];
    };
    AssignMenuItemBindingModel: {
      /** Format: int32 */
      menuItemID: number;
      /** Format: int32 */
      sortOrder?: number | null;
      assign: boolean;
    };
    /**
     * Format: int32
     * @enum {integer}
     */
    AttachmentType: 0 | 1 | 2;
    AuthTokenDisposeRequest: {
      token: string;
      sendNotification?: boolean;
    };
    AuthenticationStatusViewModel: {
      canConnectToDb?: boolean;
    };
    BulkSubOrganizationBindingModel: {
      /** Format: string */
      names: string[];
      /** Format: int32 */
      userLimit?: number | null;
      /** Format: string */
      organizationID: number;
    };
    ChangeMessageTypeBindingModel: {
      messageType?: components['schemas']['GroupMessageType'];
      replyType?: components['schemas']['ReplyType'];
    };
    ChangePasswordBindingModel: {
      /** Format: password */
      oldPassword: string;
      /** Format: password */
      newPassword: string;
    };
    ChecklistCommentViewModel: {
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      checklistID?: number | null;
      /** Format: int32 */
      checklistItemID?: number;
      author?: string | null;
      text?: string | null;
      type?: string | null;
      /** Format: date-time */
      sent?: string;
      imageFileName?: string | null;
    };
    ChecklistItemBulkBindingModel: {
      /** Format: int32 */
      id?: number | null;
      name?: string | null;
      /** Format: int32 */
      sortIndex?: number;
      delete?: boolean;
    };
    ChecklistItemViewModel: {
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      checklistID?: number;
      /** Format: int32 */
      sortIndex?: number;
      name?: string | null;
      complete?: boolean;
      comments?: components['schemas']['ChecklistCommentViewModel'][] | null;
    };
    ChecklistSummaryViewModel: {
      /** Format: int32 */
      active?: number;
      /** Format: int32 */
      template?: number;
      /** Format: int32 */
      ended?: number;
    };
    ChecklistViewModel: {
      /** Format: int32 */
      id?: number;
      name?: string | null;
      type?: string | null;
      status?: string | null;
      /** Format: date-time */
      created?: string;
      /** Format: date-time */
      started?: string | null;
      /** Format: date-time */
      ended?: string | null;
      /** Format: int32 */
      totalTasks?: number;
      /** Format: int32 */
      completeTasks?: number;
      sharedGroups?: number[] | null;
      owner?: components['schemas']['UserViewModel'];
      lastEditor?: components['schemas']['UserViewModel'];
      /** Format: date-time */
      lastEdited?: string | null;
      /** Format: int32 */
      organizationId?: number | null;
      /** Format: int32 */
      templateId?: number | null;
      templateName?: string | null;
      /** Format: int32 */
      usersCount?: number;
      userNames?: string[] | null;
      userIds?: number[] | null;
      directUserShares?: components['schemas']['UserSimpleViewModel'][] | null;
      userSharesViaGroups?:
        | components['schemas']['UserSimpleViewModel'][]
        | null;
      /** Format: int32 */
      organizationsCount?: number;
      organizationNames?: string[] | null;
      organizationIds?: number[] | null;
      emergencyTypes?: components['schemas']['EmergencyTypeViewModel'][] | null;
    };
    /**
     * Format: int32
     * @enum {integer}
     */
    ClientType: 0 | 1 | 2;
    ClientVersionViewModel: {
      minimum?: string | null;
      latest?: string | null;
      latestDesktopApp?: string | null;
    };
    CodeLoginBindingModel: {
      code?: string | null;
      language?: string | null;
    };
    CommentBindingModel: {
      /** Format: multiline */
      text?: string | null;
      imageFileName?: string | null;
    };
    ContactBindingModel: {
      /** Format: int32 */
      organizationId?: number | null;
      global?: boolean;
      /** Format: int32 */
      id?: number;
      name?: string | null;
      title?: string | null;
      phone?: string | null;
      email?: string | null;
      organizationName?: string | null;
    };
    ContactListDetailsViewModel: {
      /** Format: int32 */
      id?: number;
      name?: string | null;
      /** Format: int32 */
      numberOfContacts?: number;
      /** Format: int32 */
      numberOfConfirmedContacts?: number;
    };
    ContactViewModel: {
      /** Format: int32 */
      id?: number;
      name?: string | null;
      title?: string | null;
      phone?: string | null;
      email?: string | null;
      /** Format: int32 */
      organizationId?: number | null;
      organizationName?: string | null;
    };
    ContentResult: {
      content?: string | null;
      contentType?: string | null;
      /** Format: int32 */
      statusCode?: number | null;
    };
    CopyGroupsBindingModel: {
      groupIds: number[];
    };
    CreateLocationBindingModel: {
      /** Format: string */
      name?: string | null;
      /** Format: double */
      latitude: number;
      /** Format: double */
      longitude: number;
    };
    Device: {
      id?: string | null;
      type?: components['schemas']['DeviceType'];
      /** Format: int32 */
      userID?: number | null;
      deleted?: boolean;
      userAgent?: string | null;
      appVersion?: string | null;
      /** Format: date-time */
      created?: string | null;
      /** Format: date-time */
      updated?: string | null;
    };
    /**
     * Format: int32
     * @enum {integer}
     */
    DeviceType: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7;
    DeviceViewModel: {
      ID?: string | null;
      Type?: string | null;
      /** Format: int32 */
      UserID?: number | null;
      Email?: string | null;
      Deleted?: boolean;
      readonly Active?: boolean;
      UserAgent?: string | null;
      /** Format: date-time */
      Created?: string | null;
      /** Format: date-time */
      Updated?: string | null;
    };
    DisposeAuthTokenForUsersBindingModel: {
      userIDs: number[];
      sendNotification?: boolean;
    };
    DocumentAndFoldersViewModel: {
      documents?: components['schemas']['DocumentViewModelBrief'][] | null;
      folders?: components['schemas']['FolderViewModelExtended'][] | null;
      /**
       * Format: int32
       * @description the overall number of documents
       */
      documentsCount?: number;
      /**
       * Format: int64
       * @description the size of documents directly shared with the specified group
       */
      documentsSizeDirectlyShared?: number;
      /**
       * Format: int64
       * @description the size of documents shared with the specified group via folder (the documents folder belongs to the specified group)
       */
      documentsSizeSharedViaFolder?: number;
    };
    DocumentDeleteBindingModel: {
      documentIds?: number[] | null;
    };
    DocumentGroupViewModel: {
      documentNameInGroup?: string | null;
      offline?: boolean;
      /** Format: int32 */
      id?: number;
      name?: string | null;
      /** Format: date-time */
      created?: string;
      /** Format: int32 */
      GroupID?: number;
      type?: components['schemas']['GroupType'];
      /** Format: int32 */
      groupMembersCount?: number;
      /** Format: int32 */
      readonly membersCount?: number;
    };
    DocumentShareBindingModel: {
      organizationIds?: number[] | null;
      groupIds?: number[] | null;
      folderIds?: number[] | null;
      userIds?: number[] | null;
      offline?: boolean;
    };
    DocumentViewModel: {
      localName?: string | null;
      /** Format: int32 */
      id?: number;
      name?: string | null;
      original_filen_name?: string | null;
      readonly document_url?: string | null;
      /** Format: int32 */
      group_id?: number | null;
      groups?: components['schemas']['DocumentGroupViewModel'][] | null;
      /** Format: int64 */
      file_size?: number;
      /** Format: date-time */
      upload_time?: string;
      readonly folderids?: number[] | null;
      offline?: boolean;
      /** Format: int32 */
      userId?: number | null;
      userName?: string | null;
      folders?: components['schemas']['FolderDocumentViewModel'][] | null;
      organizations?:
        | components['schemas']['OrganizationViewModelShortest'][]
        | null;
      users?: components['schemas']['UserViewModel'][] | null;
      default?: boolean;
      favorite?: boolean;
    };
    DocumentViewModelBrief: {
      /** Format: int32 */
      id?: number;
      name?: string | null;
      original_filen_name?: string | null;
      readonly document_url?: string | null;
      /** Format: int32 */
      group_id?: number | null;
      groups?: components['schemas']['DocumentGroupViewModel'][] | null;
      /** Format: int64 */
      file_size?: number;
      /** Format: date-time */
      upload_time?: string;
      readonly folderids?: number[] | null;
      offline?: boolean;
      /** Format: int32 */
      userId?: number | null;
      userName?: string | null;
      folders?: components['schemas']['FolderDocumentViewModel'][] | null;
      organizations?:
        | components['schemas']['OrganizationViewModelShortest'][]
        | null;
      users?: components['schemas']['UserViewModel'][] | null;
      default?: boolean;
      favorite?: boolean;
    };
    DownloadBindingModel: {
      documentIds?: number[] | null;
      folderIds?: number[] | null;
      singleFile?: boolean;
    };
    DownloadChkecklistsBindingModel: {
      checklistIds: number[];
    };
    EditChecklistItemBindingModel: {
      complete: boolean;
    };
    EditChecklistItemsBulkBindingModel: {
      items?: components['schemas']['ChecklistItemBulkBindingModel'][] | null;
    };
    EditMessageBindingModel: {
      /** Format: multiline */
      text?: string | null;
      photoFileName?: string | null;
      documentFileName?: string | null;
      photoFileNames?: string[] | null;
      documentFileNames?: string[] | null;
      audioFileNames?: string[] | null;
      groupDocumentIds?: number[] | null;
      subject?: string | null;
      attachments?:
        | components['schemas']['MessageAttachmentBindingModel'][]
        | null;
    };
    EditTutorialContentBindingModel: {
      language: string;
      title: string;
      /** Format: html */
      content: string;
    };
    EditTutorialSortOrderBindingModel: {
      /** Format: int32 */
      tutorialId: number;
      /** Format: int32 */
      sortOrder: number;
    };
    EditedUserData: {
      /** Format: int32 */
      userId?: number;
      oldData?: components['schemas']['UserImportData'];
      newData?: components['schemas']['UserImportData'];
      isImportedWithImportAccounts?: boolean;
    };
    EmailDailySummaryViewModel: {
      /** Format: int32 */
      organizationId?: number | null;
      organizationName?: string | null;
      /** Format: date-time */
      date?: string;
      /** Format: int32 */
      total?: number;
      /** Format: int32 */
      successful?: number;
      /** Format: int32 */
      failed?: number;
    };
    EmailLogViewModel: {
      /** Format: int32 */
      id?: number;
      /** Format: date-time */
      date?: string;
      subject?: string | null;
      emailProvider?: components['schemas']['EmailProvider'];
      /** Format: int32 */
      organizationId?: number;
      organizationName?: string | null;
      recipients?:
        | components['schemas']['EmailRecipientRecordViewModel'][]
        | null;
    };
    /**
     * Format: int32
     * @enum {integer}
     */
    EmailProvider: 0 | 1 | 2;
    EmailProviderSummaryViewModel: {
      /** Format: int32 */
      organizationId?: number | null;
      organizationName?: string | null;
      emailProvider?: components['schemas']['EmailProvider'];
      /** Format: int32 */
      total?: number;
      /** Format: int32 */
      successful?: number;
      /** Format: int32 */
      failed?: number;
    };
    EmailRecipientRecordViewModel: {
      /** Format: int32 */
      id?: number;
      emailAddress?: string | null;
      success?: boolean;
    };
    /**
     * Format: int32
     * @enum {integer}
     */
    EmailSendMethod: 0 | 1;
    /**
     * Format: int32
     * @enum {integer}
     */
    EmergencyReportAmplitude: 1 | 2 | 3 | 4 | 5;
    EmergencyReportBindingModel: {
      type: components['schemas']['EmergencyReportType'];
      /** Format: int32 */
      crisisID?: number | null;
      /** Format: date-time */
      startTime: string;
      /** Format: date-time */
      endTime: string;
      amplitude?: components['schemas']['EmergencyReportAmplitude'];
      depth?: components['schemas']['EmergencyReportDepth'];
      language?: string | null;
      /** Format: int32 */
      organizationID?: number | null;
      includeSuborgs?: boolean;
      /** Format: int32 */
      groupId?: number | null;
    };
    EmergencyReportConfigModel: {
      /** Format: int32 */
      startDaysLimit?: number;
      /** Format: int32 */
      endDaysLimit?: number;
    };
    /**
     * Format: int32
     * @enum {integer}
     */
    EmergencyReportDepth: 1 | 2;
    EmergencyReportGroupViewModel: {
      /** Format: int32 */
      id?: number;
      name?: string | null;
      hidden?: boolean;
      receivers?:
        | components['schemas']['EmergencyReportReceiverViewModel'][]
        | null;
    };
    EmergencyReportItemViewModel: {
      /** Format: int32 */
      id?: number | null;
      /** Format: date-time */
      timestamp?: string;
      /** Format: date-span */
      deltaTime?: string;
      /** Format: int32 */
      msgtype?: number;
      actionType?: string | null;
      actionName?: string | null;
      msgtext?: string | null;
      images?: string[] | null;
      documents?: string[] | null;
      audioFiles?: string[] | null;
      sender?: string | null;
      sendertype?: components['schemas']['SenderType'];
      in_groups?:
        | components['schemas']['EmergencyReportGroupViewModel'][]
        | null;
      /** Format: int32 */
      emergency_type?: number | null;
      emergency_type_name?:
        | components['schemas']['LocalizedNameViewModel'][]
        | null;
      /** Format: double */
      latitude?: number | null;
      /** Format: double */
      longitude?: number | null;
      location_name?: string | null;
      location_time?: string | null;
      initialId?: string | null;
      /** Format: int32 */
      initial_message_type?: number | null;
      /** Format: int32 */
      initial_message_subtype?: number | null;
      message_recipients?:
        | components['schemas']['MessageRecipientViewModel'][]
        | null;
      organization?: components['schemas']['OrganizationViewModelShortest'];
      ended?: boolean | null;
      isInitial?: boolean;
    };
    EmergencyReportReceiverViewModel: {
      /** Format: int32 */
      id?: number;
      name?: string | null;
      email?: string | null;
    };
    EmergencyReportStatsViewModel: {
      /** Format: int32 */
      totalUsers?: number | null;
      /** Format: int32 */
      activeUsers?: number;
      /** Format: int32 */
      groupsTotal?: number;
      /** Format: int32 */
      messagesTotal?: number;
    };
    /**
     * Format: int32
     * @enum {integer}
     */
    EmergencyReportType: 1 | 2;
    EmergencyReportViewModel: {
      emergency?: components['schemas']['EmergencyViewModel'];
      stats?: components['schemas']['EmergencyReportStatsViewModel'];
      items?: components['schemas']['EmergencyReportItemViewModel'][] | null;
    };
    EmergencyTypeBindingModel: {
      /** Format: int32 */
      organizationID?: number | null;
      color?: string | null;
      icon?: string | null;
      includeCrisisTeam?: boolean;
      noGroup?: boolean;
      skipMap?: boolean;
      names?: components['schemas']['LocalizedNameBindingModel'][] | null;
      texts?: components['schemas']['LocalizedTextBindingModel'][] | null;
      groupIds?: number[] | null;
      /** Format: int32 */
      order: number;
      /** Format: int32 */
      eventCodeId?: number | null;
      hideFromMainAccountUsers?: boolean;
      blocking?: boolean;
      warningStep?: boolean | null;
      allowCustomizedText?: boolean | null;
      /** Format: int32 */
      checkListTemplateId?: number | null;
      /**
       * Format: int32
       * @description Possible values: null, 1 (null: use old siren sound, 1: use alternative sound)
       */
      soundConfigurationId?: number | null;
    };
    EmergencyTypeIconViewModel: {
      /** Format: int32 */
      Id?: number | null;
      FileName?: string | null;
    };
    EmergencyTypeViewModel: {
      /** Format: int32 */
      ID?: number | null;
      OrganizationName?: string | null;
      /** Format: int32 */
      OrganizationID?: number | null;
      /** Format: int32 */
      SuborganizationID?: number | null;
      SuborganizationName?: string | null;
      Color?: string | null;
      Icon?: string | null;
      IncludeCrisisTeam?: boolean;
      Deleted?: boolean;
      NoGroup?: boolean;
      Names?: components['schemas']['LocalizedNameViewModel'][] | null;
      Texts?: components['schemas']['LocalizedTextViewModel'][] | null;
      /** Format: int32 */
      Order?: number;
      SkipMap?: boolean;
      /** Format: int32 */
      eventCodeId?: number | null;
      hideFromMainAccountUsers?: boolean;
      /** Format: int32 */
      checkListTemplateId?: number | null;
      allowCustomizedText?: boolean;
      Groups?: components['schemas']['GroupViewModelSimple'][] | null;
      isMandatory?: boolean;
      linkedSubOrganizationsWithGroups?:
        | components['schemas']['SubOrganizationSimpleViewModel'][]
        | null;
      configuredForSosAlarm?: boolean;
      warningStep?: boolean;
      blocking?: boolean;
      /**
       * Format: int32
       * @description Possible values: null, 1 (null: use old siren sound, 1: use alternative sound)
       */
      soundConfigurationId?: number | null;
    };
    EmergencyViewModel: {
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      emergency_type?: number;
      emergency_type_name?:
        | components['schemas']['LocalizedNameViewModel'][]
        | null;
      group_names?: string[] | null;
      /** Format: date-time */
      created_time?: string | null;
      /** Format: date-time */
      end_time?: string | null;
      status?: boolean;
      /** Format: int32 */
      informed_people?: number;
      /** Format: int32 */
      active_people?: number;
      /** Format: int32 */
      messages?: number;
      location_name?: string | null;
      /** Format: double */
      latitude?: number | null;
      /** Format: double */
      longitude?: number | null;
      /** Format: date-time */
      server_time?: string;
      /** Format: date-time */
      utc_time?: string;
      emergency_type_icon_file_name?: string | null;
      emergency_type_color?: string | null;
      location_time?: string | null;
      groups?: components['schemas']['GroupViewModelSimple'][] | null;
    };
    EnableCustomMenuBindingModel: {
      enable: boolean;
    };
    EnableMenuItemBindingModel: {
      /** Format: int32 */
      menuItemID: number;
      enable: boolean;
    };
    EntityChangeLogViewModel: {
      /** Format: int32 */
      id?: number;
      /** Format: date-time */
      date?: string;
      /** Format: int32 */
      userID?: number | null;
      userEmail?: string | null;
      method?: string | null;
      route?: string | null;
      requestBody?: unknown;
      entityName?: string | null;
      /** Format: int32 */
      entityID?: number;
      changedUserEmail?: string | null;
      oldValue?: unknown;
      newValue?: unknown;
      ip?: string | null;
      userAgent?: string | null;
    };
    ErrorMessageViewModel: {
      Message?: string | null;
      Code?: string | null;
    };
    EventCodeViewModel: {
      /** Format: int32 */
      id?: number;
      code?: string | null;
      name?: string | null;
      /** Format: int32 */
      organizationId?: number;
    };
    ExternalContactBindingModel: {
      name?: string | null;
      title?: string | null;
      email?: string | null;
      phoneNumber1?: string | null;
      phoneNumber2?: string | null;
      contactListIds?: number[] | null;
    };
    ExternalContactListBindingModel: {
      /** Format: int32 */
      parentOrganizationId?: number | null;
      name: string;
    };
    ExternalContactListDetailedViewModel: {
      /** Format: int32 */
      numberOfContactsWithEmail?: number;
      /** Format: int32 */
      numberOfContactsWithPhoneNumber?: number;
      /** Format: int32 */
      id?: number;
      name?: string | null;
      /** Format: int32 */
      numberOfContacts?: number;
    };
    ExternalContactListEditBindingModel: {
      name: string;
    };
    ExternalContactListViewModel: {
      /** Format: int32 */
      id?: number;
      name?: string | null;
      /** Format: int32 */
      numberOfContacts?: number;
    };
    ExternalContactSMSCount: {
      /** Format: int32 */
      count?: number;
      /** Format: date-time */
      time?: string;
    };
    ExternalContactViewModel: {
      /** Format: int32 */
      id?: number;
      name?: string | null;
      title?: string | null;
      email?: string | null;
      phoneNumber1?: string | null;
      phoneNumber2?: string | null;
      contactLists?: components['schemas']['IdNameModel'][] | null;
    };
    ExternalContactViewModelPaginatedList: {
      items?: components['schemas']['ExternalContactViewModel'][] | null;
      /** Format: int32 */
      totalCount?: number;
    };
    ExternalContactsDeleteBindingModel: {
      contactIds: number[];
    };
    ExternalContactsImportCsvResultViewModel: {
      /** Format: int32 */
      importedCount?: number;
      /** Format: int32 */
      updatedCount?: number;
    };
    FirebaseReport: {
      /** Format: int64 */
      multicast_id?: number;
      /** Format: int32 */
      success?: number;
      /** Format: int32 */
      failure?: number;
      /** Format: int32 */
      canonical_ids?: number;
      results?: components['schemas']['NotificationResult'][] | null;
    };
    FolderBindingModel: {
      /** Format: string */
      name: string;
      /** Format: int32 */
      groupID?: number | null;
      offline?: boolean;
      /** Format: int32 */
      organizationId?: number | null;
      /** Format: int32 */
      userId?: number | null;
    };
    FolderDeleteBindingModel: {
      folderIds?: number[] | null;
    };
    FolderDocumentViewModel: {
      documentNameInFolder?: string | null;
      /** Format: int32 */
      ID?: number;
      Name?: string | null;
      /** Format: int32 */
      GroupID?: number | null;
      groupName?: string | null;
      Offline?: boolean;
      /** Format: int32 */
      userId?: number | null;
      userName?: string | null;
      /** Format: date-time */
      creationTime?: string | null;
      favorited?: boolean | null;
    };
    FolderViewModel: {
      /** Format: int32 */
      ID?: number;
      Name?: string | null;
      /** Format: int32 */
      GroupID?: number | null;
      groupName?: string | null;
      Offline?: boolean;
      /** Format: int32 */
      userId?: number | null;
      userName?: string | null;
      /** Format: date-time */
      creationTime?: string | null;
      favorited?: boolean | null;
    };
    FolderViewModelExtended: {
      organizations?:
        | components['schemas']['OrganizationViewModelShortest'][]
        | null;
      users?: components['schemas']['UserViewModel'][] | null;
      groups?: components['schemas']['GroupViewModelSimple'][] | null;
      /** Format: int32 */
      numberOfDocuments?: number;
      /** Format: int32 */
      readonly groupsCount?: number;
      /** Format: int32 */
      ID?: number;
      Name?: string | null;
      /** Format: int32 */
      GroupID?: number | null;
      groupName?: string | null;
      Offline?: boolean;
      /** Format: int32 */
      userId?: number | null;
      userName?: string | null;
      /** Format: date-time */
      creationTime?: string | null;
      favorited?: boolean | null;
    };
    FooterDataViewModel: {
      activeEmergency?: boolean;
      /** Format: int32 */
      unreadMessagesAndRepliesCount?: number;
    };
    ForwardMessageBindingModel: {
      groups?: number[] | null;
      users?: number[] | null;
    };
    GetAdminUsersAccountBindingModel: {
      sort?: string | null;
      search?: string | null;
      /** Format: int32 */
      skip?: number | null;
      /** Format: int32 */
      limit?: number | null;
      organization?: number[] | null;
      unsentOnly?: boolean;
      neverLoggedIn?: boolean;
      showDeleted?: boolean;
      inviteStatus?: components['schemas']['UserInviteStatus'][] | null;
      includeSuborgs?: boolean;
      menuItem?: string | null;
      isOrgManager?: boolean | null;
      creationMethod?: components['schemas']['UserCreationMethod'][] | null;
      lastActive?: components['schemas']['UserLastActiveStatus'][] | null;
      alarmTest?: components['schemas']['UserAlarmTestStatus'][] | null;
    };
    GroupAddMemberModel: {
      /** Format: int32 */
      groupId?: number | null;
      /** Format: int32 */
      Id?: number | null;
      Email?: string | null;
      admin?: boolean;
    };
    GroupAlarmBindingModel: {
      text: string;
      groupIds?: number[] | null;
      userIds?: number[] | null;
    };
    GroupBindingChangeNameModel: {
      /** Format: string */
      name: string;
    };
    GroupBindingModel: {
      /** Format: string */
      name: string;
      /** Format: int32 */
      locationID?: number | null;
      /** Format: int32 */
      userid?: number | null;
      memberEmergency?: boolean;
      openCalendarWriteAccess?: boolean;
      searchable?: boolean;
      adminSetsInfo?: boolean;
      hidden?: boolean;
      /** Format: int32 */
      groupType?: number | null;
      /** Format: double */
      longitude?: number | null;
      /** Format: double */
      latitude?: number | null;
      /** Format: int32 */
      organizationID?: number | null;
      active?: boolean | null;
      userResolve?: components['schemas']['UserResolveBindingModel'][] | null;
      usableForSuborganizationEmergencyTypes?: boolean;
      description?: string | null;
      imageFileName?: string | null;
      contactPersonName?: string | null;
      contactPersonEmailAddress?: string | null;
      contactPersonPhoneNumber?: string | null;
      /** Format: int32 */
      codesQuantity?: number | null;
      reusableCode?: boolean | null;
      importId?: string | null;
      contactPersonTitle?: string | null;
    };
    GroupCopyViewModel: {
      /** Format: int32 */
      Copied?: number;
      /** Format: int32 */
      NodFound?: number;
    };
    GroupMemberViewModel: {
      /** Format: int32 */
      groupID?: number;
      /** Format: int32 */
      userID?: number;
      info?: string | null;
      admin?: boolean;
      showPhone?: boolean;
      /** Format: date-time */
      lastAccess?: string | null;
      phoneNumber?: string | null;
      userName?: string | null;
      userEmail?: string | null;
      /** Format: date-time */
      joined?: string;
      photoFileName?: string | null;
      unavailable?: boolean;
      /** Format: date-time */
      unavailableDateTo?: string | null;
      readonly available?: boolean;
    };
    GroupMemberViewModelFull: {
      /** Format: date-time */
      created?: string;
      /** Format: int32 */
      locationID?: number;
      registrationEmailNotSent?: boolean;
      /** Format: date-time */
      registrationEmailSent?: string | null;
      registrationTokenExpired?: boolean | null;
      /** Format: int32 */
      groupID?: number;
      /** Format: int32 */
      userID?: number;
      info?: string | null;
      admin?: boolean;
      showPhone?: boolean;
      /** Format: date-time */
      lastAccess?: string | null;
      phoneNumber?: string | null;
      userName?: string | null;
      userEmail?: string | null;
      /** Format: date-time */
      joined?: string;
      photoFileName?: string | null;
      unavailable?: boolean;
      /** Format: date-time */
      unavailableDateTo?: string | null;
      readonly available?: boolean;
    };
    /**
     * Format: int32
     * @enum {integer}
     */
    GroupMessageType: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12;
    GroupStatus: {
      /** Format: int32 */
      id?: number;
      status?: boolean;
      addToGroupOrganization?: boolean | null;
    };
    /**
     * Format: int32
     * @enum {integer}
     */
    GroupType: 0 | 1 | 2 | 3 | 4;
    GroupViewModel: {
      /** Format: int32 */
      locationID?: number;
      memberEmergency?: boolean;
      openCalendarWriteAccess?: boolean;
      searchable?: boolean;
      adminSetsInfo?: boolean;
      member?: boolean | null;
      admin?: boolean | null;
      hidden?: boolean;
      menuItems?: string[] | null;
      /** Format: int32 */
      organizationID?: number | null;
      organizationName?: string | null;
      /** Format: int32 */
      subOrganizationID?: number | null;
      subOrganizationname?: string | null;
      /** Format: int32 */
      groupMembersCount?: number;
      /** Format: int32 */
      readonly membersCount?: number;
      description?: string | null;
      imageFileName?: string | null;
      contactPersonName?: string | null;
      contactPersonEmailAddress?: string | null;
      contactPersonPhoneNumber?: string | null;
      contactPersonTitle?: string | null;
      /** Format: int32 */
      id?: number;
      name?: string | null;
      /** Format: date-time */
      created?: string;
      /** Format: int32 */
      GroupID?: number;
      type?: components['schemas']['GroupType'];
    };
    GroupViewModelExtended: {
      municipality?: string | null;
      county?: string | null;
      /** Format: int32 */
      groupType?: number;
      /** Format: int32 */
      totalMessageCount?: number | null;
      /** Format: double */
      longitude?: number;
      /** Format: double */
      latitude?: number;
      /** Format: date-time */
      lastSentMessage?: string | null;
      /** Format: int32 */
      groupsInOrganization?: number | null;
      /** Format: int32 */
      personsInOrganization?: number | null;
      /** Format: int32 */
      admins?: number | null;
      /** Format: int32 */
      readonly membersInGroup?: number | null;
      country?: string | null;
      region?: string | null;
      town?: string | null;
      subLocality?: string | null;
      active?: boolean | null;
      /** Format: date-time */
      deleted?: string | null;
      /** Format: int32 */
      emergencyTypesCount?: number;
      usableForSuborganizationEmergencyTypes?: boolean;
      memberIds?: number[] | null;
      locationname?: string | null;
      readonly containsUsersFromOtherOrganizations?: boolean;
      /** Format: int32 */
      totalReferralCodesUses?: number | null;
      /** Format: int32 */
      remainingReferralCodesUses?: number | null;
      referralCode?: string | null;
      importId?: string | null;
      reusableCode?: boolean | null;
      /** Format: int32 */
      locationID?: number;
      memberEmergency?: boolean;
      openCalendarWriteAccess?: boolean;
      searchable?: boolean;
      adminSetsInfo?: boolean;
      member?: boolean | null;
      admin?: boolean | null;
      hidden?: boolean;
      menuItems?: string[] | null;
      /** Format: int32 */
      organizationID?: number | null;
      organizationName?: string | null;
      /** Format: int32 */
      subOrganizationID?: number | null;
      subOrganizationname?: string | null;
      /** Format: int32 */
      groupMembersCount?: number;
      /** Format: int32 */
      readonly membersCount?: number;
      description?: string | null;
      imageFileName?: string | null;
      contactPersonName?: string | null;
      contactPersonEmailAddress?: string | null;
      contactPersonPhoneNumber?: string | null;
      contactPersonTitle?: string | null;
      /** Format: int32 */
      id?: number;
      name?: string | null;
      /** Format: date-time */
      created?: string;
      /** Format: int32 */
      GroupID?: number;
      type?: components['schemas']['GroupType'];
    };
    GroupViewModelSimple: {
      /** Format: int32 */
      id?: number;
      name?: string | null;
      /** Format: date-time */
      created?: string;
      /** Format: int32 */
      GroupID?: number;
      type?: components['schemas']['GroupType'];
      /** Format: int32 */
      groupMembersCount?: number;
      /** Format: int32 */
      readonly membersCount?: number;
    };
    GroupsViewModel: {
      /** Format: int32 */
      totalCount?: number;
      groups?: components['schemas']['GroupViewModelExtended'][] | null;
    };
    HttpContent: {
      readonly headers?:
        | components['schemas']['StringStringIEnumerableKeyValuePair'][]
        | null;
    };
    HttpMethod: {
      method?: string | null;
    };
    HttpRequestMessage: {
      version?: string | null;
      versionPolicy?: components['schemas']['HttpVersionPolicy'];
      content?: components['schemas']['HttpContent'];
      method?: components['schemas']['HttpMethod'];
      /** Format: uri */
      requestUri?: string | null;
      readonly headers?:
        | components['schemas']['StringStringIEnumerableKeyValuePair'][]
        | null;
      /** @deprecated */
      readonly properties?: {
        [key: string]: unknown;
      } | null;
      readonly options?: {
        [key: string]: unknown;
      } | null;
    };
    HttpResponseMessage: {
      version?: string | null;
      content?: components['schemas']['HttpContent'];
      statusCode?: components['schemas']['HttpStatusCode'];
      reasonPhrase?: string | null;
      readonly headers?:
        | components['schemas']['StringStringIEnumerableKeyValuePair'][]
        | null;
      readonly trailingHeaders?:
        | components['schemas']['StringStringIEnumerableKeyValuePair'][]
        | null;
      requestMessage?: components['schemas']['HttpRequestMessage'];
      readonly isSuccessStatusCode?: boolean;
    };
    /**
     * Format: int32
     * @enum {integer}
     */
    HttpStatusCode:
      | 100
      | 101
      | 102
      | 103
      | 200
      | 201
      | 202
      | 203
      | 204
      | 205
      | 206
      | 207
      | 208
      | 226
      | 300
      | 301
      | 302
      | 303
      | 304
      | 305
      | 306
      | 307
      | 308
      | 400
      | 401
      | 402
      | 403
      | 404
      | 405
      | 406
      | 407
      | 408
      | 409
      | 410
      | 411
      | 412
      | 413
      | 414
      | 415
      | 416
      | 417
      | 421
      | 422
      | 423
      | 424
      | 426
      | 428
      | 429
      | 431
      | 451
      | 500
      | 501
      | 502
      | 503
      | 504
      | 505
      | 506
      | 507
      | 508
      | 510
      | 511;
    /**
     * Format: int32
     * @enum {integer}
     */
    HttpVersionPolicy: 0 | 1 | 2;
    IdNameModel: {
      /** Format: int32 */
      id?: number;
      name?: string | null;
    };
    IdNameWithOrganizationModel: {
      organization?: components['schemas']['IdNameModel'];
      /** Format: int32 */
      id?: number;
      name?: string | null;
    };
    /**
     * Format: int32
     * @enum {integer}
     */
    ImportSource: 0 | 1 | 2;
    ImportSummaryReportViewModel: {
      readonly summaries?:
        | components['schemas']['ImportSummaryViewModel'][]
        | null;
      /** Format: int32 */
      total?: number;
    };
    ImportSummaryViewModel: {
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      organizationId?: number;
      /** Format: date-time */
      time?: string;
      /** Format: int32 */
      usersAdded?: number;
      /** Format: int32 */
      usersUpdated?: number;
      /** Format: int32 */
      usersDeleted?: number;
      /** Format: int32 */
      usersInvalidData?: number;
      /** Format: int32 */
      usersErrors?: number;
      /** Format: int32 */
      groupsAdded?: number;
      comment?: string | null;
      /** Format: int32 */
      totalEntries?: number;
    };
    /**
     * Format: int32
     * @enum {integer}
     */
    ImportType: 0 | 1;
    InformUsersBindingModel: {
      userIds: number[];
      text?: string | null;
      emailSubject?: string | null;
    };
    InitiateAlarmTestBindingModel: {
      token: string;
      deviceType: components['schemas']['DeviceType'];
    };
    InitiateAlarmTestViewModel: {
      /** Format: int32 */
      testId?: number;
    };
    InputData: {
      importId?: string | null;
      email?: string | null;
      name?: string | null;
      title?: string | null;
      phone?: string | null;
      skip?: boolean;
      secondaryPhoneNumber?: string | null;
      groups?: string[] | null;
    };
    /**
     * Format: int32
     * @enum {integer}
     */
    IntercomClientType: 0 | 1 | 2;
    IntercomTokenViewModel: {
      userID?: string | null;
      token?: string | null;
      organizations?:
        | components['schemas']['OrganizationForIntercomViewModel'][]
        | null;
    };
    LinkEmergencyTypeToGroupsBindingModel: {
      groupIDs: number[];
      /** Format: int32 */
      subOrganizationID: number;
      noGroup?: boolean | null;
      skipMap?: boolean | null;
      allowCustomizedText?: boolean | null;
      warningStep?: boolean | null;
      /** Format: int32 */
      checklistTemplateId?: number | null;
      blocking?: boolean | null;
      texts?: components['schemas']['LocalizedTextBindingModel'][] | null;
    };
    LocalizedNameBindingModel: {
      language?: string | null;
      name?: string | null;
      shortName?: string | null;
    };
    LocalizedNameViewModel: {
      Language?: string | null;
      Name?: string | null;
      ShortName?: string | null;
    };
    LocalizedTextBindingModel: {
      language?: string | null;
      text?: string | null;
    };
    LocalizedTextViewModel: {
      Language?: string | null;
      Text?: string | null;
    };
    LocationViewModel: {
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      creatorUserID?: number | null;
      /** Format: date-time */
      created?: string;
      name?: string | null;
      /** Format: double */
      latitude?: number;
      /** Format: double */
      longitude?: number;
      hidden?: boolean;
      geoCountry?: string | null;
      geoRegion?: string | null;
      geoTown?: string | null;
      geoSubLocality?: string | null;
      geoStreet?: string | null;
      geoStreetNumber?: string | null;
      geoPostalCode?: string | null;
      timeZone?: string | null;
    };
    LoginBindingModel: {
      /** Format: email */
      email?: string | null;
      /** Format: password */
      password?: string | null;
      language?: string | null;
      /** Format: double */
      longitude?: number | null;
      /** Format: double */
      latitude?: number | null;
      code?: string | null;
      token?: string | null;
      IsDesktopApp?: boolean | null;
      oauth_code?: string | null;
      redirect_url?: string | null;
      sso_provider?: components['schemas']['SsoProvider'];
      email_2fa_code?: boolean;
      clientType?: components['schemas']['ClientType'];
    };
    ManageUserGroupsBindingModel: {
      /** Format: int32 */
      userId?: number;
      groupStatuses?: components['schemas']['GroupStatus'][] | null;
    };
    ManageUserGroupsViewModel: {
      /** Format: int32 */
      SuccessAdding?: number;
      /** Format: int32 */
      FailedAdding?: number;
      /** Format: int32 */
      SuccessRemoving?: number;
      /** Format: int32 */
      FailedRemoving?: number;
    };
    MeetingRoomCreationModel: {
      name?: string | null;
      isActive?: boolean;
      description?: string | null;
      url?: string | null;
      groupIds?: number[] | null;
    };
    MeetingRoomEditionModel: {
      name?: string | null;
      isActive?: boolean;
      description?: string | null;
      url?: string | null;
      groupIds?: number[] | null;
    };
    MeetingRoomSimpleViewModel: {
      /** Format: int32 */
      id?: number;
      name?: string | null;
      description?: string | null;
      url?: string | null;
    };
    MeetingRoomViewModel: {
      /** Format: int32 */
      id?: number;
      name?: string | null;
      isActive?: boolean;
      description?: string | null;
      url?: string | null;
      /** Format: int32 */
      organizationId?: number;
      groupIds?: number[] | null;
    };
    MenuItemDisplayNameViewModel: {
      language?: string | null;
      name?: string | null;
    };
    MenuItemViewModel: {
      mandatory?: boolean;
      /** Format: int32 */
      sortOrder?: number | null;
      readonly displayNames?:
        | components['schemas']['MenuItemDisplayNameViewModel'][]
        | null;
      assigned?: boolean | null;
      /** Format: int32 */
      id?: number;
      technicalName?: string | null;
    };
    MenuItemViewModelBrief: {
      /** Format: int32 */
      id?: number;
      technicalName?: string | null;
    };
    MessageAttachmentBindingModel: {
      fileName?: string | null;
      type?: components['schemas']['AttachmentType'];
      /** Format: int64 */
      size?: number | null;
    };
    MessageAttachmentViewModel: {
      fileName?: string | null;
      type?: components['schemas']['AttachmentType'];
      /** Format: int64 */
      size?: number | null;
      /** Format: int64 */
      fileSize?: number | null;
    };
    MessageListViewModel: {
      /** Format: int32 */
      id?: number;
      type?: components['schemas']['GroupMessageType'];
      /** Format: int32 */
      subType?: number;
      replyType?: components['schemas']['ReplyType'];
      /** Format: int32 */
      senderID?: number | null;
      senderName?: string | null;
      /** Format: int32 */
      readonly groupID?: number | null;
      readonly groupIDs?: number[] | null;
      readonly groupName?: string | null;
      readonly groupNames?: string[] | null;
      /** Format: int32 */
      locationID?: number | null;
      subject?: string | null;
      text?: string | null;
      photoFileName?: string | null;
      documentFileName?: string | null;
      attachments?:
        | components['schemas']['MessageAttachmentViewModel'][]
        | null;
      /** Format: date-time */
      sent?: string;
      /** Format: date-time */
      lastModified?: string;
      /** Format: date-time */
      readonly lastRead?: string | null;
      recalled?: boolean;
      hasBlockingAlarm?: boolean;
      readonly lastReplyText?: string | null;
      /** Format: date-time */
      readonly lastReplySent?: string | null;
      readonly lastReplySender?: string | null;
      /** Format: int32 */
      readonly lastReplySenderId?: number | null;
      /** Format: int32 */
      readonly lastReplyLocationID?: number | null;
      readonly lastReplyLocationName?: string | null;
      /** Format: int32 */
      recipientCount?: number;
      /** Format: int32 */
      recipientReadCount?: number | null;
      /** @description Returned only in case Message.Type == GroupMessageType.Message and message sent without any groups */
      readonly messageRecipients?:
        | components['schemas']['MessageRecipientViewModel'][]
        | null;
      /** Format: int32 */
      checklistID?: number | null;
      checklistName?: string | null;
      /** Format: int32 */
      readonly lastReplyChecklistID?: number | null;
      readonly lastReplyChecklistName?: string | null;
      profilePictureFileName?: string | null;
      readonly photoFileNames?: string[] | null;
      readonly documentFileNames?: string[] | null;
      readonly audioFileNames?: string[] | null;
      readonly searchReplyText?: string | null;
      /** Format: int32 */
      readonly searchReplyID?: number | null;
      readonly searchReplySender?: string | null;
      /** Format: int32 */
      readonly searchReplySenderId?: number | null;
      emergencyTypeName?: string | null;
      /** Format: int32 */
      emergencyTypeId?: number | null;
      edited?: boolean;
      /** Format: int32 */
      readonly repliesCount?: number;
      /** Format: int32 */
      readonly unreadRepliesCount?: number;
      readonly lastReplyPhotoFileNames?: string[] | null;
      readonly lastReplyDocumentFileNames?: string[] | null;
      readonly lastReplyAudioFileNames?: string[] | null;
      /** Format: int32 */
      musterID?: number | null;
      /** Format: int32 */
      onCallAlertID?: number | null;
      isCrisisTeamMember?: boolean;
      isLastReplyDeleted?: boolean | null;
      /** Format: date-time */
      lastReplySentTime?: string | null;
      emergencyTypeIconFileName?: string | null;
      /**
       * Format: date-time
       * @description In messages where I'm OK(muster), on call alerts or checklists are shared, returns time when they are ended
       *     Used in GET api/messages/list; GET api/messages/{id}
       */
      ended?: string | null;
      musterDeleted?: boolean | null;
    };
    MessageListViewModelV2: {
      /** Format: int32 */
      id?: number;
      type?: components['schemas']['GroupMessageType'];
      /** Format: int32 */
      subType?: number;
      replyType?: components['schemas']['ReplyType'];
      /** Format: int32 */
      senderID?: number | null;
      senderName?: string | null;
      /** Format: int32 */
      groupID?: number | null;
      groupIDs?: number[] | null;
      groupName?: string | null;
      groupNames?: string[] | null;
      /** Format: int32 */
      locationID?: number | null;
      subject?: string | null;
      text?: string | null;
      /** Format: date-time */
      sent?: string;
      recalled?: boolean;
      lastReplyText?: string | null;
      /** Format: date-time */
      lastReplySent?: string | null;
      lastReplySender?: string | null;
      /** Format: int32 */
      lastReplySenderId?: number | null;
      /** Format: int32 */
      lastReplyLocationID?: number | null;
      lastReplyLocationName?: string | null;
      messageRecipients?:
        | components['schemas']['MessageRecipientViewModel'][]
        | null;
      /** Format: int32 */
      checklistID?: number | null;
      photoFileNames?: string[] | null;
      documentFileNames?: string[] | null;
      audioFileNames?: string[] | null;
      searchReplyText?: string | null;
      /** Format: int32 */
      searchReplyID?: number | null;
      searchReplySender?: string | null;
      /** Format: int32 */
      searchReplySenderId?: number | null;
      emergencyTypeName?: string | null;
      /** Format: int32 */
      emergencyTypeId?: number | null;
      /** Format: int32 */
      unreadRepliesCount?: number;
      lastReplyPhotoFileNames?: string[] | null;
      lastReplyDocumentFileNames?: string[] | null;
      lastReplyAudioFileNames?: string[] | null;
      /** Format: int32 */
      musterID?: number | null;
      /** Format: int32 */
      onCallAlertID?: number | null;
      isLastReplyDeleted?: boolean | null;
      /** Format: date-time */
      lastReplySentTime?: string | null;
      /** Format: date-time */
      ended?: string | null;
    };
    MessageReadBindingModel: {
      read: boolean;
      replyIds?: number[] | null;
    };
    MessageRecipientViewModel: {
      /** Format: int32 */
      userID?: number;
      displayName?: string | null;
      photoFileName?: string | null;
      unavailable?: boolean;
      /** Format: date-time */
      unavailableDateTo?: string | null;
      readonly available?: boolean;
    };
    MessageRecipientViewModelFull: {
      /** Format: int32 */
      messageId?: number;
      read?: boolean;
      /** Format: date-time */
      lastRead?: string | null;
      /** Format: date-time */
      firstRead?: string | null;
      phoneNumber?: string | null;
      /** Format: int32 */
      userID?: number;
      displayName?: string | null;
      photoFileName?: string | null;
      unavailable?: boolean;
      /** Format: date-time */
      unavailableDateTo?: string | null;
      readonly available?: boolean;
    };
    MessageRecipientsBindingModel: {
      recipientIds: number[];
    };
    MessageToExternalContactListViewModel: {
      /** Format: int32 */
      id?: number;
      text?: string | null;
      contactLists?:
        | components['schemas']['ContactListDetailsViewModel'][]
        | null;
      /** Format: int32 */
      numberOfReceivers?: number;
      /** Format: int32 */
      numberOfConfirmedReceivers?: number;
      sendMethods?: components['schemas']['SendMethod'][] | null;
      senderName?: string | null;
      /** Format: int32 */
      senderId?: number;
      /** Format: date-time */
      sendTime?: string;
      sentWithConfirmationLink?: boolean;
    };
    MessageToExternalContactListWithRecipientsViewModel: {
      recipients?:
        | components['schemas']['MessageToExternalContactRecipientViewModel'][]
        | null;
      /** Format: int32 */
      id?: number;
      text?: string | null;
      contactLists?:
        | components['schemas']['ContactListDetailsViewModel'][]
        | null;
      /** Format: int32 */
      numberOfReceivers?: number;
      /** Format: int32 */
      numberOfConfirmedReceivers?: number;
      sendMethods?: components['schemas']['SendMethod'][] | null;
      senderName?: string | null;
      /** Format: int32 */
      senderId?: number;
      /** Format: date-time */
      sendTime?: string;
      sentWithConfirmationLink?: boolean;
    };
    MessageToExternalContactListsBindingModel: {
      text: string;
      sendMethods: components['schemas']['SendMethod'][];
      contactListIds: number[];
      generateToken?: boolean;
    };
    MessageToExternalContactRecipientViewModel: {
      readEmail?: boolean | null;
      readSms?: boolean | null;
      /** Format: int32 */
      id?: number;
      name?: string | null;
      title?: string | null;
      email?: string | null;
      phoneNumber1?: string | null;
      phoneNumber2?: string | null;
      /** Format: int32 */
      contactListId?: number;
      contactListName?: string | null;
      /** Format: date-time */
      emailReadTime?: string | null;
      /** Format: date-time */
      smsReadTime?: string | null;
    };
    MessageViewModel: {
      locationName?: string | null;
      goodStatus?: boolean | null;
      /** Format: int32 */
      situationReportID?: number | null;
      situationReportName?: string | null;
      /** Format: int32 */
      totalTaskCount?: number;
      /** Format: int32 */
      totalCompletedTasks?: number;
      /** Format: date-time */
      emergencyRecallTime?: string | null;
      Organization?: components['schemas']['OrganizationViewModelShortest'];
      organizations?:
        | components['schemas']['OrganizationViewModelShortest'][]
        | null;
      replies?: components['schemas']['ReplyViewModel'][] | null;
      readonly groups?: components['schemas']['GroupViewModel'][] | null;
      originalMessage?: components['schemas']['OriginalMessageViewModel'];
      emergencyTypePrewrittenText?: string | null;
      emergencyTypePrewrittenTexts?:
        | components['schemas']['LocalizedTextViewModel'][]
        | null;
      OnCallAlert?: components['schemas']['OnCallAlertViewModel'];
      /** Format: int32 */
      id?: number;
      type?: components['schemas']['GroupMessageType'];
      /** Format: int32 */
      subType?: number;
      replyType?: components['schemas']['ReplyType'];
      /** Format: int32 */
      senderID?: number | null;
      senderName?: string | null;
      /** Format: int32 */
      readonly groupID?: number | null;
      readonly groupIDs?: number[] | null;
      readonly groupName?: string | null;
      readonly groupNames?: string[] | null;
      /** Format: int32 */
      locationID?: number | null;
      subject?: string | null;
      text?: string | null;
      photoFileName?: string | null;
      documentFileName?: string | null;
      attachments?:
        | components['schemas']['MessageAttachmentViewModel'][]
        | null;
      /** Format: date-time */
      sent?: string;
      /** Format: date-time */
      lastModified?: string;
      /** Format: date-time */
      readonly lastRead?: string | null;
      recalled?: boolean;
      hasBlockingAlarm?: boolean;
      readonly lastReplyText?: string | null;
      /** Format: date-time */
      readonly lastReplySent?: string | null;
      readonly lastReplySender?: string | null;
      /** Format: int32 */
      readonly lastReplySenderId?: number | null;
      /** Format: int32 */
      readonly lastReplyLocationID?: number | null;
      readonly lastReplyLocationName?: string | null;
      /** Format: int32 */
      recipientCount?: number;
      /** Format: int32 */
      recipientReadCount?: number | null;
      /** @description Returned only in case Message.Type == GroupMessageType.Message and message sent without any groups */
      readonly messageRecipients?:
        | components['schemas']['MessageRecipientViewModel'][]
        | null;
      /** Format: int32 */
      checklistID?: number | null;
      checklistName?: string | null;
      /** Format: int32 */
      readonly lastReplyChecklistID?: number | null;
      readonly lastReplyChecklistName?: string | null;
      profilePictureFileName?: string | null;
      readonly photoFileNames?: string[] | null;
      readonly documentFileNames?: string[] | null;
      readonly audioFileNames?: string[] | null;
      readonly searchReplyText?: string | null;
      /** Format: int32 */
      readonly searchReplyID?: number | null;
      readonly searchReplySender?: string | null;
      /** Format: int32 */
      readonly searchReplySenderId?: number | null;
      emergencyTypeName?: string | null;
      /** Format: int32 */
      emergencyTypeId?: number | null;
      edited?: boolean;
      /** Format: int32 */
      readonly repliesCount?: number;
      /** Format: int32 */
      readonly unreadRepliesCount?: number;
      readonly lastReplyPhotoFileNames?: string[] | null;
      readonly lastReplyDocumentFileNames?: string[] | null;
      readonly lastReplyAudioFileNames?: string[] | null;
      /** Format: int32 */
      musterID?: number | null;
      /** Format: int32 */
      onCallAlertID?: number | null;
      isCrisisTeamMember?: boolean;
      isLastReplyDeleted?: boolean | null;
      /** Format: date-time */
      lastReplySentTime?: string | null;
      emergencyTypeIconFileName?: string | null;
      /**
       * Format: date-time
       * @description In messages where I'm OK(muster), on call alerts or checklists are shared, returns time when they are ended
       *     Used in GET api/messages/list; GET api/messages/{id}
       */
      ended?: string | null;
      musterDeleted?: boolean | null;
    };
    MessageViewModelV2: {
      /** Format: int32 */
      id?: number;
      type?: components['schemas']['GroupMessageType'];
      /** Format: int32 */
      subType?: number;
      replyType?: components['schemas']['ReplyType'];
      /** Format: int32 */
      senderID?: number | null;
      senderName?: string | null;
      /** Format: int32 */
      groupID?: number | null;
      groupIDs?: number[] | null;
      groupName?: string | null;
      groupNames?: string[] | null;
      /** Format: int32 */
      locationID?: number | null;
      subject?: string | null;
      text?: string | null;
      photoFileName?: string | null;
      attachments?:
        | components['schemas']['MessageAttachmentViewModel'][]
        | null;
      /** Format: date-time */
      sent?: string;
      /** Format: date-time */
      lastRead?: string | null;
      recalled?: boolean;
      hasBlockingAlarm?: boolean;
      lastReplyText?: string | null;
      /** Format: date-time */
      lastReplySent?: string | null;
      /** Format: int32 */
      lastReplySenderId?: number | null;
      /** Format: int32 */
      recipientCount?: number;
      /** Format: int32 */
      recipientReadCount?: number | null;
      messageRecipients?:
        | components['schemas']['MessageRecipientViewModel'][]
        | null;
      /** Format: int32 */
      checklistID?: number | null;
      checklistName?: string | null;
      profilePictureFileName?: string | null;
      photoFileNames?: string[] | null;
      documentFileNames?: string[] | null;
      audioFileNames?: string[] | null;
      emergencyTypeName?: string | null;
      /** Format: int32 */
      emergencyTypeId?: number | null;
      edited?: boolean;
      /** Format: int32 */
      musterID?: number | null;
      /** Format: int32 */
      onCallAlertID?: number | null;
      emergencyTypeIconFileName?: string | null;
      /** Format: date-time */
      ended?: string | null;
      musterDeleted?: boolean | null;
      goodStatus?: boolean | null;
      Organization?: components['schemas']['OrganizationViewModelShortest'];
      organizations?:
        | components['schemas']['OrganizationViewModelShortest'][]
        | null;
      replies?: components['schemas']['ReplyViewModel'][] | null;
      groups?: components['schemas']['GroupViewModel'][] | null;
      originalMessage?: components['schemas']['OriginalMessageViewModel'];
      emergencyTypePrewrittenText?: string | null;
      emergencyTypePrewrittenTexts?:
        | components['schemas']['LocalizedTextViewModel'][]
        | null;
      OnCallAlert?: components['schemas']['OnCallAlertViewModel'];
    };
    ModifyChecklistNameAndItemsBindingModel: {
      name?: string | null;
      items?: components['schemas']['ChecklistItemBulkBindingModel'][] | null;
    };
    ModifyChecklistSharesBindingModel: {
      userIds?: number[] | null;
      groupIds?: number[] | null;
    };
    MusterBindingModel: {
      name?: string | null;
      subject?: string | null;
      userIds?: number[] | null;
      groupIds?: number[] | null;
    };
    /**
     * Format: int32
     * @enum {integer}
     */
    MusterCreateSetting: 0 | 1;
    MusterGroupViewModel: {
      /** Format: int32 */
      id?: number;
      name?: string | null;
      image?: string | null;
    };
    MusterStatusBindingModel: {
      imok?: boolean;
      /** Format: int32 */
      locationId?: number | null;
    };
    MusterUserStatusViewModel: {
      /** Format: int32 */
      userid?: number;
      username?: string | null;
      /** Format: date-time */
      lastupdated?: string | null;
      imok?: boolean | null;
      /** Format: int32 */
      locationId?: number | null;
      locationName?: string | null;
      /** Format: double */
      locationLatitude?: number | null;
      /** Format: double */
      locationLongitude?: number | null;
    };
    MusterViewModel: {
      /** Format: int32 */
      id?: number;
      name?: string | null;
      subject?: string | null;
      /** Format: int32 */
      creatorid?: number | null;
      creatorname?: string | null;
      /** Format: date-time */
      created?: string;
      ended?: boolean;
      users?: components['schemas']['MusterUserStatusViewModel'][] | null;
      groups?: components['schemas']['MusterGroupViewModel'][] | null;
      /** Format: int32 */
      readonly recipients?: number;
      /** Format: int32 */
      readonly recipientsOk?: number;
      /** Format: int32 */
      readonly recipientsNotOk?: number;
    };
    MusterViewModelFull: {
      /** Format: int32 */
      id?: number;
      name?: string | null;
      subject?: string | null;
      /** Format: int32 */
      creatorid?: number | null;
      creatorname?: string | null;
      /** Format: date-time */
      created?: string;
      ended?: boolean;
      users?: components['schemas']['MusterUserStatusViewModel'][] | null;
      groups?: components['schemas']['MusterGroupViewModel'][] | null;
      /** Format: int32 */
      readonly recipients?: number;
      /** Format: int32 */
      readonly recipientsOk?: number;
      /** Format: int32 */
      readonly recipientsNotOk?: number;
    };
    NewsViewModel: {
      /** Format: int32 */
      sourceID?: number;
      /** Format: date-time */
      date?: string;
      geoRegion?: string | null;
      locationName?: string | null;
      type?: string | null;
      event?: string | null;
      text?: string | null;
      externalURL?: string | null;
      imageURL?: string | null;
      /** Format: int32 */
      feedID?: number;
      feedName?: string | null;
    };
    /**
     * Format: int32
     * @enum {integer}
     */
    NoticeType: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14;
    NoticeViewModel: {
      /** Format: int32 */
      id?: number;
      /** Format: date-time */
      createdTime?: string;
      subject?: string | null;
      text?: string | null;
      type?: components['schemas']['NoticeType'];
      /** Format: int32 */
      entityId?: number;
      /** Format: date-time */
      read?: string | null;
    };
    NotificationResult: {
      message_id?: string | null;
      error?: string | null;
    };
    NotificationsViewModel: {
      /** Format: int32 */
      ID?: number;
      Broker?: string | null;
      Payload?: unknown;
      Success?: boolean;
      Comment?: string | null;
      /** Format: date-time */
      Time?: string;
      Device?: components['schemas']['DeviceViewModel'];
    };
    OnCallAlertBindingModel: {
      /** Format: string */
      subject?: string | null;
      /** Format: string */
      text?: string | null;
      /** Format: int32 */
      groupID: number;
      recipientIds?: number[] | null;
    };
    OnCallAlertReceivedViewModel: {
      status?: components['schemas']['AlertRecipientStatus'];
      /** Format: int32 */
      id?: number;
      text?: string | null;
      subject?: string | null;
      /** Format: int32 */
      groupId?: number | null;
      groupName?: string | null;
      groupImage?: string | null;
      /** Format: int32 */
      senderId?: number | null;
      senderName?: string | null;
      /** Format: date-time */
      started?: string;
      ended?: boolean;
      /** Format: int32 */
      totalRecipients?: number;
      /** Format: int32 */
      totalAnswered?: number;
      /** Format: int32 */
      canParticipate?: number;
      deleted?: boolean;
    };
    OnCallAlertRecipientViewModel: {
      /** Format: int32 */
      userId?: number;
      userName?: string | null;
      status?: components['schemas']['AlertRecipientStatus'];
      /** Format: date-time */
      responseTime?: string | null;
      hasPhoneNumber?: boolean;
    };
    OnCallAlertStatusBindingModel: {
      status: components['schemas']['AlertRecipientStatus'];
    };
    OnCallAlertViewModel: {
      /** Format: int32 */
      id?: number;
      text?: string | null;
      subject?: string | null;
      /** Format: int32 */
      groupId?: number | null;
      groupName?: string | null;
      groupImage?: string | null;
      /** Format: int32 */
      senderId?: number | null;
      senderName?: string | null;
      /** Format: date-time */
      started?: string;
      ended?: boolean;
      /** Format: int32 */
      totalRecipients?: number;
      /** Format: int32 */
      totalAnswered?: number;
      /** Format: int32 */
      canParticipate?: number;
      deleted?: boolean;
    };
    OrganizationBindingModel: {
      /** Format: string */
      name?: string | null;
      domainNames?: string[] | null;
      /** Format: string */
      groupName?: string | null;
      /** Format: double */
      longitude?: number | null;
      /** Format: double */
      latitude?: number | null;
      /** Format: int32 */
      locationID?: number | null;
      subOrganizationsEnabled?: boolean | null;
      usersDeleteMethod?: components['schemas']['UsersDeleteMethod'];
      pushSetting?: components['schemas']['PushSetting'];
      logo?: string | null;
      website?: string | null;
      customMainMenuEnabled?: boolean | null;
      helpText?: string | null;
      externalLink?: string | null;
      /** Format: int32 */
      parentID?: number | null;
      useParentEmergencies?: boolean | null;
      organizationName?: string | null;
      number?: string | null;
      address?: string | null;
      phone?: string | null;
      email?: string | null;
      mainContactName?: string | null;
      mainContactEmail?: string | null;
      mainContactPhoneNumber?: string | null;
      invoicePostalAddress?: string | null;
      invoiceEmail?: string | null;
      invoiceGlnNumber?: string | null;
      invoiceElectronicReference?: string | null;
      supportPersonName?: string | null;
      supportPhoneNumber?: string | null;
      supportEmail?: string | null;
      TwoFactorAuthEnabled?: boolean | null;
      /** Format: int32 */
      MaxNumberOfUsers?: number | null;
      HasUserLimit?: boolean | null;
      /** Format: int32 */
      UserLimit?: number | null;
      DesktopAppEnabled?: boolean | null;
      EmailSendMethod?: components['schemas']['EmailSendMethod'];
      /** Format: int32 */
      coForAllUsersLimit?: number | null;
      musterCreateSetting?: components['schemas']['MusterCreateSetting'];
      /** Format: int32 */
      sessionLengthDaysMobile?: number | null;
      /** Format: int32 */
      sessionLengthDaysWeb?: number | null;
      /** Format: int32 */
      sessionLengthDaysDesktop?: number | null;
      /** Format: int32 */
      firstSessionReminderDays?: number | null;
      /** Format: int32 */
      secondSessionReminderDays?: number | null;
      /** Format: int32 */
      thirdSessionReminderDays?: number | null;
      defaultLanguage?: string | null;
      userRegistrationTemplateName?: string | null;
      SsoProvider?: components['schemas']['SsoProvider'];
      SsoAccessToken?: string | null;
      SsoRefreshToken?: string | null;
      /** Format: date-time */
      SsoExpires?: string | null;
      openIdUrl?: string | null;
      openIdClientId?: string | null;
      openIdAudience?: string | null;
      ssoEnabled?: boolean | null;
      sftpEnabled?: boolean | null;
    };
    OrganizationBroadcastBindingModel: {
      /** Format: int32 */
      organizationId?: number | null;
      /** Format: int32 */
      subOrganizationId?: number | null;
      organizationIds?: number[] | null;
      /** Format: int32 */
      locationId?: number | null;
      /** Format: int32 */
      type: number;
      /** Format: multiline */
      text?: string | null;
      photoFileName?: string | null;
      documentFileName?: string | null;
      photoFileNames?: string[] | null;
      documentFileNames?: string[] | null;
      audioFileNames?: string[] | null;
      groupDocumentIds?: number[] | null;
      subject?: string | null;
      attachments?:
        | components['schemas']['MessageAttachmentBindingModel'][]
        | null;
    };
    OrganizationEmailProviderBindingModel: {
      emailProvider?: components['schemas']['EmailProvider'];
    };
    OrganizationForIntercomViewModel: {
      id?: string | null;
      name?: string | null;
    };
    OrganizationImportSettingsBindingModel: {
      fileName?: string | null;
      notificationEmail?: string | null;
      sendRegistrationEmail?: boolean;
      sendImportReport?: boolean;
      importType?: components['schemas']['ImportType'];
      ftpHost?: string | null;
      /** Format: int32 */
      ftpPort?: number | null;
      ftpUser?: string | null;
      ftpPassword?: string | null;
      deleteFileAfterProcessing?: boolean | null;
      groupSeparator?: string | null;
      updatePrimaryPhoneNumberOnlyIfPresent?: boolean | null;
      updateSecondaryPhoneNumberOnlyIfPresent?: boolean | null;
    };
    OrganizationImportSettingsTestViewModel: {
      inputData?: components['schemas']['InputData'][] | null;
      errorMessage?: string | null;
    };
    OrganizationImportSettingsViewModel: {
      /** Format: int32 */
      organizationId?: number;
      fileName?: string | null;
      notificationEmail?: string | null;
      sendRegistrationEmail?: boolean;
      sendImportReport?: boolean;
      importType?: components['schemas']['ImportType'];
      ftpHost?: string | null;
      /** Format: int32 */
      ftpPort?: number | null;
      ftpUser?: string | null;
      ftpPassword?: string | null;
      deleteFileAfterProcessing?: boolean;
      groupSeparator?: string | null;
      updatePrimaryPhoneNumberOnlyIfPresent?: boolean;
      updateSecondaryPhoneNumberOnlyIfPresent?: boolean;
    };
    OrganizationManagerViewModel: {
      /** Format: date-time */
      lastAccess?: string | null;
      phoneNumber?: string | null;
      /** Format: int32 */
      id?: number;
      name?: string | null;
      email?: string | null;
    };
    OrganizationMemberViewModel: {
      name?: string | null;
      isMain?: boolean;
      /** Format: int32 */
      sentMessages?: number;
    };
    OrganizationSamlSettingsBindingModel: {
      /** Format: int32 */
      samlSettingsId?: number | null;
      samlMetadataUrl?: string | null;
      signingCertificate?: string | null;
      signingCertificatePassword?: string | null;
      signatureAlgorithm?: string | null;
      signatureValidationCertificate?: string | null;
      issuer?: string | null;
      certificateValidationMode?: string | null;
      revocationMode?: string | null;
      domainNames?: string[] | null;
    };
    OrganizationSamlSettingsViewModel: {
      /** Format: int32 */
      samlSettingsId?: number;
      samlMetadataUrl?: string | null;
      signingCertificate?: string | null;
      signingCertificatePassword?: string | null;
      signatureAlgorithm?: string | null;
      signatureValidationCertificate?: string | null;
      issuer?: string | null;
      certificateValidationMode?: string | null;
      revocationMode?: string | null;
      domainNames?: string[] | null;
    };
    OrganizationSsoSettingsBindingModel: {
      ssoProvider?: components['schemas']['SsoProvider'];
      sendSSOSetupEmail?: boolean | null;
      skolonSchools?: components['schemas']['OrganizationSsoSettingsSkolonSchools'];
      suborganizationSkolonSchools?: {
        [
          key: string
        ]: components['schemas']['OrganizationSsoSettingsSkolonSchools'];
      } | null;
      redirectUrl?: string | null;
      oAuthCode?: string | null;
      openIdUrl?: string | null;
      openIdClientId?: string | null;
      openIdAudience?: string | null;
      openIdJwkEndpoint?: string | null;
      ldapUrl?: string | null;
      ldapPort?: string | null;
      ldapBaseDn?: string | null;
      ldapBindDn?: string | null;
      ldapBindPassword?: string | null;
      ldapUsersDn?: string | null;
      ldapGroupsDn?: string | null;
      ldapCnAttribute?: string | null;
      ldapMemberOfAttribute?: string | null;
      ldapEmailAttribute?: string | null;
      ldapMemberAttribute?: string | null;
      ldapTitleAttribute?: string | null;
      ldapNameAttribute?: string | null;
      domainNames?: string[] | null;
      samlSettings?:
        | components['schemas']['OrganizationSamlSettingsBindingModel'][]
        | null;
    };
    OrganizationSsoSettingsSkolonSchools: {
      /** Format: int32 */
      groupId?: number | null;
      skolonSchoolIds?: string[] | null;
    };
    /**
     * Format: int32
     * @enum {integer}
     */
    OrganizationType: 0 | 1;
    OrganizationViewModel: {
      /** Format: date-time */
      created?: string;
      /** Format: int32 */
      numberOfGroups?: number | null;
      /** Format: int32 */
      numberOfUsers?: number | null;
      /** Format: int32 */
      crisisTeamID?: number | null;
      crisisTeamName?: string | null;
      subOrganizationsEnabled?: boolean;
      /** Format: int32 */
      numberOfSubOrganizations?: number | null;
      logo?: string | null;
      website?: string | null;
      sosAlarmEnabled?: boolean;
      customMainMenuEnabled?: boolean;
      helpText?: string | null;
      externalLink?: string | null;
      useParentEmergencies?: boolean | null;
      managers?: components['schemas']['OrganizationManagerViewModel'][] | null;
      organizationName?: string | null;
      number?: string | null;
      address?: string | null;
      phone?: string | null;
      email?: string | null;
      mainContactName?: string | null;
      mainContactEmail?: string | null;
      mainContactPhoneNumber?: string | null;
      invoicePostalAddress?: string | null;
      invoiceEmail?: string | null;
      invoiceGlnNumber?: string | null;
      invoiceElectronicReference?: string | null;
      supportPersonName?: string | null;
      supportPhoneNumber?: string | null;
      supportEmail?: string | null;
      /** Format: int32 */
      alarmGroupsCount?: number;
      TwoFactorAuthEnabled?: boolean;
      twoFactorType?: components['schemas']['TwoFactorType'];
      DesktopAppEnabled?: boolean;
      EmailSendMethod?: components['schemas']['EmailSendMethod'];
      /** Format: int32 */
      coForAllUsersLimit?: number | null;
      /** Format: int32 */
      coForAllUsersRemaining?: number | null;
      hasImportSettings?: boolean | null;
      musterCreateSetting?: components['schemas']['MusterCreateSetting'];
      emailProvider?: components['schemas']['EmailProvider'];
      /** Format: int32 */
      sessionLengthDaysMobile?: number | null;
      /** Format: int32 */
      sessionLengthDaysWeb?: number | null;
      /** Format: int32 */
      sessionLengthDaysDesktop?: number | null;
      /** Format: int32 */
      firstSessionReminderDays?: number | null;
      /** Format: int32 */
      secondSessionReminderDays?: number | null;
      /** Format: int32 */
      thirdSessionReminderDays?: number | null;
      defaultLanguage?: string | null;
      ssoProvider?: components['schemas']['SsoProvider'];
      sendSSOSetupEmail?: boolean;
      SsoAccessToken?: string | null;
      SsoRefreshToken?: string | null;
      /** Format: date-time */
      SsoExpires?: string | null;
      openIdUrl?: string | null;
      openIdClientId?: string | null;
      openIdAudience?: string | null;
      openIdJwkEndpoint?: string | null;
      skolonSchools?: components['schemas']['OrganizationSsoSettingsSkolonSchools'];
      ldapUrl?: string | null;
      ldapPort?: string | null;
      ldapBaseDn?: string | null;
      ldapBindDn?: string | null;
      ldapBindPassword?: string | null;
      ldapUsersDn?: string | null;
      ldapGroupsDn?: string | null;
      ldapCnAttribute?: string | null;
      ldapMemberOfAttribute?: string | null;
      ldapEmailAttribute?: string | null;
      ldapMemberAttribute?: string | null;
      ldapTitleAttribute?: string | null;
      ldapNameAttribute?: string | null;
      samlSettings?:
        | components['schemas']['OrganizationSamlSettingsViewModel'][]
        | null;
      ssoEnabled?: boolean | null;
      sftpEnabled?: boolean | null;
      /** Format: int32 */
      userLimit?: number | null;
      /** Format: int32 */
      userLimitAllocated?: number | null;
      hasUserLimit?: boolean;
      usersDeleteMethod?: components['schemas']['UsersDeleteMethod'];
      pushSetting?: components['schemas']['PushSetting'];
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      AccountId?: number;
      name?: string | null;
      domainNames?: string[] | null;
      /** Format: int32 */
      parentId?: number | null;
      /** Format: int32 */
      MaxNumberOfUsers?: number | null;
      /** Format: int32 */
      numberOfUsersRemaining?: number | null;
    };
    OrganizationViewModelShort: {
      usersDeleteMethod?: components['schemas']['UsersDeleteMethod'];
      pushSetting?: components['schemas']['PushSetting'];
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      AccountId?: number;
      name?: string | null;
      domainNames?: string[] | null;
      /** Format: int32 */
      parentId?: number | null;
      /** Format: int32 */
      MaxNumberOfUsers?: number | null;
      /** Format: int32 */
      numberOfUsersRemaining?: number | null;
    };
    OrganizationViewModelShortest: {
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      AccountId?: number;
      name?: string | null;
      domainNames?: string[] | null;
      /** Format: int32 */
      parentId?: number | null;
      /** Format: int32 */
      MaxNumberOfUsers?: number | null;
      /** Format: int32 */
      numberOfUsersRemaining?: number | null;
    };
    OrganizationViewModelWithSupportContacts: {
      /** Format: int32 */
      id?: number;
      name?: string | null;
      supportPersonName?: string | null;
      supportPhoneNumber?: string | null;
      supportEmail?: string | null;
      supportPersonTitle?: string | null;
    };
    OrganizationsUsersStatisticsViewModel: {
      /** Format: int32 */
      from?: number;
      /** Format: int32 */
      toNotIncluded?: number | null;
      /** Format: int32 */
      count?: number;
    };
    OriginalMessageViewModel: {
      groupIds?: number[] | null;
      groupNames?: string[] | null;
      /** Format: int32 */
      emergencyTypeId?: number | null;
      emergencyTypeName?: string | null;
      /** Format: int32 */
      locationId?: number | null;
      /** Format: date-time */
      sent?: string;
      /** Format: int32 */
      senderId?: number | null;
      senderName?: string | null;
    };
    PermissionViewModel: {
      /** Format: int32 */
      id?: number;
      name?: string | null;
      code?: string | null;
      description?: string | null;
    };
    PersonalAlarmBindingModels: {
      /** Format: date-time */
      dispatchTime?: string | null;
      /** Format: int32 */
      locationId?: number | null;
      deviceId?: string | null;
      active?: boolean | null;
      /** Format: int32 */
      groupID?: number | null;
      groupIDs?: number[] | null;
      recipientIds?: number[] | null;
      text?: string | null;
      /** Format: double */
      longitude?: number | null;
      /** Format: double */
      latitude?: number | null;
      oneMinuteWarning?: boolean | null;
      readonly allGroupIds?: number[] | null;
    };
    PersonalAlarmViewModel: {
      /** Format: int32 */
      Id?: number;
      /** Format: date-time */
      DispatchTime?: string;
      /** Format: date-time */
      CreatedTime?: string;
      Active?: boolean;
      /** Format: int32 */
      UserId?: number;
      /** Format: int32 */
      LocationId?: number | null;
      /** Format: int32 */
      MessageId?: number | null;
      DeviceId?: string | null;
      /** Format: int32 */
      readonly GroupId?: number | null;
      GroupIds?: number[] | null;
      Text?: string | null;
      oneMinuteWarning?: boolean;
    };
    PostChecklistBindingModel: {
      name: string;
      /** Format: int32 */
      organizationId?: number | null;
      items?: components['schemas']['PostChecklistItemBindingModel'][] | null;
      userIds?: number[] | null;
      groupIds?: number[] | null;
    };
    PostChecklistItemBindingModel: {
      name: string;
      complete: boolean;
    };
    PostDocumentsViewModel: {
      documentIds?: number[] | null;
    };
    PostMessageBindingModel: {
      type: components['schemas']['GroupMessageType'];
      replyType?: components['schemas']['ReplyType'];
      /** Format: int32 */
      subType?: number | null;
      /** Format: int32 */
      groupID?: number | null;
      recipientIDs?: number[] | null;
      /** Format: int32 */
      locationID?: number | null;
      /** Format: double */
      senderLatitude?: number | null;
      /** Format: double */
      senderLongitude?: number | null;
      /** Format: int32 */
      ChecklistID?: number | null;
      groupIDs?: number[] | null;
      /** Format: int32 */
      emergencyTypeId?: number | null;
      /** Format: int32 */
      situationReportID?: number | null;
      /** Format: int32 */
      musterId?: number | null;
      /** Format: int32 */
      onCallAlertId?: number | null;
      ceaseNotification?: boolean;
      /** Format: int32 */
      subOrganisationIDForEmergencyMessage?: number | null;
      /** Format: multiline */
      text?: string | null;
      photoFileName?: string | null;
      documentFileName?: string | null;
      photoFileNames?: string[] | null;
      documentFileNames?: string[] | null;
      audioFileNames?: string[] | null;
      groupDocumentIds?: number[] | null;
      subject?: string | null;
      attachments?:
        | components['schemas']['MessageAttachmentBindingModel'][]
        | null;
    };
    ProblemDetails: {
      type?: string | null;
      title?: string | null;
      /** Format: int32 */
      status?: number | null;
      detail?: string | null;
      instance?: string | null;
    } & {
      [key: string]: unknown;
    };
    /**
     * Format: int32
     * @enum {integer}
     */
    PushSetting: 0 | 1;
    PutDocumentViewModel: {
      URL?: string | null;
    };
    PutImageViewModel: {
      URL?: string | null;
    };
    ReminderEmailBindingModel: {
      text?: string | null;
    };
    ReorderEmergencyTypeBindingModel: {
      /** Format: int32 */
      emergencyTypeId: number;
      /** Format: int32 */
      order: number;
    };
    ReplyBindingModel: {
      text?: string | null;
      /** Format: int32 */
      replyId?: number | null;
      /** Format: int32 */
      ChecklistID?: number | null;
      photoFileNames?: string[] | null;
      documentFileNames?: string[] | null;
      audioFileNames?: string[] | null;
      attachments?:
        | components['schemas']['MessageAttachmentBindingModel'][]
        | null;
      /** Format: int32 */
      locationID?: number | null;
      groupDocumentIds?: number[] | null;
      ceaseNotification?: boolean;
      replyToInitialMessage?: boolean;
      replyPurpose?: components['schemas']['ReplyPurpose'];
    };
    ReplyDataViewModel: {
      reads?: components['schemas']['ReplyReadViewModel'][] | null;
      notReads?: components['schemas']['MessageRecipientViewModel'][] | null;
    };
    /**
     * Format: int32
     * @enum {integer}
     */
    ReplyPurpose: 0 | 1 | 2 | 3 | 4 | 5;
    ReplyReadViewModel: {
      /** Format: int32 */
      userId?: number;
      name?: string | null;
      title?: string | null;
      photoFileName?: string | null;
      /** Format: int32 */
      replyId?: number;
      /** Format: date-time */
      readTime?: string;
    };
    /**
     * Format: int32
     * @enum {integer}
     */
    ReplyType: 0 | 1 | 2;
    ReplyViewModel: {
      /** Format: int32 */
      id?: number;
      deleted?: boolean;
      /** Format: int32 */
      replyId?: number | null;
      initialReplyText?: string | null;
      initialReplySender?: string | null;
      initialReplyLocation?: string | null;
      initialReplyAttachments?: string[] | null;
      initialReplyPhotoFileNames?: string[] | null;
      initialReplyAudioFileNames?: string[] | null;
      initialReplyDocumentFileNames?: string[] | null;
      isInitialReplyDeleted?: boolean | null;
      /** Format: date-time */
      sent?: string;
      text?: string | null;
      /** Format: int32 */
      senderID?: number;
      senderName?: string | null;
      photoFileName?: string | null;
      isCrisisTeamMember?: boolean;
      /** Format: int32 */
      checklistID?: number | null;
      checklistName?: string | null;
      photoFileNames?: string[] | null;
      documentFileNames?: string[] | null;
      audioFileNames?: string[] | null;
      attachments?:
        | components['schemas']['MessageAttachmentViewModel'][]
        | null;
      /** Format: int32 */
      locationID?: number | null;
      locationName?: string | null;
      edited?: boolean;
      emergencyRecall?: boolean;
      replyToInitialMessage?: boolean;
      purpose?: components['schemas']['ReplyPurpose'];
    };
    RequestForOrganizationEmailRecipientsBindingModel: {
      organizationIDs: number[];
    };
    RequestForUserExportToExcelBindingModel: {
      organizationIds?: number[] | null;
    };
    RequestVerificationTokenViewModel: {
      requestVerificationToken?: string | null;
    };
    ResetPasswordBindingModel: {
      /** Format: password */
      password: string;
      /** Format: int32 */
      userID: number;
      token: string;
    };
    /**
     * Format: int32
     * @enum {integer}
     */
    RoleBelonging: 0 | 1 | 2;
    RoleStatus: {
      name?: string | null;
      status?: boolean;
    };
    RoleViewModel: {
      /** Format: int32 */
      id?: number;
      name?: string | null;
      label?: string | null;
      roleExplained?: string | null;
      publicRole?: boolean;
    };
    RssFeedBindingModel: {
      /** Format: string */
      region: string;
      /** Format: string */
      comment?: string | null;
      /** Format: string */
      url: string;
      /** Format: int32 */
      type: number;
      /** Format: int32 */
      organizationID: number;
    };
    /**
     * Format: int32
     * @enum {integer}
     */
    RssFeedStatus: 0 | 1 | 2;
    RssFeedViewModel: {
      /** Format: int32 */
      id?: number;
      region?: string | null;
      comment?: string | null;
      url?: string | null;
      /** Format: int32 */
      type?: number;
      organizations?:
        | components['schemas']['OrganizationViewModelShort'][]
        | null;
      latestEntry?: components['schemas']['NewsViewModel'];
      entries?: components['schemas']['NewsViewModel'][] | null;
      status?: components['schemas']['RssFeedStatus'];
      /** Format: date-time */
      lastLoad?: string | null;
      errorMessage?: string | null;
    };
    SendEmailToOrganizationsBindingModel: {
      organizationIDs: number[];
      title: string;
      emailTemplateName: string;
    };
    SendEmailsToOrganizationsMembersBindingModel: {
      organizationIDs: number[];
      userIds?: number[] | null;
      emailTemplateName: string;
      extraParameters?: {
        [key: string]: string | null;
      } | null;
    };
    /**
     * Format: int32
     * @enum {integer}
     */
    SendMethod: 0 | 1 | 2;
    SendPasswordTokenBindingModel: {
      /** Format: email */
      email: string;
    };
    SendRegistrationEmailModel: {
      ids?: number[] | null;
      resendExpired?: boolean | null;
    };
    /**
     * Format: int32
     * @enum {integer}
     */
    SenderType: 0 | 1 | 2;
    SetDocumentOfflineBindingModel: {
      /** Format: int32 */
      folderID?: number | null;
      /** Format: int32 */
      documentID?: number | null;
      /** Format: int32 */
      groupID?: number | null;
      offline?: boolean;
      action?: components['schemas']['SetOfflineAction'];
    };
    SetGroupAdminBindingModel: {
      admin: boolean;
    };
    /**
     * Format: int32
     * @enum {integer}
     */
    SetOfflineAction: 0 | 1 | 2 | 3;
    SetPreferredLanguageBindingModel: {
      language?: string | null;
    };
    ShareChecklistReadonlyBindingModel: {
      userIds: number[];
      groupIds: number[];
    };
    ShareChecklistWithUsersBindingModel: {
      userIds: number[];
    };
    SkolonSchool: {
      id?: string | null;
      isDeleted?: boolean;
      disabled?: boolean;
      name?: string | null;
      organizationId?: string | null;
      address?: string | null;
      zipcode?: string | null;
      city?: string | null;
      municipality?: string | null;
      unitCodes?: components['schemas']['UnitCode'][] | null;
    };
    SkolonUpdateRequest: {
      entities?:
        | components['schemas']['SkolonUpdateRequestEntityType'][]
        | null;
      /** Format: int32 */
      organizationId?: number | null;
    };
    /**
     * Format: int32
     * @enum {integer}
     */
    SkolonUpdateRequestEntityType: 0 | 1 | 2 | 3 | 4 | 5;
    /**
     * Format: int32
     * @enum {integer}
     */
    SortByEnum: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10;
    /**
     * Format: int32
     * @enum {integer}
     */
    SortEnum: 0 | 1;
    /**
     * Format: int32
     * @enum {integer}
     */
    SsoProvider: 0 | 1 | 2 | 3;
    SsoRedirectViewModel: {
      url?: string | null;
    };
    StartChecklistItemBindingModel: {
      newName?: string | null;
    };
    StartChecklistWithUsersAndGroupsBindingModel: {
      userIds?: number[] | null;
      groupIds?: number[] | null;
      newName?: string | null;
    };
    StringStringIEnumerableKeyValuePair: {
      key?: string | null;
      value?: string[] | null;
    };
    SubOrganizationBindingModel: {
      /** Format: string */
      name: string;
      /** Format: string */
      organizationID: number;
      /** Format: int32 */
      userLimit?: number | null;
      useOrganizationEmergencies?: boolean | null;
    };
    SubOrganizationSimpleViewModel: {
      /** Format: int32 */
      id?: number;
      name?: string | null;
      groupIDs?: number[] | null;
      groups?: components['schemas']['GroupViewModelSimple'][] | null;
      noGroup?: boolean | null;
      skipMap?: boolean | null;
      allowCustomizedText?: boolean | null;
      warningStep?: boolean | null;
      /** Format: int32 */
      checklistTemplateId?: number | null;
      blocking?: boolean | null;
      Texts?: components['schemas']['LocalizedTextViewModel'][] | null;
    };
    TestApiViewModel: {
      DatabaseUp?: boolean;
      RabbitUp?: boolean;
    };
    TextTemplateForExternalContactsBindingModel: {
      name?: string | null;
      content?: string | null;
    };
    TextTemplateForExternalContactsViewModel: {
      /** Format: int32 */
      id?: number;
      name?: string | null;
      content?: string | null;
      /** Format: int32 */
      organizationId?: number;
    };
    TotalUnreadViewModel: {
      /** Format: int32 */
      UnreadCount?: number;
      ActiveEmergency?: boolean;
      /** Format: int32 */
      UnreadMessagesAndRepliesCount?: number;
      /** Format: int32 */
      ActiveChecklists?: number;
      blockingAlarm?: boolean;
      /** Format: date-time */
      personalAlarmDispatchTime?: string | null;
      /** Format: int32 */
      activeMusterCount?: number;
    };
    TutorialBindingModel: {
      iconName?: string | null;
      /** Format: int32 */
      sortOrder?: number;
      isOnlyWebAdminAccessible?: boolean;
      /** Format: int32 */
      parentId?: number | null;
      /** Format: int32 */
      roleId?: number | null;
      /** Format: int32 */
      menuItemId?: number | null;
      contents?:
        | components['schemas']['EditTutorialContentBindingModel'][]
        | null;
    };
    TutorialContent: {
      title?: string | null;
      language?: string | null;
      content?: string | null;
      /** Format: int32 */
      tutorialID?: number;
    };
    TutorialViewModel: {
      /** Format: int32 */
      id?: number;
      /** Format: int32 */
      menuItemId?: number | null;
      /** Format: int32 */
      roleId?: number | null;
      isOnlyWebAdminAccessible?: boolean;
      iconName?: string | null;
      /** Format: int32 */
      sortOrder?: number;
      /** Format: int32 */
      parentId?: number | null;
      tutorialContents?: components['schemas']['TutorialContent'][] | null;
      roleName?: string | null;
      menuItemName?: string | null;
    };
    /**
     * Format: int32
     * @enum {integer}
     */
    TwoFactorType: 0 | 1;
    UnitCode: {
      code?: string | null;
      type?: string | null;
    };
    /**
     * Format: int32
     * @enum {integer}
     */
    UserAlarmTestStatus: 0 | 1 | 2 | 3;
    UserAndGroupViewModel: {
      User?: components['schemas']['UserMemberViewModel'];
      Group?: components['schemas']['GroupViewModelExtended'];
    };
    UserBindingModel: {
      name?: string | null;
      email?: string | null;
      title?: string | null;
      phonenumber?: string | null;
      secondaryPhoneNumber?: string | null;
      /** Format: int32 */
      groupID?: number | null;
      role?: string | null;
      organizationIDs?: number[] | null;
      twoFactorAuthEnabled?: boolean | null;
      twoFactorAuthPhoneNumber?: string | null;
      sendEmail?: boolean | null;
      photoFileName?: string | null;
      groupIDs?: number[] | null;
    };
    UserBindingModelForImport: {
      userImportOperation?: components['schemas']['UserImportOperation'];
      /** Format: int32 */
      userID?: number | null;
      name?: string | null;
      email?: string | null;
      title?: string | null;
      phonenumber?: string | null;
      secondaryPhoneNumber?: string | null;
      /** Format: int32 */
      groupID?: number | null;
      role?: string | null;
      organizationIDs?: number[] | null;
      twoFactorAuthEnabled?: boolean | null;
      twoFactorAuthPhoneNumber?: string | null;
      sendEmail?: boolean | null;
      photoFileName?: string | null;
      groupIDs?: number[] | null;
    };
    /**
     * Format: int32
     * @enum {integer}
     */
    UserCreationMethod: 0 | 1;
    UserImportData: {
      /** Format: int32 */
      id?: number | null;
      email?: string | null;
      name?: string | null;
      phoneNumber?: string | null;
      secondaryPhoneNumber?: string | null;
      title?: string | null;
      organizationIds?: number[] | null;
    };
    /**
     * Format: int32
     * @enum {integer}
     */
    UserImportOperation: 0 | 1;
    UserImportRequest: {
      usersToImport?: components['schemas']['UserImportData'][] | null;
      /** Format: int32 */
      organizationID?: number;
    };
    UserImportResponse: {
      newUsers?: components['schemas']['UserImportData'][] | null;
      usersToEdit?: components['schemas']['EditedUserData'][] | null;
      usersWithErrors?: components['schemas']['UserWithErrorData'][] | null;
      /** Format: int32 */
      organizationId?: number;
    };
    UserImportResult: {
      /** Format: int32 */
      userId?: number | null;
      email?: string | null;
      success?: boolean;
      comment?: string | null;
      userImportOperation?: components['schemas']['UserImportOperation'];
      originalUserData?: components['schemas']['UserBindingModelForImport'];
    };
    UserInfoBindingModel: {
      /** Format: string */
      photoFileName?: string | null;
      /** Format: tel */
      phoneNumber?: string | null;
      /** Format: string */
      streetAddress?: string | null;
      /** Format: string */
      postalCode?: string | null;
      /** Format: string */
      city?: string | null;
      /** Format: int32 */
      municipality?: number | null;
      notifyWithEmail?: boolean | null;
      notifyMarketing?: boolean | null;
      /** Format: int32 */
      groupID?: number | null;
      role?: string | null;
      notifyChecklists?: boolean | null;
      notifyDocuments?: boolean | null;
      readDisclaimer?: boolean | null;
      unavailable?: boolean | null;
      /** Format: date-time */
      unavailableDateTo?: string | null;
    };
    UserInfoViewModel: {
      token?: string | null;
      authenticationType?: string | null;
      sosAlarmEnabledInOrganization?: boolean;
      /** Format: int32 */
      crisisTeamID?: number | null;
      /** Format: int32 */
      groupsInOrganization?: number | null;
      /** Format: int32 */
      personsInOrganization?: number | null;
      subOrganizationsEnabled?: boolean | null;
      organizationCustomMainMenuEnabled?: boolean | null;
      isCrisisTeamMember?: boolean;
      permissions?: components['schemas']['PermissionViewModel'][] | null;
      organizations?:
        | components['schemas']['OrganizationViewModelShortest'][]
        | null;
      managedOrganizations?:
        | components['schemas']['OrganizationViewModelShortest'][]
        | null;
      organizationSupportPersonName?: string | null;
      organizationSupportPhoneNumber?: string | null;
      organizationSupportEmail?: string | null;
      organizationHasImportSettings?: boolean | null;
      loggedAsAdmin?: boolean;
      /** Format: int32 */
      coForAllUsersRemaining?: number | null;
      readDisclaimer?: boolean;
      menuItems?: components['schemas']['MenuItemViewModelBrief'][] | null;
      roles?: string[] | null;
      preferredLanguage?: string | null;
      preferredLanguageAdminPanel?: string | null;
      /** Format: int32 */
      organizationID?: number | null;
      organizationName?: string | null;
      organizationLogo?: string | null;
      organizationWebsite?: string | null;
      organizationExternalLink?: string | null;
      /** Format: int32 */
      personalAlarmId?: number | null;
      organizationMusterCreateSetting?: components['schemas']['MusterCreateSetting'];
      organizationHelpText?: string | null;
      sso_provider?: components['schemas']['SsoProvider'];
      photoFileName?: string | null;
      notifyWithEmail?: boolean;
      notifyChecklists?: boolean;
      notifyDocuments?: boolean;
      /** Format: int32 */
      id?: number;
      name?: string | null;
      email?: string | null;
      unavailable?: boolean;
      /** Format: date-time */
      unavailableDateTo?: string | null;
      readonly available?: boolean;
    };
    UserInfoViewModelApp: {
      menuItems?: components['schemas']['MenuItemViewModelBrief'][] | null;
      roles?: string[] | null;
      preferredLanguage?: string | null;
      preferredLanguageAdminPanel?: string | null;
      /** Format: int32 */
      organizationID?: number | null;
      organizationName?: string | null;
      organizationLogo?: string | null;
      organizationWebsite?: string | null;
      organizationExternalLink?: string | null;
      /** Format: int32 */
      personalAlarmId?: number | null;
      organizationMusterCreateSetting?: components['schemas']['MusterCreateSetting'];
      organizationHelpText?: string | null;
      sso_provider?: components['schemas']['SsoProvider'];
      photoFileName?: string | null;
      notifyWithEmail?: boolean;
      notifyChecklists?: boolean;
      notifyDocuments?: boolean;
      /** Format: int32 */
      id?: number;
      name?: string | null;
      email?: string | null;
      unavailable?: boolean;
      /** Format: date-time */
      unavailableDateTo?: string | null;
      readonly available?: boolean;
    };
    /**
     * Format: int32
     * @enum {integer}
     */
    UserInviteStatus: 0 | 1 | 2 | 3;
    /**
     * Format: int32
     * @enum {integer}
     */
    UserLastActiveStatus: 0 | 1 | 2 | 3;
    UserMemberViewModel: {
      /** Format: int32 */
      id?: number;
      name?: string | null;
      title?: string | null;
      email?: string | null;
      /** Format: date-time */
      created?: string | null;
      /** Format: date-time */
      lastaccess?: string | null;
      lastAccessAgent?: string | null;
      lastAccessIP?: string | null;
      /** Format: int32 */
      groupscount?: number;
      /** Format: int32 */
      messagescount?: number;
      roles?: components['schemas']['RoleViewModel'][] | null;
      rolesIds?: number[] | null;
      location?: string | null;
      phoneNumber?: string | null;
      creationMethod?: components['schemas']['UserCreationMethod'];
      lastActiveStatus?: components['schemas']['UserLastActiveStatus'];
      readonly organization?: string | null;
      /** Format: int32 */
      readonly organizationID?: number | null;
      /** Format: int32 */
      readonly organizationCount?: number;
      readonly subOrganization?: string | null;
      /** Format: int32 */
      readonly subOrganizationID?: number | null;
      /** Format: int32 */
      readonly subOrganizationCount?: number;
      readonly mainOrganization?: string | null;
      /** Format: int32 */
      readonly mainOrganizationID?: number | null;
      inviteStatus?: components['schemas']['UserInviteStatus'];
      /** Format: int32 */
      activeTokens?: number | null;
      twoFactorAuthEnabled?: boolean | null;
      twoFactorAuthPhoneNumber?: string | null;
      photoFileName?: string | null;
      readonly multipleOrganisations?: boolean;
      readonly organizationIds?: number[] | null;
      lastAlarmTestStatus?: components['schemas']['UserAlarmTestStatus'];
      /** Format: date-time */
      lastAlarmTestDate?: string | null;
      structureManager?: boolean | null;
      readonly managedOrganizations?:
        | components['schemas']['OrganizationViewModelShortest'][]
        | null;
    };
    UserPasswordBindingModel: {
      password?: string | null;
    };
    UserResolveBindingModel: {
      /** Format: int32 */
      userId?: number;
      resolveType?: components['schemas']['UserResolveType'];
    };
    /**
     * Format: int32
     * @enum {integer}
     */
    UserResolveType: 0 | 1;
    UserRoleBindingModel: {
      name?: string | null;
      label?: string | null;
      roleExplained?: string | null;
      isPublicRole?: boolean;
      names?: components['schemas']['LocalizedNameBindingModel'][] | null;
    };
    UserRoleViewModel: {
      /** Format: int32 */
      id?: number;
      name?: string | null;
      roleExplained?: string | null;
      /** Format: int32 */
      sortOrder?: number;
      isPublicRole?: boolean;
      assignedToUser?: boolean | null;
      label?: string | null;
      names?: components['schemas']['LocalizedNameViewModel'][] | null;
      belonging?: components['schemas']['RoleBelonging'];
    };
    UserRolesStatuses: {
      /** Format: int32 */
      userId?: number;
      roleStatuses?: components['schemas']['RoleStatus'][] | null;
    };
    UserRolesViewModel: {
      /** Format: int32 */
      userId?: number;
      roles?: string[] | null;
    };
    UserSimpleViewModel: {
      /** Format: int32 */
      id?: number;
      name?: string | null;
    };
    UserViewModel: {
      /** Format: int32 */
      id?: number;
      displayName?: string | null;
      title?: string | null;
      photoFileName?: string | null;
      email?: string | null;
      /** Format: int32 */
      creatorId?: number | null;
      phoneNumber?: string | null;
      /** Format: date-time */
      lastAccess?: string | null;
      /** Format: date-time */
      created?: string;
      unavailable?: boolean;
      /** Format: date-time */
      unavailableDateTo?: string | null;
      readonly available?: boolean;
    };
    UserViewModelExtended: {
      isCrisisTeamMember?: boolean;
      roles?: string[] | null;
      /** Format: int32 */
      municipality?: number | null;
      municipalityname?: string | null;
      /** Format: int32 */
      statusCode?: number | null;
      /** Format: int32 */
      id?: number;
      displayName?: string | null;
      title?: string | null;
      photoFileName?: string | null;
      email?: string | null;
      /** Format: int32 */
      creatorId?: number | null;
      phoneNumber?: string | null;
      /** Format: date-time */
      lastAccess?: string | null;
      /** Format: date-time */
      created?: string;
      unavailable?: boolean;
      /** Format: date-time */
      unavailableDateTo?: string | null;
      readonly available?: boolean;
    };
    UserViewModelFull: {
      streetAddress?: string | null;
      postalCode?: string | null;
      city?: string | null;
      notifyWithEmail?: boolean;
      notifyMarketing?: boolean;
      acceptedTermsAndConditions?: boolean;
      /** @deprecated */
      onDuty?: boolean;
      title?: string | null;
      notifyChecklists?: boolean;
      notifyDocuments?: boolean;
      isCrisisTeamMember?: boolean;
      roles?: string[] | null;
      /** Format: int32 */
      municipality?: number | null;
      municipalityname?: string | null;
      /** Format: int32 */
      statusCode?: number | null;
      /** Format: int32 */
      id?: number;
      displayName?: string | null;
      photoFileName?: string | null;
      email?: string | null;
      /** Format: int32 */
      creatorId?: number | null;
      phoneNumber?: string | null;
      /** Format: date-time */
      lastAccess?: string | null;
      /** Format: date-time */
      created?: string;
      unavailable?: boolean;
      /** Format: date-time */
      unavailableDateTo?: string | null;
      readonly available?: boolean;
    };
    UserWithErrorData: {
      errorMessage?: string | null;
      /** Format: int32 */
      id?: number | null;
      email?: string | null;
      name?: string | null;
      phoneNumber?: string | null;
      secondaryPhoneNumber?: string | null;
      title?: string | null;
      organizationIds?: number[] | null;
    };
    UsersAccountViewModel: {
      users?: components['schemas']['UserMemberViewModel'][] | null;
      /** Format: int32 */
      total?: number;
    };
    /**
     * Format: int32
     * @enum {integer}
     */
    UsersDeleteMethod: 0 | 1;
    UsersWithBlockingAlarmBindingModel: {
      userIds?: number[] | null;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  PostComment: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        checkListID: number;
        itemID: number;
      };
      cookie?: never;
    };
    requestBody?: {
      content: {
        'application/json-patch+json': components['schemas']['CommentBindingModel'];
        'application/json': components['schemas']['CommentBindingModel'];
        'text/json': components['schemas']['CommentBindingModel'];
        'application/*+json': components['schemas']['CommentBindingModel'];
        'application/xml': components['schemas']['CommentBindingModel'];
        'text/xml': components['schemas']['CommentBindingModel'];
        'application/*+xml': components['schemas']['CommentBindingModel'];
      };
    };
    responses: {
      /** @description Returns newly created comment view model */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'text/plain': components['schemas']['ChecklistCommentViewModel'];
          'application/json': components['schemas']['ChecklistCommentViewModel'];
          'text/json': components['schemas']['ChecklistCommentViewModel'];
          'application/xml': components['schemas']['ChecklistCommentViewModel'];
          'text/xml': components['schemas']['ChecklistCommentViewModel'];
        };
      };
    };
  };
}
